/*******************************************************************************
 * Copyright (C) 2010 - 2016. TIBCO Software Inc. 
 * All Rights Reserved. Confidential & Proprietary.
 ******************************************************************************/
/*
 * generated by Xtext
 */
package com.jaspersoft.studio.editor.jrexpressions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JavaJRExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JRExpressionModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JRExpressionModel");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionJasperReportsExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//JRExpressionModel:
		//	expression=JasperReportsExpression?;
		@Override public ParserRule getRule() { return rule; }

		//expression=JasperReportsExpression?
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//JasperReportsExpression
		public RuleCall getExpressionJasperReportsExpressionParserRuleCall_0() { return cExpressionJasperReportsExpressionParserRuleCall_0; }
	}

	public class JasperReportsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JasperReportsExpression");
		private final RuleCall cConditionalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//JasperReportsExpression:
		//	ConditionalExpression;
		@Override public ParserRule getRule() { return rule; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall() { return cConditionalExpressionParserRuleCall; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cTestExpressionConditionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTrueStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTrueStatementJasperReportsExpressionParserRuleCall_1_1_0 = (RuleCall)cTrueStatementAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFalseStatementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFalseStatementJasperReportsExpressionParserRuleCall_1_3_0 = (RuleCall)cFalseStatementAssignment_1_3.eContents().get(0);
		
		//ConditionalExpression JasperReportsExpression:
		//	ConditionalOrExpression (=> ({TestExpression.condition=current} '?') trueStatement=JasperReportsExpression ':'
		//	falseStatement=JasperReportsExpression)?
		@Override public ParserRule getRule() { return rule; }

		//ConditionalOrExpression (=> ({TestExpression.condition=current} '?') trueStatement=JasperReportsExpression ':'
		//falseStatement=JasperReportsExpression)?
		public Group getGroup() { return cGroup; }

		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_0() { return cConditionalOrExpressionParserRuleCall_0; }

		//(=> ({TestExpression.condition=current} '?') trueStatement=JasperReportsExpression ':'
		//falseStatement=JasperReportsExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({TestExpression.condition=current} '?')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({TestExpression.condition=current} '?')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{TestExpression.condition=current}
		public Action getTestExpressionConditionAction_1_0_0_0() { return cTestExpressionConditionAction_1_0_0_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_0_0_1() { return cQuestionMarkKeyword_1_0_0_1; }

		//trueStatement=JasperReportsExpression
		public Assignment getTrueStatementAssignment_1_1() { return cTrueStatementAssignment_1_1; }

		//JasperReportsExpression
		public RuleCall getTrueStatementJasperReportsExpressionParserRuleCall_1_1_0() { return cTrueStatementJasperReportsExpressionParserRuleCall_1_1_0; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//falseStatement=JasperReportsExpression
		public Assignment getFalseStatementAssignment_1_3() { return cFalseStatementAssignment_1_3; }

		//JasperReportsExpression
		public RuleCall getFalseStatementJasperReportsExpressionParserRuleCall_1_3_0() { return cFalseStatementJasperReportsExpressionParserRuleCall_1_3_0; }
	}

	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConditionalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ConditionalOrExpression JasperReportsExpression:
		//	ConditionalAndExpression (=> ({BinaryExpression.left=current} op='||') right=ConditionalAndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//ConditionalAndExpression (=> ({BinaryExpression.left=current} op='||') right=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }

		//ConditionalAndExpression
		public RuleCall getConditionalAndExpressionParserRuleCall_0() { return cConditionalAndExpressionParserRuleCall_0; }

		//(=> ({BinaryExpression.left=current} op='||') right=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpression.left=current} op='||')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpression.left=current} op='||')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0_0_0() { return cBinaryExpressionLeftAction_1_0_0_0; }

		//op='||'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_0_0_1_0() { return cOpVerticalLineVerticalLineKeyword_1_0_0_1_0; }

		//right=ConditionalAndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ConditionalAndExpression
		public RuleCall getRightConditionalAndExpressionParserRuleCall_1_1_0() { return cRightConditionalAndExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ConditionalAndExpression JasperReportsExpression:
		//	EqualityExpression (=> ({BinaryExpression.left=current} op='&&') right=EqualityExpression)*
		@Override public ParserRule getRule() { return rule; }

		//EqualityExpression (=> ({BinaryExpression.left=current} op='&&') right=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//(=> ({BinaryExpression.left=current} op='&&') right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpression.left=current} op='&&')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpression.left=current} op='&&')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0_0_0() { return cBinaryExpressionLeftAction_1_0_0_0; }

		//op='&&'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_0_0_1_0() { return cOpAmpersandAmpersandKeyword_1_0_0_1_0; }

		//right=EqualityExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_1_0() { return cRightEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInstanceofExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightInstanceofExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EqualityExpression JasperReportsExpression:
		//	InstanceofExpression (=> ({BinaryExpression.left=current} op=('==' | '!=')) right=InstanceofExpression)*
		@Override public ParserRule getRule() { return rule; }

		//InstanceofExpression (=> ({BinaryExpression.left=current} op=('==' | '!=')) right=InstanceofExpression)*
		public Group getGroup() { return cGroup; }

		//InstanceofExpression
		public RuleCall getInstanceofExpressionParserRuleCall_0() { return cInstanceofExpressionParserRuleCall_0; }

		//(=> ({BinaryExpression.left=current} op=('==' | '!=')) right=InstanceofExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpression.left=current} op=('==' | '!='))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpression.left=current} op=('==' | '!='))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0_0_0() { return cBinaryExpressionLeftAction_1_0_0_0; }

		//op=('==' | '!=')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('==' | '!=')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_0_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_0_1_0_0; }

		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_0_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_0_0_1_0_1; }

		//right=InstanceofExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//InstanceofExpression
		public RuleCall getRightInstanceofExpressionParserRuleCall_1_1_0() { return cRightInstanceofExpressionParserRuleCall_1_1_0; }
	}

	public class InstanceofExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.InstanceofExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpInstanceofKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTypeParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//InstanceofExpression JasperReportsExpression:
		//	RelationalExpression (=> ({BinaryExpression.left=current} op='instanceof') right=Type)?
		@Override public ParserRule getRule() { return rule; }

		//RelationalExpression (=> ({BinaryExpression.left=current} op='instanceof') right=Type)?
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//(=> ({BinaryExpression.left=current} op='instanceof') right=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpression.left=current} op='instanceof')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpression.left=current} op='instanceof')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0_0_0() { return cBinaryExpressionLeftAction_1_0_0_0; }

		//op='instanceof'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'instanceof'
		public Keyword getOpInstanceofKeyword_1_0_0_1_0() { return cOpInstanceofKeyword_1_0_0_1_0; }

		//right=Type
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Type
		public RuleCall getRightTypeParserRuleCall_1_1_0() { return cRightTypeParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpression JasperReportsExpression:
		//	AdditiveExpression (=> ({BinaryExpression.left=current} op=RelationalOp) right=AdditiveExpression)*
		@Override public ParserRule getRule() { return rule; }

		//AdditiveExpression (=> ({BinaryExpression.left=current} op=RelationalOp) right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//(=> ({BinaryExpression.left=current} op=RelationalOp) right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpression.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpression.left=current} op=RelationalOp)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0_0_0() { return cBinaryExpressionLeftAction_1_0_0_0; }

		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_1_0() { return cRightAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression JasperReportsExpression:
		//	MultiplicativeExpression (=> ({BinaryExpression.left=current} op=('+' | '-')) right=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicativeExpression (=> ({BinaryExpression.left=current} op=('+' | '-')) right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({BinaryExpression.left=current} op=('+' | '-')) right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpression.left=current} op=('+' | '-'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpression.left=current} op=('+' | '-'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0_0_0() { return cBinaryExpressionLeftAction_1_0_0_0; }

		//op=('+' | '-')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_0_1_0_2 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression JasperReportsExpression:
		//	UnaryExpression (=> ({BinaryExpression.left=current} op=('*' | '/' | '%')) right=UnaryExpression)*
		@Override public ParserRule getRule() { return rule; }

		//UnaryExpression (=> ({BinaryExpression.left=current} op=('*' | '/' | '%')) right=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//(=> ({BinaryExpression.left=current} op=('*' | '/' | '%')) right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpression.left=current} op=('*' | '/' | '%'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpression.left=current} op=('*' | '/' | '%'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0_0_0() { return cBinaryExpressionLeftAction_1_0_0_0; }

		//op=('*' | '/' | '%')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('*' | '/' | '%')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//'%'
		public Keyword getOpPercentSignKeyword_1_0_0_1_0_2() { return cOpPercentSignKeyword_1_0_0_1_0_2; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_1_0() { return cRightUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryExpressionNotPlusMinusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UnaryExpression JasperReportsExpression // JasperReports does not compile with '--' and '++', so do not consider it
		//:
		//	'+' UnaryExpression
		//	| '-' UnaryExpression
		//	| UnaryExpressionNotPlusMinus
		@Override public ParserRule getRule() { return rule; }

		//'+' UnaryExpression | '-' UnaryExpression | UnaryExpressionNotPlusMinus
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+' UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0_1() { return cUnaryExpressionParserRuleCall_0_1; }

		//'-' UnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1_1() { return cUnaryExpressionParserRuleCall_1_1; }

		//UnaryExpressionNotPlusMinus
		public RuleCall getUnaryExpressionNotPlusMinusParserRuleCall_2() { return cUnaryExpressionNotPlusMinusParserRuleCall_2; }
	}

	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.UnaryExpressionNotPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCastedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//UnaryExpressionNotPlusMinus JasperReportsExpression:
		//	'~' UnaryExpression
		//	| '!' UnaryExpression
		//	| => CastedExpression | PrimaryExpression
		@Override public ParserRule getRule() { return rule; }

		//'~' UnaryExpression | '!' UnaryExpression | => CastedExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//'~' UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//'~'
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0_1() { return cUnaryExpressionParserRuleCall_0_1; }

		//'!' UnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1_1() { return cUnaryExpressionParserRuleCall_1_1; }

		//=> CastedExpression
		public RuleCall getCastedExpressionParserRuleCall_2() { return cCastedExpressionParserRuleCall_2; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_3() { return cPrimaryExpressionParserRuleCall_3; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayCreatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBaseJRExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMethodsExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStaticFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimaryExpression JasperReportsExpression:
		//	ParExpression
		//	| LiteralExpression
		//	| ArrayCreator
		//	//| ObjectCreation
		//	| => BaseJRExpression // Look for a base jrexpression, avoiding a sort of "dangling else problem". 
		//	// MethodsExpression in fact uses BaseJRExpression resulting in potential ambiguity
		//	| MethodsExpression
		//	| StaticField
		@Override public ParserRule getRule() { return rule; }

		//ParExpression | LiteralExpression | ArrayCreator //| ObjectCreation
		//| => BaseJRExpression // Look for a base jrexpression, avoiding a sort of "dangling else problem". 
		//// MethodsExpression in fact uses BaseJRExpression resulting in potential ambiguity
		//| MethodsExpression | StaticField
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParExpression
		public RuleCall getParExpressionParserRuleCall_0() { return cParExpressionParserRuleCall_0; }

		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }

		//ArrayCreator
		public RuleCall getArrayCreatorParserRuleCall_2() { return cArrayCreatorParserRuleCall_2; }

		//=> BaseJRExpression
		public RuleCall getBaseJRExpressionParserRuleCall_3() { return cBaseJRExpressionParserRuleCall_3; }

		//MethodsExpression
		public RuleCall getMethodsExpressionParserRuleCall_4() { return cMethodsExpressionParserRuleCall_4; }

		//StaticField
		public RuleCall getStaticFieldParserRuleCall_5() { return cStaticFieldParserRuleCall_5; }
	}

	public class StaticFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.StaticField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStaticFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPrefixQMNAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrefixQMNValidIDParserRuleCall_1_0_0 = (RuleCall)cPrefixQMNAssignment_1_0.eContents().get(0);
		private final Assignment cDotsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cDotsFullStopKeyword_1_1_0 = (Keyword)cDotsAssignment_1_1.eContents().get(0);
		private final Assignment cFieldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldNameValidIDParserRuleCall_2_0 = (RuleCall)cFieldNameAssignment_2.eContents().get(0);
		
		//StaticField JasperReportsExpression:
		//	{StaticField} (prefixQMN+=ValidID dots+='.')* fieldName=ValidID
		@Override public ParserRule getRule() { return rule; }

		//{StaticField} (prefixQMN+=ValidID dots+='.')* fieldName=ValidID
		public Group getGroup() { return cGroup; }

		//{StaticField}
		public Action getStaticFieldAction_0() { return cStaticFieldAction_0; }

		//(prefixQMN+=ValidID dots+='.')*
		public Group getGroup_1() { return cGroup_1; }

		//prefixQMN+=ValidID
		public Assignment getPrefixQMNAssignment_1_0() { return cPrefixQMNAssignment_1_0; }

		//ValidID
		public RuleCall getPrefixQMNValidIDParserRuleCall_1_0_0() { return cPrefixQMNValidIDParserRuleCall_1_0_0; }

		//dots+='.'
		public Assignment getDotsAssignment_1_1() { return cDotsAssignment_1_1; }

		//'.'
		public Keyword getDotsFullStopKeyword_1_1_0() { return cDotsFullStopKeyword_1_1_0; }

		//fieldName=ValidID
		public Assignment getFieldNameAssignment_2() { return cFieldNameAssignment_2; }

		//ValidID
		public RuleCall getFieldNameValidIDParserRuleCall_2_0() { return cFieldNameValidIDParserRuleCall_2_0; }
	}

	public class BaseJRExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.BaseJRExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJRFieldObjParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJRParameterObjParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJRVariableObjParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJRResourceBundleKeyObjParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BaseJRExpression JasperReportsExpression:
		//	JRFieldObj | JRParameterObj | JRVariableObj | JRResourceBundleKeyObj
		@Override public ParserRule getRule() { return rule; }

		//JRFieldObj | JRParameterObj | JRVariableObj | JRResourceBundleKeyObj
		public Alternatives getAlternatives() { return cAlternatives; }

		//JRFieldObj
		public RuleCall getJRFieldObjParserRuleCall_0() { return cJRFieldObjParserRuleCall_0; }

		//JRParameterObj
		public RuleCall getJRParameterObjParserRuleCall_1() { return cJRParameterObjParserRuleCall_1; }

		//JRVariableObj
		public RuleCall getJRVariableObjParserRuleCall_2() { return cJRVariableObjParserRuleCall_2; }

		//JRResourceBundleKeyObj
		public RuleCall getJRResourceBundleKeyObjParserRuleCall_3() { return cJRResourceBundleKeyObjParserRuleCall_3; }
	}

	public class JRFieldObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JRFieldObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJRFieldObjAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBracedIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cBracedIdentifierAssignment_2.eContents().get(0);
		
		//JRFieldObj JasperReportsExpression:
		//	{JRFieldObj} '$F' bracedIdentifier=BRACED_IDENTIFIER
		@Override public ParserRule getRule() { return rule; }

		//{JRFieldObj} '$F' bracedIdentifier=BRACED_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//{JRFieldObj}
		public Action getJRFieldObjAction_0() { return cJRFieldObjAction_0; }

		//'$F'
		public Keyword getFKeyword_1() { return cFKeyword_1; }

		//bracedIdentifier=BRACED_IDENTIFIER
		public Assignment getBracedIdentifierAssignment_2() { return cBracedIdentifierAssignment_2; }

		//BRACED_IDENTIFIER
		public RuleCall getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0() { return cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0; }
	}

	public class JRParameterObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JRParameterObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJRParameterObjAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBracedIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cBracedIdentifierAssignment_2.eContents().get(0);
		
		//JRParameterObj JasperReportsExpression:
		//	{JRParameterObj} '$P' bracedIdentifier=BRACED_IDENTIFIER
		@Override public ParserRule getRule() { return rule; }

		//{JRParameterObj} '$P' bracedIdentifier=BRACED_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//{JRParameterObj}
		public Action getJRParameterObjAction_0() { return cJRParameterObjAction_0; }

		//'$P'
		public Keyword getPKeyword_1() { return cPKeyword_1; }

		//bracedIdentifier=BRACED_IDENTIFIER
		public Assignment getBracedIdentifierAssignment_2() { return cBracedIdentifierAssignment_2; }

		//BRACED_IDENTIFIER
		public RuleCall getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0() { return cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0; }
	}

	public class JRVariableObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JRVariableObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJRVariableObjAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBracedIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cBracedIdentifierAssignment_2.eContents().get(0);
		
		//JRVariableObj JasperReportsExpression:
		//	{JRVariableObj} '$V' bracedIdentifier=BRACED_IDENTIFIER
		@Override public ParserRule getRule() { return rule; }

		//{JRVariableObj} '$V' bracedIdentifier=BRACED_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//{JRVariableObj}
		public Action getJRVariableObjAction_0() { return cJRVariableObjAction_0; }

		//'$V'
		public Keyword getVKeyword_1() { return cVKeyword_1; }

		//bracedIdentifier=BRACED_IDENTIFIER
		public Assignment getBracedIdentifierAssignment_2() { return cBracedIdentifierAssignment_2; }

		//BRACED_IDENTIFIER
		public RuleCall getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0() { return cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0; }
	}

	public class JRResourceBundleKeyObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JRResourceBundleKeyObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJRResourceBundleKeyObjAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBracedIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cBracedIdentifierAssignment_2.eContents().get(0);
		
		//JRResourceBundleKeyObj JasperReportsExpression:
		//	{JRResourceBundleKeyObj} '$R' bracedIdentifier=BRACED_IDENTIFIER
		@Override public ParserRule getRule() { return rule; }

		//{JRResourceBundleKeyObj} '$R' bracedIdentifier=BRACED_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//{JRResourceBundleKeyObj}
		public Action getJRResourceBundleKeyObjAction_0() { return cJRResourceBundleKeyObjAction_0; }

		//'$R'
		public Keyword getRKeyword_1() { return cRKeyword_1; }

		//bracedIdentifier=BRACED_IDENTIFIER
		public Assignment getBracedIdentifierAssignment_2() { return cBracedIdentifierAssignment_2; }

		//BRACED_IDENTIFIER
		public RuleCall getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0() { return cBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0; }
	}

	public class MethodsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.MethodsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodsExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIncludeObjectInstatiationAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cIncludeObjectInstatiationNewKeyword_1_0_0_0 = (Keyword)cIncludeObjectInstatiationAssignment_1_0_0.eContents().get(0);
		private final Assignment cMethodInvocationsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cMethodInvocationsMethodInvocationParserRuleCall_1_0_1_0 = (RuleCall)cMethodInvocationsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cFullStopKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cMethodInvocationsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cMethodInvocationsMethodInvocationParserRuleCall_1_0_2_1_0 = (RuleCall)cMethodInvocationsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cObjectExpressionAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cObjectExpressionAlternatives_1_1_0_0 = (Alternatives)cObjectExpressionAssignment_1_1_0.eContents().get(0);
		private final RuleCall cObjectExpressionBaseJRExpressionParserRuleCall_1_1_0_0_0 = (RuleCall)cObjectExpressionAlternatives_1_1_0_0.eContents().get(0);
		private final RuleCall cObjectExpressionStringLiteralParserRuleCall_1_1_0_0_1 = (RuleCall)cObjectExpressionAlternatives_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cMethodInvocationsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cMethodInvocationsMethodInvocationParserRuleCall_1_1_1_1_0 = (RuleCall)cMethodInvocationsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArrayIndexesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArrayIndexesIntLiteralParserRuleCall_2_1_0 = (RuleCall)cArrayIndexesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//MethodsExpression JasperReportsExpression:
		//	{MethodsExpression} (includeObjectInstatiation?='new'? methodInvocations+=MethodInvocation ('.'
		//	methodInvocations+=MethodInvocation)* | objectExpression=(BaseJRExpression | StringLiteral) ('.'
		//	methodInvocations+=MethodInvocation)+) ('[' arrayIndexes+=IntLiteral ']')*
		@Override public ParserRule getRule() { return rule; }

		//{MethodsExpression} (includeObjectInstatiation?='new'? methodInvocations+=MethodInvocation ('.'
		//methodInvocations+=MethodInvocation)* | objectExpression=(BaseJRExpression | StringLiteral) ('.'
		//methodInvocations+=MethodInvocation)+) ('[' arrayIndexes+=IntLiteral ']')*
		public Group getGroup() { return cGroup; }

		//{MethodsExpression}
		public Action getMethodsExpressionAction_0() { return cMethodsExpressionAction_0; }

		//(includeObjectInstatiation?='new'? methodInvocations+=MethodInvocation ('.' methodInvocations+=MethodInvocation)* |
		//objectExpression=(BaseJRExpression | StringLiteral) ('.' methodInvocations+=MethodInvocation)+)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//includeObjectInstatiation?='new'? methodInvocations+=MethodInvocation ('.' methodInvocations+=MethodInvocation)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//includeObjectInstatiation?='new'?
		public Assignment getIncludeObjectInstatiationAssignment_1_0_0() { return cIncludeObjectInstatiationAssignment_1_0_0; }

		//'new'
		public Keyword getIncludeObjectInstatiationNewKeyword_1_0_0_0() { return cIncludeObjectInstatiationNewKeyword_1_0_0_0; }

		//methodInvocations+=MethodInvocation
		public Assignment getMethodInvocationsAssignment_1_0_1() { return cMethodInvocationsAssignment_1_0_1; }

		//MethodInvocation
		public RuleCall getMethodInvocationsMethodInvocationParserRuleCall_1_0_1_0() { return cMethodInvocationsMethodInvocationParserRuleCall_1_0_1_0; }

		//('.' methodInvocations+=MethodInvocation)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//'.'
		public Keyword getFullStopKeyword_1_0_2_0() { return cFullStopKeyword_1_0_2_0; }

		//methodInvocations+=MethodInvocation
		public Assignment getMethodInvocationsAssignment_1_0_2_1() { return cMethodInvocationsAssignment_1_0_2_1; }

		//MethodInvocation
		public RuleCall getMethodInvocationsMethodInvocationParserRuleCall_1_0_2_1_0() { return cMethodInvocationsMethodInvocationParserRuleCall_1_0_2_1_0; }

		//objectExpression=(BaseJRExpression | StringLiteral) ('.' methodInvocations+=MethodInvocation)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//objectExpression=(BaseJRExpression | StringLiteral)
		public Assignment getObjectExpressionAssignment_1_1_0() { return cObjectExpressionAssignment_1_1_0; }

		//(BaseJRExpression | StringLiteral)
		public Alternatives getObjectExpressionAlternatives_1_1_0_0() { return cObjectExpressionAlternatives_1_1_0_0; }

		//BaseJRExpression
		public RuleCall getObjectExpressionBaseJRExpressionParserRuleCall_1_1_0_0_0() { return cObjectExpressionBaseJRExpressionParserRuleCall_1_1_0_0_0; }

		//StringLiteral
		public RuleCall getObjectExpressionStringLiteralParserRuleCall_1_1_0_0_1() { return cObjectExpressionStringLiteralParserRuleCall_1_1_0_0_1; }

		//('.' methodInvocations+=MethodInvocation)+
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//'.'
		public Keyword getFullStopKeyword_1_1_1_0() { return cFullStopKeyword_1_1_1_0; }

		//methodInvocations+=MethodInvocation
		public Assignment getMethodInvocationsAssignment_1_1_1_1() { return cMethodInvocationsAssignment_1_1_1_1; }

		//MethodInvocation
		public RuleCall getMethodInvocationsMethodInvocationParserRuleCall_1_1_1_1_0() { return cMethodInvocationsMethodInvocationParserRuleCall_1_1_1_1_0; }

		//('[' arrayIndexes+=IntLiteral ']')*
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//arrayIndexes+=IntLiteral
		public Assignment getArrayIndexesAssignment_2_1() { return cArrayIndexesAssignment_2_1; }

		//IntLiteral
		public RuleCall getArrayIndexesIntLiteralParserRuleCall_2_1_0() { return cArrayIndexesIntLiteralParserRuleCall_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}

	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCharLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBooleanLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNullLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//LiteralExpression JasperReportsExpression:
		//	IntLiteral
		//	| LongLiteral
		//	| FloatLiteral
		//	| DoubleLiteral
		//	| CharLiteral
		//	| StringLiteral
		//	| BooleanLiteral
		//	| NullLiteral
		@Override public ParserRule getRule() { return rule; }

		//IntLiteral | LongLiteral | FloatLiteral | DoubleLiteral | CharLiteral | StringLiteral | BooleanLiteral | NullLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }

		//LongLiteral
		public RuleCall getLongLiteralParserRuleCall_1() { return cLongLiteralParserRuleCall_1; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_2() { return cFloatLiteralParserRuleCall_2; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_3() { return cDoubleLiteralParserRuleCall_3; }

		//CharLiteral
		public RuleCall getCharLiteralParserRuleCall_4() { return cCharLiteralParserRuleCall_4; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_5() { return cStringLiteralParserRuleCall_5; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_6() { return cBooleanLiteralParserRuleCall_6; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_7() { return cNullLiteralParserRuleCall_7; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.IntLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntLiteral JasperReportsExpression:
		//	{IntLiteral} value=INT
		@Override public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INT
		public Group getGroup() { return cGroup; }

		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class LongLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.LongLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLongLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLONGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LongLiteral JasperReportsExpression:
		//	{LongLiteral} value=LONG
		@Override public ParserRule getRule() { return rule; }

		//{LongLiteral} value=LONG
		public Group getGroup() { return cGroup; }

		//{LongLiteral}
		public Action getLongLiteralAction_0() { return cLongLiteralAction_0; }

		//value=LONG
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//LONG
		public RuleCall getValueLONGTerminalRuleCall_1_0() { return cValueLONGTerminalRuleCall_1_0; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.FloatLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FloatLiteral JasperReportsExpression:
		//	{FloatLiteral} value=FLOAT
		@Override public ParserRule getRule() { return rule; }

		//{FloatLiteral} value=FLOAT
		public Group getGroup() { return cGroup; }

		//{FloatLiteral}
		public Action getFloatLiteralAction_0() { return cFloatLiteralAction_0; }

		//value=FLOAT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_0() { return cValueFLOATTerminalRuleCall_1_0; }
	}

	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.DoubleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DoubleLiteral JasperReportsExpression:
		//	{DoubleLiteral} value=DOUBLE
		@Override public ParserRule getRule() { return rule; }

		//{DoubleLiteral} value=DOUBLE
		public Group getGroup() { return cGroup; }

		//{DoubleLiteral}
		public Action getDoubleLiteralAction_0() { return cDoubleLiteralAction_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_0() { return cValueDOUBLETerminalRuleCall_1_0; }
	}

	public class CharLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.CharLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCHARTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//CharLiteral JasperReportsExpression:
		//	{CharLiteral} value=CHAR
		@Override public ParserRule getRule() { return rule; }

		//{CharLiteral} value=CHAR
		public Group getGroup() { return cGroup; }

		//{CharLiteral}
		public Action getCharLiteralAction_0() { return cCharLiteralAction_0; }

		//value=CHAR
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//CHAR
		public RuleCall getValueCHARTerminalRuleCall_1_0() { return cValueCHARTerminalRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral JasperReportsExpression:
		//	{StringLiteral} value=STRING
		@Override public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//BooleanLiteral JasperReportsExpression:
		//	{BooleanLiteral} ('false' | isTrue?='true')
		@Override public ParserRule getRule() { return rule; }

		//{BooleanLiteral} ('false' | isTrue?='true')
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//('false' | isTrue?='true')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'false'
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?='true'
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//'true'
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral JasperReportsExpression:
		//	{NullLiteral} 'null'
		@Override public ParserRule getRule() { return rule; }

		//{NullLiteral} 'null'
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class ParExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ParExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cJasperReportsExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParExpression JasperReportsExpression:
		//	'(' JasperReportsExpression ')'
		@Override public ParserRule getRule() { return rule; }

		//'(' JasperReportsExpression ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//JasperReportsExpression
		public RuleCall getJasperReportsExpressionParserRuleCall_1() { return cJasperReportsExpressionParserRuleCall_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class CastedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.CastedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCastedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCastTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCastTypeTypeParserRuleCall_2_0 = (RuleCall)cCastTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCastedExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCastedExprJasperReportsExpressionParserRuleCall_4_0 = (RuleCall)cCastedExprAssignment_4.eContents().get(0);
		
		//CastedExpression JasperReportsExpression:
		//	{CastedExpression} '(' castType=Type ')' castedExpr=JasperReportsExpression
		@Override public ParserRule getRule() { return rule; }

		//{CastedExpression} '(' castType=Type ')' castedExpr=JasperReportsExpression
		public Group getGroup() { return cGroup; }

		//{CastedExpression}
		public Action getCastedExpressionAction_0() { return cCastedExpressionAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//castType=Type
		public Assignment getCastTypeAssignment_2() { return cCastTypeAssignment_2; }

		//Type
		public RuleCall getCastTypeTypeParserRuleCall_2_0() { return cCastTypeTypeParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//castedExpr=JasperReportsExpression
		public Assignment getCastedExprAssignment_4() { return cCastedExprAssignment_4; }

		//JasperReportsExpression
		public RuleCall getCastedExprJasperReportsExpressionParserRuleCall_4_0() { return cCastedExprJasperReportsExpressionParserRuleCall_4_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPrimitiveTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0 = (RuleCall)cPrimitiveTypeAssignment_1_0.eContents().get(0);
		private final Assignment cJvmTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cJvmTypeJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cJvmTypeAssignment_1_1.eContents().get(0);
		
		//Type:
		//	{Type} (primitiveType?=PrimitiveType | jvmType=JvmTypeReference);
		@Override public ParserRule getRule() { return rule; }

		//{Type} (primitiveType?=PrimitiveType | jvmType=JvmTypeReference)
		public Group getGroup() { return cGroup; }

		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }

		//(primitiveType?=PrimitiveType | jvmType=JvmTypeReference)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//primitiveType?=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_1_0() { return cPrimitiveTypeAssignment_1_0; }

		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0() { return cPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0; }

		//jvmType=JvmTypeReference
		public Assignment getJvmTypeAssignment_1_1() { return cJvmTypeAssignment_1_1; }

		//JvmTypeReference
		public RuleCall getJvmTypeJvmTypeReferenceParserRuleCall_1_1_0() { return cJvmTypeJvmTypeReferenceParserRuleCall_1_1_0; }
	}

	public class ArrayCreatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ArrayCreator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayCreatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSizeIntLiteralParserRuleCall_3_0_1_0 = (RuleCall)cSizeAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cInitializationAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitializationArrayInitializerParserRuleCall_3_1_1_0 = (RuleCall)cInitializationAssignment_3_1_1.eContents().get(0);
		
		//ArrayCreator JasperReportsExpression:
		//	{ArrayCreator} 'new' type=Type (('[' size+=IntLiteral ']')+ | ('[' ']')+ initialization=ArrayInitializer)
		@Override public ParserRule getRule() { return rule; }

		//{ArrayCreator} 'new' type=Type (('[' size+=IntLiteral ']')+ | ('[' ']')+ initialization=ArrayInitializer)
		public Group getGroup() { return cGroup; }

		//{ArrayCreator}
		public Action getArrayCreatorAction_0() { return cArrayCreatorAction_0; }

		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//(('[' size+=IntLiteral ']')+ | ('[' ']')+ initialization=ArrayInitializer)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//('[' size+=IntLiteral ']')+
		public Group getGroup_3_0() { return cGroup_3_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_0_0() { return cLeftSquareBracketKeyword_3_0_0; }

		//size+=IntLiteral
		public Assignment getSizeAssignment_3_0_1() { return cSizeAssignment_3_0_1; }

		//IntLiteral
		public RuleCall getSizeIntLiteralParserRuleCall_3_0_1_0() { return cSizeIntLiteralParserRuleCall_3_0_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_0_2() { return cRightSquareBracketKeyword_3_0_2; }

		//('[' ']')+ initialization=ArrayInitializer
		public Group getGroup_3_1() { return cGroup_3_1; }

		//('[' ']')+
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_1_0_0() { return cLeftSquareBracketKeyword_3_1_0_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_1_0_1() { return cRightSquareBracketKeyword_3_1_0_1; }

		//initialization=ArrayInitializer
		public Assignment getInitializationAssignment_3_1_1() { return cInitializationAssignment_3_1_1; }

		//ArrayInitializer
		public RuleCall getInitializationArrayInitializerParserRuleCall_3_1_1_0() { return cInitializationArrayInitializerParserRuleCall_3_1_1_0; }
	}

	public class ArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitializationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitializationExpressionListParserRuleCall_2_0 = (RuleCall)cInitializationAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayInitializer:
		//	{ArrayInitializer} '{' initialization=ExpressionList? '}';
		@Override public ParserRule getRule() { return rule; }

		//{ArrayInitializer} '{' initialization=ExpressionList? '}'
		public Group getGroup() { return cGroup; }

		//{ArrayInitializer}
		public Action getArrayInitializerAction_0() { return cArrayInitializerAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//initialization=ExpressionList?
		public Assignment getInitializationAssignment_2() { return cInitializationAssignment_2; }

		//ExpressionList
		public RuleCall getInitializationExpressionListParserRuleCall_2_0() { return cInitializationExpressionListParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.MethodInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodInvocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFullyQualifiedMethodNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFullyQualifiedMethodNameFullMethodNameParserRuleCall_1_0 = (RuleCall)cFullyQualifiedMethodNameAssignment_1.eContents().get(0);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		
		////ObjectCreation returns JasperReportsExpression:
		////	{ObjectCreation} 'new' constructorInvocation=MethodInvocation
		////;
		//MethodInvocation:
		//	{MethodInvocation} fullyQualifiedMethodName=FullMethodName args=Arguments;
		@Override public ParserRule getRule() { return rule; }

		//{MethodInvocation} fullyQualifiedMethodName=FullMethodName args=Arguments
		public Group getGroup() { return cGroup; }

		//{MethodInvocation}
		public Action getMethodInvocationAction_0() { return cMethodInvocationAction_0; }

		//fullyQualifiedMethodName=FullMethodName
		public Assignment getFullyQualifiedMethodNameAssignment_1() { return cFullyQualifiedMethodNameAssignment_1; }

		//FullMethodName
		public RuleCall getFullyQualifiedMethodNameFullMethodNameParserRuleCall_1_0() { return cFullyQualifiedMethodNameFullMethodNameParserRuleCall_1_0; }

		//args=Arguments
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Arguments
		public RuleCall getArgsArgumentsParserRuleCall_2_0() { return cArgsArgumentsParserRuleCall_2_0; }
	}

	public class FullMethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.FullMethodName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPrefixQMNAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrefixQMNValidIDParserRuleCall_0_0_0 = (RuleCall)cPrefixQMNAssignment_0_0.eContents().get(0);
		private final Assignment cDotsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cDotsFullStopKeyword_0_1_0 = (Keyword)cDotsAssignment_0_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodNameValidIDParserRuleCall_1_0 = (RuleCall)cMethodNameAssignment_1.eContents().get(0);
		
		//FullMethodName:
		//	(prefixQMN+=ValidID dots+='.')* methodName=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//(prefixQMN+=ValidID dots+='.')* methodName=ValidID
		public Group getGroup() { return cGroup; }

		//(prefixQMN+=ValidID dots+='.')*
		public Group getGroup_0() { return cGroup_0; }

		//prefixQMN+=ValidID
		public Assignment getPrefixQMNAssignment_0_0() { return cPrefixQMNAssignment_0_0; }

		//ValidID
		public RuleCall getPrefixQMNValidIDParserRuleCall_0_0_0() { return cPrefixQMNValidIDParserRuleCall_0_0_0; }

		//dots+='.'
		public Assignment getDotsAssignment_0_1() { return cDotsAssignment_0_1; }

		//'.'
		public Keyword getDotsFullStopKeyword_0_1_0() { return cDotsFullStopKeyword_0_1_0; }

		//methodName=ValidID
		public Assignment getMethodNameAssignment_1() { return cMethodNameAssignment_1; }

		//ValidID
		public RuleCall getMethodNameValidIDParserRuleCall_1_0() { return cMethodNameValidIDParserRuleCall_1_0; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprLstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLstExpressionListParserRuleCall_2_0 = (RuleCall)cExprLstAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//	{Arguments} '(' exprLst=ExpressionList? ')';
		@Override public ParserRule getRule() { return rule; }

		//{Arguments} '(' exprLst=ExpressionList? ')'
		public Group getGroup() { return cGroup; }

		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//exprLst=ExpressionList?
		public Assignment getExprLstAssignment_2() { return cExprLstAssignment_2; }

		//ExpressionList
		public RuleCall getExprLstExpressionListParserRuleCall_2_0() { return cExprLstExpressionListParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsJasperReportsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommasAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommasCommaKeyword_1_0_0 = (Keyword)cCommasAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsJasperReportsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	expressions+=JasperReportsExpression (commas+=',' expressions+=JasperReportsExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//expressions+=JasperReportsExpression (commas+=',' expressions+=JasperReportsExpression)*
		public Group getGroup() { return cGroup; }

		//expressions+=JasperReportsExpression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//JasperReportsExpression
		public RuleCall getExpressionsJasperReportsExpressionParserRuleCall_0_0() { return cExpressionsJasperReportsExpressionParserRuleCall_0_0; }

		//(commas+=',' expressions+=JasperReportsExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//commas+=','
		public Assignment getCommasAssignment_1_0() { return cCommasAssignment_1_0; }

		//','
		public Keyword getCommasCommaKeyword_1_0_0() { return cCommasCommaKeyword_1_0_0; }

		//expressions+=JasperReportsExpression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//JasperReportsExpression
		public RuleCall getExpressionsJasperReportsExpressionParserRuleCall_1_1_0() { return cExpressionsJasperReportsExpressionParserRuleCall_1_1_0; }
	}

	public class JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JvmTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJvmParameterizedTypeReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		
		/// * Grammar part copied from the org.eclipse.xtext.xbase.Xtype (XBase) * / JvmTypeReference types::JvmTypeReference:
		//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} '[' ']')*
		@Override public ParserRule getRule() { return rule; }

		//JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} '[' ']')*
		public Group getGroup() { return cGroup; }

		//JvmParameterizedTypeReference
		public RuleCall getJvmParameterizedTypeReferenceParserRuleCall_0() { return cJvmParameterizedTypeReferenceParserRuleCall_0; }

		//=> ({JvmGenericArrayTypeReference.componentType=current} '[' ']')*
		public Group getGroup_1() { return cGroup_1; }

		//({JvmGenericArrayTypeReference.componentType=current} '[' ']')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{JvmGenericArrayTypeReference.componentType=current}
		public Action getJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0() { return cJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_1() { return cLeftSquareBracketKeyword_1_0_1; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }
	}

	public class JvmParameterizedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JvmParameterizedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeJvmTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//JvmParameterizedTypeReference:
		//	type=[types::JvmType|QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
		//	arguments+=JvmArgumentTypeReference)* '>')?;
		@Override public ParserRule getRule() { return rule; }

		//type=[types::JvmType|QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
		//arguments+=JvmArgumentTypeReference)* '>')?
		public Group getGroup() { return cGroup; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0() { return cTypeJvmTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }

		//(=> '<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?
		public Group getGroup_1() { return cGroup_1; }

		//=> '<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }

		//(',' arguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=JvmArgumentTypeReference
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class JvmArgumentTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JvmArgumentTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJvmTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJvmWildcardTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JvmArgumentTypeReference types::JvmTypeReference:
		//	JvmTypeReference | JvmWildcardTypeReference
		@Override public ParserRule getRule() { return rule; }

		//JvmTypeReference | JvmWildcardTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//JvmTypeReference
		public RuleCall getJvmTypeReferenceParserRuleCall_0() { return cJvmTypeReferenceParserRuleCall_0; }

		//JvmWildcardTypeReference
		public RuleCall getJvmWildcardTypeReferenceParserRuleCall_1() { return cJvmWildcardTypeReferenceParserRuleCall_1; }
	}

	public class JvmWildcardTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JvmWildcardTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmWildcardTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConstraintsJvmUpperBoundParserRuleCall_2_0_0 = (RuleCall)cConstraintsAssignment_2_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstraintsJvmLowerBoundParserRuleCall_2_1_0 = (RuleCall)cConstraintsAssignment_2_1.eContents().get(0);
		
		//JvmWildcardTypeReference:
		//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
		@Override public ParserRule getRule() { return rule; }

		//{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?
		public Group getGroup() { return cGroup; }

		//{JvmWildcardTypeReference}
		public Action getJvmWildcardTypeReferenceAction_0() { return cJvmWildcardTypeReferenceAction_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//(constraints+=JvmUpperBound | constraints+=JvmLowerBound)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//constraints+=JvmUpperBound
		public Assignment getConstraintsAssignment_2_0() { return cConstraintsAssignment_2_0; }

		//JvmUpperBound
		public RuleCall getConstraintsJvmUpperBoundParserRuleCall_2_0_0() { return cConstraintsJvmUpperBoundParserRuleCall_2_0_0; }

		//constraints+=JvmLowerBound
		public Assignment getConstraintsAssignment_2_1() { return cConstraintsAssignment_2_1; }

		//JvmLowerBound
		public RuleCall getConstraintsJvmLowerBoundParserRuleCall_2_1_0() { return cConstraintsJvmLowerBoundParserRuleCall_2_1_0; }
	}

	public class JvmUpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JvmUpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmUpperBound:
		//	'extends' typeReference=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//'extends' typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//'extends'
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class JvmLowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.JvmLowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReferenceJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeReferenceAssignment_1.eContents().get(0);
		
		//JvmLowerBound:
		//	'super' typeReference=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//'super' typeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//'super'
		public Keyword getSuperKeyword_0() { return cSuperKeyword_0; }

		//typeReference=JvmTypeReference
		public Assignment getTypeReferenceAssignment_1() { return cTypeReferenceAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeReferenceJvmTypeReferenceParserRuleCall_1_0() { return cTypeReferenceJvmTypeReferenceParserRuleCall_1_0; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cByteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLongKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFloatKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//// Others data types rules and terminals
		//PrimitiveType:
		//	'boolean'
		//	| 'char'
		//	| 'byte'
		//	| 'short'
		//	| 'int'
		//	| 'long'
		//	| 'float'
		//	| 'double';
		@Override public ParserRule getRule() { return rule; }

		//'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//'char'
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }

		//'byte'
		public Keyword getByteKeyword_2() { return cByteKeyword_2; }

		//'short'
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }

		//'int'
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//'long'
		public Keyword getLongKeyword_5() { return cLongKeyword_5; }

		//'float'
		public Keyword getFloatKeyword_6() { return cFloatKeyword_6; }

		//'double'
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOp:
		//	"<="
		//	| "<"
		//	| ">="
		//	| ">";
		@Override public ParserRule getRule() { return rule; }

		//"<=" | "<" | ">=" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ('.' ValidID)*;
		@Override public ParserRule getRule() { return rule; }

		//ValidID ('.' ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//('.' ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final JRExpressionModelElements pJRExpressionModel;
	private final JasperReportsExpressionElements pJasperReportsExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalOrExpressionElements pConditionalOrExpression;
	private final ConditionalAndExpressionElements pConditionalAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final InstanceofExpressionElements pInstanceofExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final StaticFieldElements pStaticField;
	private final BaseJRExpressionElements pBaseJRExpression;
	private final JRFieldObjElements pJRFieldObj;
	private final JRParameterObjElements pJRParameterObj;
	private final JRVariableObjElements pJRVariableObj;
	private final JRResourceBundleKeyObjElements pJRResourceBundleKeyObj;
	private final MethodsExpressionElements pMethodsExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final IntLiteralElements pIntLiteral;
	private final LongLiteralElements pLongLiteral;
	private final FloatLiteralElements pFloatLiteral;
	private final DoubleLiteralElements pDoubleLiteral;
	private final CharLiteralElements pCharLiteral;
	private final StringLiteralElements pStringLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final NullLiteralElements pNullLiteral;
	private final ParExpressionElements pParExpression;
	private final CastedExpressionElements pCastedExpression;
	private final TypeElements pType;
	private final ArrayCreatorElements pArrayCreator;
	private final ArrayInitializerElements pArrayInitializer;
	private final MethodInvocationElements pMethodInvocation;
	private final FullMethodNameElements pFullMethodName;
	private final ArgumentsElements pArguments;
	private final ExpressionListElements pExpressionList;
	private final JvmTypeReferenceElements pJvmTypeReference;
	private final JvmParameterizedTypeReferenceElements pJvmParameterizedTypeReference;
	private final JvmArgumentTypeReferenceElements pJvmArgumentTypeReference;
	private final JvmWildcardTypeReferenceElements pJvmWildcardTypeReference;
	private final JvmUpperBoundElements pJvmUpperBound;
	private final JvmLowerBoundElements pJvmLowerBound;
	private final TerminalRule tLONG;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tCHAR;
	private final TerminalRule tSTRING;
	private final TerminalRule tEscapeSequence;
	private final TerminalRule tIntegerNumber;
	private final TerminalRule tHexPrefix;
	private final TerminalRule tHexDigit;
	private final TerminalRule tLongSuffix;
	private final TerminalRule tNonIntegerNumber;
	private final TerminalRule tExponent;
	private final TerminalRule tFloatSuffix;
	private final TerminalRule tDoubleSuffix;
	private final PrimitiveTypeElements pPrimitiveType;
	private final RelationalOpElements pRelationalOp;
	private final QualifiedNameElements pQualifiedName;
	private final ValidIDElements pValidID;
	private final TerminalRule tBRACED_IDENTIFIER;
	private final TerminalRule tExpObjIdentifier;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JavaJRExpressionGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJRExpressionModel = new JRExpressionModelElements();
		this.pJasperReportsExpression = new JasperReportsExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalOrExpression = new ConditionalOrExpressionElements();
		this.pConditionalAndExpression = new ConditionalAndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pInstanceofExpression = new InstanceofExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pStaticField = new StaticFieldElements();
		this.pBaseJRExpression = new BaseJRExpressionElements();
		this.pJRFieldObj = new JRFieldObjElements();
		this.pJRParameterObj = new JRParameterObjElements();
		this.pJRVariableObj = new JRVariableObjElements();
		this.pJRResourceBundleKeyObj = new JRResourceBundleKeyObjElements();
		this.pMethodsExpression = new MethodsExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pLongLiteral = new LongLiteralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pDoubleLiteral = new DoubleLiteralElements();
		this.pCharLiteral = new CharLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pNullLiteral = new NullLiteralElements();
		this.pParExpression = new ParExpressionElements();
		this.pCastedExpression = new CastedExpressionElements();
		this.pType = new TypeElements();
		this.pArrayCreator = new ArrayCreatorElements();
		this.pArrayInitializer = new ArrayInitializerElements();
		this.pMethodInvocation = new MethodInvocationElements();
		this.pFullMethodName = new FullMethodNameElements();
		this.pArguments = new ArgumentsElements();
		this.pExpressionList = new ExpressionListElements();
		this.pJvmTypeReference = new JvmTypeReferenceElements();
		this.pJvmParameterizedTypeReference = new JvmParameterizedTypeReferenceElements();
		this.pJvmArgumentTypeReference = new JvmArgumentTypeReferenceElements();
		this.pJvmWildcardTypeReference = new JvmWildcardTypeReferenceElements();
		this.pJvmUpperBound = new JvmUpperBoundElements();
		this.pJvmLowerBound = new JvmLowerBoundElements();
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.LONG");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.FLOAT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.DOUBLE");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.CHAR");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.STRING");
		this.tEscapeSequence = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.EscapeSequence");
		this.tIntegerNumber = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.IntegerNumber");
		this.tHexPrefix = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.HexPrefix");
		this.tHexDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.HexDigit");
		this.tLongSuffix = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.LongSuffix");
		this.tNonIntegerNumber = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.NonIntegerNumber");
		this.tExponent = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.Exponent");
		this.tFloatSuffix = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.FloatSuffix");
		this.tDoubleSuffix = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.DoubleSuffix");
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pValidID = new ValidIDElements();
		this.tBRACED_IDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.BRACED_IDENTIFIER");
		this.tExpObjIdentifier = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression.ExpObjIdentifier");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.jaspersoft.studio.editor.jrexpressions.JavaJRExpression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JRExpressionModel:
	//	expression=JasperReportsExpression?;
	public JRExpressionModelElements getJRExpressionModelAccess() {
		return pJRExpressionModel;
	}
	
	public ParserRule getJRExpressionModelRule() {
		return getJRExpressionModelAccess().getRule();
	}

	//JasperReportsExpression:
	//	ConditionalExpression;
	public JasperReportsExpressionElements getJasperReportsExpressionAccess() {
		return pJasperReportsExpression;
	}
	
	public ParserRule getJasperReportsExpressionRule() {
		return getJasperReportsExpressionAccess().getRule();
	}

	//ConditionalExpression JasperReportsExpression:
	//	ConditionalOrExpression (=> ({TestExpression.condition=current} '?') trueStatement=JasperReportsExpression ':'
	//	falseStatement=JasperReportsExpression)?
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//ConditionalOrExpression JasperReportsExpression:
	//	ConditionalAndExpression (=> ({BinaryExpression.left=current} op='||') right=ConditionalAndExpression)*
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return pConditionalOrExpression;
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}

	//ConditionalAndExpression JasperReportsExpression:
	//	EqualityExpression (=> ({BinaryExpression.left=current} op='&&') right=EqualityExpression)*
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return pConditionalAndExpression;
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}

	//EqualityExpression JasperReportsExpression:
	//	InstanceofExpression (=> ({BinaryExpression.left=current} op=('==' | '!=')) right=InstanceofExpression)*
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//InstanceofExpression JasperReportsExpression:
	//	RelationalExpression (=> ({BinaryExpression.left=current} op='instanceof') right=Type)?
	public InstanceofExpressionElements getInstanceofExpressionAccess() {
		return pInstanceofExpression;
	}
	
	public ParserRule getInstanceofExpressionRule() {
		return getInstanceofExpressionAccess().getRule();
	}

	//RelationalExpression JasperReportsExpression:
	//	AdditiveExpression (=> ({BinaryExpression.left=current} op=RelationalOp) right=AdditiveExpression)*
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression JasperReportsExpression:
	//	MultiplicativeExpression (=> ({BinaryExpression.left=current} op=('+' | '-')) right=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression JasperReportsExpression:
	//	UnaryExpression (=> ({BinaryExpression.left=current} op=('*' | '/' | '%')) right=UnaryExpression)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression JasperReportsExpression // JasperReports does not compile with '--' and '++', so do not consider it
	//:
	//	'+' UnaryExpression
	//	| '-' UnaryExpression
	//	| UnaryExpressionNotPlusMinus
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryExpressionNotPlusMinus JasperReportsExpression:
	//	'~' UnaryExpression
	//	| '!' UnaryExpression
	//	| => CastedExpression | PrimaryExpression
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return pUnaryExpressionNotPlusMinus;
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}

	//PrimaryExpression JasperReportsExpression:
	//	ParExpression
	//	| LiteralExpression
	//	| ArrayCreator
	//	//| ObjectCreation
	//	| => BaseJRExpression // Look for a base jrexpression, avoiding a sort of "dangling else problem". 
	//	// MethodsExpression in fact uses BaseJRExpression resulting in potential ambiguity
	//	| MethodsExpression
	//	| StaticField
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//StaticField JasperReportsExpression:
	//	{StaticField} (prefixQMN+=ValidID dots+='.')* fieldName=ValidID
	public StaticFieldElements getStaticFieldAccess() {
		return pStaticField;
	}
	
	public ParserRule getStaticFieldRule() {
		return getStaticFieldAccess().getRule();
	}

	//BaseJRExpression JasperReportsExpression:
	//	JRFieldObj | JRParameterObj | JRVariableObj | JRResourceBundleKeyObj
	public BaseJRExpressionElements getBaseJRExpressionAccess() {
		return pBaseJRExpression;
	}
	
	public ParserRule getBaseJRExpressionRule() {
		return getBaseJRExpressionAccess().getRule();
	}

	//JRFieldObj JasperReportsExpression:
	//	{JRFieldObj} '$F' bracedIdentifier=BRACED_IDENTIFIER
	public JRFieldObjElements getJRFieldObjAccess() {
		return pJRFieldObj;
	}
	
	public ParserRule getJRFieldObjRule() {
		return getJRFieldObjAccess().getRule();
	}

	//JRParameterObj JasperReportsExpression:
	//	{JRParameterObj} '$P' bracedIdentifier=BRACED_IDENTIFIER
	public JRParameterObjElements getJRParameterObjAccess() {
		return pJRParameterObj;
	}
	
	public ParserRule getJRParameterObjRule() {
		return getJRParameterObjAccess().getRule();
	}

	//JRVariableObj JasperReportsExpression:
	//	{JRVariableObj} '$V' bracedIdentifier=BRACED_IDENTIFIER
	public JRVariableObjElements getJRVariableObjAccess() {
		return pJRVariableObj;
	}
	
	public ParserRule getJRVariableObjRule() {
		return getJRVariableObjAccess().getRule();
	}

	//JRResourceBundleKeyObj JasperReportsExpression:
	//	{JRResourceBundleKeyObj} '$R' bracedIdentifier=BRACED_IDENTIFIER
	public JRResourceBundleKeyObjElements getJRResourceBundleKeyObjAccess() {
		return pJRResourceBundleKeyObj;
	}
	
	public ParserRule getJRResourceBundleKeyObjRule() {
		return getJRResourceBundleKeyObjAccess().getRule();
	}

	//MethodsExpression JasperReportsExpression:
	//	{MethodsExpression} (includeObjectInstatiation?='new'? methodInvocations+=MethodInvocation ('.'
	//	methodInvocations+=MethodInvocation)* | objectExpression=(BaseJRExpression | StringLiteral) ('.'
	//	methodInvocations+=MethodInvocation)+) ('[' arrayIndexes+=IntLiteral ']')*
	public MethodsExpressionElements getMethodsExpressionAccess() {
		return pMethodsExpression;
	}
	
	public ParserRule getMethodsExpressionRule() {
		return getMethodsExpressionAccess().getRule();
	}

	//LiteralExpression JasperReportsExpression:
	//	IntLiteral
	//	| LongLiteral
	//	| FloatLiteral
	//	| DoubleLiteral
	//	| CharLiteral
	//	| StringLiteral
	//	| BooleanLiteral
	//	| NullLiteral
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//IntLiteral JasperReportsExpression:
	//	{IntLiteral} value=INT
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//LongLiteral JasperReportsExpression:
	//	{LongLiteral} value=LONG
	public LongLiteralElements getLongLiteralAccess() {
		return pLongLiteral;
	}
	
	public ParserRule getLongLiteralRule() {
		return getLongLiteralAccess().getRule();
	}

	//FloatLiteral JasperReportsExpression:
	//	{FloatLiteral} value=FLOAT
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//DoubleLiteral JasperReportsExpression:
	//	{DoubleLiteral} value=DOUBLE
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return pDoubleLiteral;
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}

	//CharLiteral JasperReportsExpression:
	//	{CharLiteral} value=CHAR
	public CharLiteralElements getCharLiteralAccess() {
		return pCharLiteral;
	}
	
	public ParserRule getCharLiteralRule() {
		return getCharLiteralAccess().getRule();
	}

	//StringLiteral JasperReportsExpression:
	//	{StringLiteral} value=STRING
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral JasperReportsExpression:
	//	{BooleanLiteral} ('false' | isTrue?='true')
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral JasperReportsExpression:
	//	{NullLiteral} 'null'
	public NullLiteralElements getNullLiteralAccess() {
		return pNullLiteral;
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//ParExpression JasperReportsExpression:
	//	'(' JasperReportsExpression ')'
	public ParExpressionElements getParExpressionAccess() {
		return pParExpression;
	}
	
	public ParserRule getParExpressionRule() {
		return getParExpressionAccess().getRule();
	}

	//CastedExpression JasperReportsExpression:
	//	{CastedExpression} '(' castType=Type ')' castedExpr=JasperReportsExpression
	public CastedExpressionElements getCastedExpressionAccess() {
		return pCastedExpression;
	}
	
	public ParserRule getCastedExpressionRule() {
		return getCastedExpressionAccess().getRule();
	}

	//Type:
	//	{Type} (primitiveType?=PrimitiveType | jvmType=JvmTypeReference);
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ArrayCreator JasperReportsExpression:
	//	{ArrayCreator} 'new' type=Type (('[' size+=IntLiteral ']')+ | ('[' ']')+ initialization=ArrayInitializer)
	public ArrayCreatorElements getArrayCreatorAccess() {
		return pArrayCreator;
	}
	
	public ParserRule getArrayCreatorRule() {
		return getArrayCreatorAccess().getRule();
	}

	//ArrayInitializer:
	//	{ArrayInitializer} '{' initialization=ExpressionList? '}';
	public ArrayInitializerElements getArrayInitializerAccess() {
		return pArrayInitializer;
	}
	
	public ParserRule getArrayInitializerRule() {
		return getArrayInitializerAccess().getRule();
	}

	////ObjectCreation returns JasperReportsExpression:
	////	{ObjectCreation} 'new' constructorInvocation=MethodInvocation
	////;
	//MethodInvocation:
	//	{MethodInvocation} fullyQualifiedMethodName=FullMethodName args=Arguments;
	public MethodInvocationElements getMethodInvocationAccess() {
		return pMethodInvocation;
	}
	
	public ParserRule getMethodInvocationRule() {
		return getMethodInvocationAccess().getRule();
	}

	//FullMethodName:
	//	(prefixQMN+=ValidID dots+='.')* methodName=ValidID;
	public FullMethodNameElements getFullMethodNameAccess() {
		return pFullMethodName;
	}
	
	public ParserRule getFullMethodNameRule() {
		return getFullMethodNameAccess().getRule();
	}

	//Arguments:
	//	{Arguments} '(' exprLst=ExpressionList? ')';
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=JasperReportsExpression (commas+=',' expressions+=JasperReportsExpression)*;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	/// * Grammar part copied from the org.eclipse.xtext.xbase.Xtype (XBase) * / JvmTypeReference types::JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} '[' ']')*
	public JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return pJvmTypeReference;
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[types::JvmType|QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>')?;
	public JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return pJvmParameterizedTypeReference;
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference types::JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return pJvmArgumentTypeReference;
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return pJvmWildcardTypeReference;
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public JvmUpperBoundElements getJvmUpperBoundAccess() {
		return pJvmUpperBound;
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public JvmLowerBoundElements getJvmLowerBoundAccess() {
		return pJvmLowerBound;
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//terminal LONG returns ecore::ELong:
	//	IntegerNumber LongSuffix?;
	public TerminalRule getLONGRule() {
		return tLONG;
	} 

	//terminal INT returns ecore::EInt:
	//	IntegerNumber;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal FLOAT returns ecore::EFloat:
	//	NonIntegerNumber FloatSuffix;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	NonIntegerNumber DoubleSuffix?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal CHAR returns ecore::EChar:
	//	'\'' (EscapeSequence
	//	| !('\'' | '\\' | '\r' | '\n'))
	//	'\'';
	public TerminalRule getCHARRule() {
		return tCHAR;
	} 

	//terminal STRING:
	//	'"' (EscapeSequence
	//	| !('\\' | '"' | '\r' | '\n'))*
	//	'"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal fragment EscapeSequence:
	//	'\\' ('b'
	//	| 't'
	//	| 'n'
	//	| 'f'
	//	| 'r'
	//	| '\"'
	//	| '\''
	//	| '\\'
	//	| '0'..'3' '0'..'7' '0'..'7' | '0'..'7' '0'..'7' | '0'..'7' | 'u' HexDigit HexDigit HexDigit HexDigit);
	public TerminalRule getEscapeSequenceRule() {
		return tEscapeSequence;
	} 

	//terminal fragment IntegerNumber:
	//	'0'
	//	| '1'..'9' '0'..'9'*
	//	| '0' '0'..'7'+
	//	| HexPrefix HexDigit+;
	public TerminalRule getIntegerNumberRule() {
		return tIntegerNumber;
	} 

	//terminal fragment HexPrefix:
	//	'0x' | '0X';
	public TerminalRule getHexPrefixRule() {
		return tHexPrefix;
	} 

	//terminal fragment HexDigit:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHexDigitRule() {
		return tHexDigit;
	} 

	//terminal fragment LongSuffix:
	//	'l' | 'L';
	public TerminalRule getLongSuffixRule() {
		return tLongSuffix;
	} 

	//terminal fragment NonIntegerNumber:
	//	'0'..'9'+ '.' '0'..'9'* Exponent?
	//	| '.' '0'..'9'+ Exponent?
	//	| '0'..'9'+ Exponent
	//	| '0'..'9'+
	//	| HexPrefix HexDigit* ('.' HexDigit*) ('p' | 'P') ('+' | '-')?
	//	'0'..'9'+;
	public TerminalRule getNonIntegerNumberRule() {
		return tNonIntegerNumber;
	} 

	//terminal fragment Exponent:
	//	('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getExponentRule() {
		return tExponent;
	} 

	//terminal fragment FloatSuffix:
	//	'f' | 'F';
	public TerminalRule getFloatSuffixRule() {
		return tFloatSuffix;
	} 

	//terminal fragment DoubleSuffix:
	//	'd' | 'D';
	public TerminalRule getDoubleSuffixRule() {
		return tDoubleSuffix;
	} 

	//// Others data types rules and terminals
	//PrimitiveType:
	//	'boolean'
	//	| 'char'
	//	| 'byte'
	//	| 'short'
	//	| 'int'
	//	| 'long'
	//	| 'float'
	//	| 'double';
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//RelationalOp:
	//	"<="
	//	| "<"
	//	| ">="
	//	| ">";
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ('.' ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal BRACED_IDENTIFIER:
	//	'{' ExpObjIdentifier '}';
	public TerminalRule getBRACED_IDENTIFIERRule() {
		return tBRACED_IDENTIFIER;
	} 

	//terminal fragment ExpObjIdentifier:
	//	!('\r' | '\n' | '}')+;
	public TerminalRule getExpObjIdentifierRule() {
		return tExpObjIdentifier;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
