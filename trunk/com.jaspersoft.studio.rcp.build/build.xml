<project default="main">
	<property file="build.properties" />
	<property name="baseLocation" value="${eclipse.home}" />
	<!-- by default, check for deltapack co-located with eclipse -->
	<property name="deltapack" value="${eclipse.home}/deltapack/eclipse" />
	<property name="buildDirectory" value="${basedir}/buildDirectory" />
	<property name="builder" value="${basedir}" />
	<property name="pluginPath" value="${basedir}/..${path.separator}${deltapack}" />
	<property name="buildTempFolder" value="${buildDirectory}" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: buildAndPackageConsole
         - - - - - - - - - - - - - - - - - -->
    <target name="buildAndPackageConsole" description="Invoke the main building task and then all packaging-tasks. Should be used when launching outside IDE">
    	<echo message="Executing 'buildAndPackageConsole' task"/>
    	
    	<antcall target="main"/>
    	<antcall target="linux-x86-installer"/>
    	<antcall target="linux-x86_64-installer"/>
    	<antcall target="mac-x86_64-installer"/>
    	<antcall target="windows-x86-installer"/>
    	<antcall target="windows-x86_64-installer"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: buildAndPackageIDE
         - - - - - - - - - - - - - - - - - -->
    <target name="buildAndPackageIDE" description="Invoke the main building task and then all packaging-tasks. Should be used when launching inside IDE">
    	<echo message="Executing 'buildAndPackageIDE' task"/>
    	
    	<property name="idelaunch" value="true" />
    	<antcall target="main"/>
    	<antcall target="linux-x86-installer"/>
    	<antcall target="linux-x86_64-installer"/>
    	<antcall target="mac-x86_64-installer"/>
    	<antcall target="windows-x86-installer"/>
    	<antcall target="windows-x86_64-installer"/>
		<antcall target="refreshWorkspace"/>
    </target>	
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: main
         - - - - - - - - - - - - - - - - - -->
	<target name="main" description="Product creation (packaging as zip files)">
		<echo message="Executing 'main' task"/>
		<echo message="Delta pack location: ${deltapack}" />
		<!-- Check that we have a deltapack -->
		<available property="haveDeltaPack" file="${deltapack}" />
		<fail unless="haveDeltaPack" message="The deltapack is required to build this product.  Please edit buildProduct.xml or set the &quot;deltapack&quot; property." />

		<!-- Clenup the build environment first -->
		<delete dir="${buildDirectory}" />

		<ant antfile="${eclipse.pdebuild.scripts}/productBuild/productBuild.xml" />

		<move todir="${basedir}">
			<fileset dir="${buildDirectory}/${buildLabel}" includes="*.zip" />
		</move>
	</target>	
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: refreshWorkspace
         - - - - - - - - - - - - - - - - - -->
    <target name="refreshWorkspace" if="${idelaunch}" description="Need to refresh the workspace only when run from IDE">
    	<echo message="Executing 'refreshWorkspace' task"/>
		<eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath" />
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />            
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: windows-x86-installer
         - - - - - - - - - - - - - - - - - -->
	<target name="windows-x86-installer" description="Create the win32 x86 installer using NSIS script (NSIS required)">
		<echo message="Executing 'windows-x86-installer' task"/>
		<property name="dist" value="${basedir}/dist" />
		<property name="zipfile.win32.x86" value="${buildId}-win32.win32.x86" />
		<property name="zipdir.win32.x86" value="${dist}/${zipfile.win32.x86}" />

		<echo message="${basedir}/${buildId}-win32.win32.x86.zip" />
		<!-- cleanup the previous directory (if any) -->
		<mkdir dir="${dist}" />

		<delete dir="${zipdir.win32.x86}" />

		<!-- Decompressing the archive created by the Eclipse build -->
		<unzip src="${basedir}/${zipfile.win32.x86}.zip" dest="${zipdir.win32.x86}" />
		<!-- Replacing the exe launcher (it is a modified version of the original laucher (Eclipse 3.6.2)
		     improved with Jaspersoft Studio icons -->
		<copy file="${basedir}/resources/Jaspersoft Studio.exe" tofile="${zipdir.win32.x86}/jaspersoftstudio/Jaspersoft Studio.exe" overwrite="true" />

		<!-- copy notice.txt and LICENSE.txt in the eclipse folder -->
		<copy file="${basedir}/resources/notice.txt" todir="${zipdir.win32.x86}/jaspersoftstudio" />
		<copy file="${basedir}/resources/LICENSE.txt" todir="${zipdir.win32.x86}/jaspersoftstudio" />

		<taskdef name="nsisant" classname="net.sf.nsisant.Task" classpath="${basedir}/lib/nsisant-1.1.jar" />
		<nsisant script="${basedir}/resources/JaspersoftStudioInstaller.nsi">
			<define name="PRDUCT_ARCH" value="x86" />
			<define name="PRODUCT_VERSION" value="${jss.version}" />
			<define name="PRODUCT_WEB_SITE" value="http://www.jasperforge.org/projects/jaspersoftstudio" />
			<define name="INSTALLER_FILES_DIR" value="${zipdir.win32.x86}/jaspersoftstudio" />
			<define name="OUTPUT_FILE_NAME" value="${dist}/${jss.win32.x86.installer}" />
		</nsisant>

		<!-- remove the directory used to create the installer -->
		<delete dir="${zipdir.win32.x86}" />

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: windows-x86_64-installer
         - - - - - - - - - - - - - - - - - -->
	<target name="windows-x86_64-installer" description="Create the win64 installer using NSIS script (NSIS required)">
		<echo message="Executing 'windows-x86_64-installer' task"/>
		<property name="dist" value="${basedir}/dist" />
		<property name="zipfile.win32.x86_64" value="${buildId}-win32.win32.x86_64" />
		<property name="zipdir.win32.x86_64" value="${dist}/${zipfile.win32.x86_64}" />

		<echo message="${basedir}/${buildId}-win32.win32.x86_64.zip" />
		<!-- cleanup the previous directory (if any) -->
		<mkdir dir="${dist}" />

		<delete dir="${zipdir.win32.x86_64}" />

		<!-- Decompressing the archive created by the Eclipse build -->
		<unzip src="${basedir}/${zipfile.win32.x86_64}.zip" dest="${zipdir.win32.x86_64}" />
		<!-- Replacing the exe launcher (it is a modified version of the original laucher (Eclipse 3.6.2)
			     improved with Jaspersoft Studio icons -->
		<copy file="${basedir}/resources/Jaspersoft Studio64.exe" tofile="${zipdir.win32.x86_64}/jaspersoftstudio/Jaspersoft Studio.exe" overwrite="true" />

		<!-- copy notice.txt and LICENSE.txt in the eclipse folder -->
		<copy file="${basedir}/resources/notice.txt" todir="${zipdir.win32.x86_64}/jaspersoftstudio" />
		<copy file="${basedir}/resources/LICENSE.txt" todir="${zipdir.win32.x86_64}/jaspersoftstudio" />

		<taskdef name="nsisant" classname="net.sf.nsisant.Task" classpath="${basedir}/lib/nsisant-1.1.jar" />
		<nsisant script="${basedir}/resources/JaspersoftStudioInstaller64.nsi">
			<define name="PRDUCT_ARCH" value="x86_64" />
			<define name="PRODUCT_VERSION" value="${jss.version}" />
			<define name="PRODUCT_WEB_SITE" value="http://www.jasperforge.org/projects/jaspersoftstudio" />
			<define name="INSTALLER_FILES_DIR" value="${zipdir.win32.x86_64}/jaspersoftstudio" />
			<define name="OUTPUT_FILE_NAME" value="${dist}/${jss.win32.x86_64.installer}" />
		</nsisant>

		<!-- remove the directory used to create the installer -->
		<delete dir="${zipdir.win32.x86_64}" />

	</target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: linux-x86-installer
         - - - - - - - - - - - - - - - - - -->
	<target name="linux-x86-installer" description="Create the Linux (x86) tgz package (Unix system required)">
		<echo message="Executing 'linux-x86-installer' task"/>
		<property name="dist" value="${basedir}/dist" />
		<property name="zipfile.linux.x86" value="${buildId}-linux.gtk.x86" />
		<property name="zipdir.linux.x86" value="${dist}/${zipfile.linux.x86}" />

		<!-- cleanup the previous directory (if any) -->
		<mkdir dir="${dist}" />

		<delete dir="${zipdir.linux.x86}" />

		<!-- Decompressing the archive created by the Eclipse build -->
		<unzip src="${basedir}/${zipfile.linux.x86}.zip" dest="${zipdir.linux.x86}" />
		<!-- copy notice.txt and LICENSE.txt in the eclipse folder -->
		<copy file="${basedir}/resources/notice.txt" todir="${zipdir.linux.x86}/jaspersoftstudio" />
		<copy file="${basedir}/resources/LICENSE.txt" todir="${zipdir.linux.x86}/jaspersoftstudio" />
		<chmod file="${zipdir.linux.x86}/jaspersoftstudio/Jaspersoft Studio" perm="ugo+x" />
		<!-- rename the folder -->
		<move file="${zipdir.linux.x86}/jaspersoftstudio" tofile="${zipdir.linux.x86}/${jss.distro.folder}" />

		<tar destfile="${dist}/${jss.linux.x86.tgz}" basedir="${zipdir.linux.x86}" compression="gzip" longfile="gnu" />
		<!-- remove the temp extraction directory -->
		<delete dir="${zipdir.linux.x86}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: linux-x86_64-installer
         - - - - - - - - - - - - - - - - - -->
	<target name="linux-x86_64-installer" description="Create the Linux (x86_64) tgz package (Unix system required)">
		<echo message="Executing 'linux-x86_64-installer' task"/>
		<property name="dist" value="${basedir}/dist" />
		<property name="zipfile.linux.x86_64" value="${buildId}-linux.gtk.x86_64" />
		<property name="zipdir.linux.x86_64" value="${dist}/${zipfile.linux.x86_64}" />

		<!-- cleanup the previous directory (if any) -->
		<mkdir dir="${dist}" />

		<delete dir="${zipdir.linux.x86_64}" />

		<!-- Decompressing the archive created by the Eclipse build -->
		<unzip src="${basedir}/${zipfile.linux.x86_64}.zip" dest="${zipdir.linux.x86_64}" />
		<!-- copy notice.txt and LICENSE.txt in the eclipse folder -->
		<copy file="${basedir}/resources/notice.txt" todir="${zipdir.linux.x86_64}/jaspersoftstudio" />
		<copy file="${basedir}/resources/LICENSE.txt" todir="${zipdir.linux.x86_64}/jaspersoftstudio" />
		<chmod file="${zipdir.linux.x86_64}/jaspersoftstudio/Jaspersoft Studio" perm="ugo+x" />
		<!-- rename the folder -->
		<move file="${zipdir.linux.x86_64}/jaspersoftstudio" tofile="${zipdir.linux.x86_64}/${jss.distro.folder}" />

		<tar destfile="${dist}/${jss.linux.x86_64.tgz}" basedir="${zipdir.linux.x86_64}" compression="gzip" longfile="gnu">
			<tarfileset dir="${jss.distro.folder}/.." filemode="755">
				<include name="${jss.distro.folder}/Jaspersoft*" />
			</tarfileset>
			<tarfileset dir="${jss.distro.folder}/..">
				<include name="${jss.distro.folder}/**" />
				<exclude name="${jss.distro.folder}/Jaspersoft*" />
			</tarfileset>
		</tar>

		<!-- remove the temp extraction directory -->
		<delete dir="${zipdir.linux.x86_64}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: mac-x86_64-installer
         - - - - - - - - - - - - - - - - - -->
	<target name="mac-x86_64-installer" description="Create DMG installer for Mac x86_64 using a remote Mac server (uses ssh.properties)">
		<echo message="Executing 'mac-x86_x64-installer' task"/>
		<property file="ssh.properties" />
		<property name="dist" value="${basedir}/dist" />
		<property name="zipfile.mac.x86_64" value="${buildId}-macosx.cocoa.x86_64" />
		<property name="zipdir.mac.x86_64" value="${dist}/${zipfile.mac.x86_64}" />

		<sshexec host="${sshhost}" username="${sshuser}" password="${sshpass}" command="rm -Rf ${sshroot}/tmp-jssbuild" />
		<sshexec host="${sshhost}" username="${sshuser}" password="${sshpass}" command="mkdir ${sshroot}/tmp-jssbuild" />
		<scp file="${basedir}/resources/jss-package-template.tgz" todir="${sshuser}@${sshhost}:${sshroot}/tmp-jssbuild" password="${sshpass}" />
		<scp file="${basedir}/resources/mac_distro.sh" todir="${sshuser}@${sshhost}:${sshroot}/tmp-jssbuild" password="${sshpass}" />
		<scp file="${basedir}/${zipfile.mac.x86_64}.zip" todir="${sshuser}@${sshhost}:${sshroot}/tmp-jssbuild" password="${sshpass}" />
		<sshexec host="${sshhost}" username="${sshuser}" password="${sshpass}" command="cd '${sshroot}/tmp-jssbuild'; chmod +x mac_distro.sh; ./mac_distro.sh ${jss.version}" />
		<scp file="${sshuser}@${sshhost}:${sshroot}/tmp-jssbuild/jaspersoftstudio.dmg" localTofile="${dist}/${jss.mac.x86_64}" password="${sshpass}" />
	</target>
	
</project>