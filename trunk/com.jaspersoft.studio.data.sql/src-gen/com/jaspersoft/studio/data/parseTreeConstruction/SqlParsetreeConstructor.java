/*
* generated by Xtext
*/
package com.jaspersoft.studio.data.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import com.jaspersoft.studio.data.services.SqlGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class SqlParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private SqlGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new OrderByColumns_Group(this, this, 1, inst);
			case 2: return new OrderByColumnFull_Alternatives(this, this, 2, inst);
			case 3: return new GroupByColumns_Group(this, this, 3, inst);
			case 4: return new GroupByColumnFull_Alternatives(this, this, 4, inst);
			case 5: return new Columns_Group(this, this, 5, inst);
			case 6: return new ColumnOrAlias_Alternatives(this, this, 6, inst);
			case 7: return new ColumnFull_Alternatives(this, this, 7, inst);
			case 8: return new ColumnAlias_ColAliasAssignment(this, this, 8, inst);
			case 9: return new Column_ColNameAssignment(this, this, 9, inst);
			case 10: return new Tables_Group(this, this, 10, inst);
			case 11: return new TableOrAlias_Alternatives(this, this, 11, inst);
			case 12: return new TableFull_Alternatives(this, this, 12, inst);
			case 13: return new Table_TblAssignment(this, this, 13, inst);
			case 14: return new TableAlias_TblAliasAssignment(this, this, 14, inst);
			case 15: return new Schema_Alternatives(this, this, 15, inst);
			case 16: return new Database_DbNameAssignment(this, this, 16, inst);
			case 17: return new WhereEntry_Group(this, this, 17, inst);
			case 18: return new AndWhereEntry_Group(this, this, 18, inst);
			case 19: return new ConcreteWhereEntry_Alternatives(this, this, 19, inst);
			case 20: return new ParWhereEntry_Group(this, this, 20, inst);
			case 21: return new HavingEntry_Group(this, this, 21, inst);
			case 22: return new AndHavingEntry_Group(this, this, 22, inst);
			case 23: return new ConcreteHavingEntry_Alternatives(this, this, 23, inst);
			case 24: return new ParHavingEntry_Group(this, this, 24, inst);
			case 25: return new ExpressionWhereEntry_Alternatives(this, this, 25, inst);
			case 26: return new SingleExpressionWhereEntry_Group(this, this, 26, inst);
			case 27: return new Expression_Alternatives(this, this, 27, inst);
			case 28: return new ReplacableValue_ValueAssignment(this, this, 28, inst);
			case 29: return new DoubleExpression_ValueAssignment(this, this, 29, inst);
			case 30: return new LongExpression_ValueAssignment(this, this, 30, inst);
			case 31: return new StringExpression_ValueAssignment(this, this, 31, inst);
			case 32: return new NullExpression_ValueAssignment(this, this, 32, inst);
			case 33: return new DateExpression_ValueAssignment(this, this, 33, inst);
			case 34: return new BooleanExpression_Alternatives(this, this, 34, inst);
			case 35: return new MultiExpressionWhereEntry_Group(this, this, 35, inst);
			case 36: return new ArrayExpression_Alternatives(this, this, 36, inst);
			case 37: return new DoubleArrayExpression_Group(this, this, 37, inst);
			case 38: return new LongArrayExpression_Group(this, this, 38, inst);
			case 39: return new StringArrayExpression_Group(this, this, 39, inst);
			case 40: return new NullArrayExpression_Group(this, this, 40, inst);
			case 41: return new DateArrayExpression_Group(this, this, 41, inst);
			case 42: return new BooleanArrayExpression_Group(this, this, 42, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	"SELECT" col=Columns? "FROM" tbl=Tables ("WHERE" whereEntry=WhereEntry)? ("GROUP BY" groupByEntry=GroupByColumns)?
 * 	("HAVING" havingEntry=HavingEntry)? ("ORDER BY" orderByEntry=OrderByColumns)?;
 *
 **/

// "SELECT" col=Columns? "FROM" tbl=Tables ("WHERE" whereEntry=WhereEntry)? ("GROUP BY" groupByEntry=GroupByColumns)?
// ("HAVING" havingEntry=HavingEntry)? ("ORDER BY" orderByEntry=OrderByColumns)?
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_Group_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_Group_4(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Model_TblAssignment_3(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "SELECT"
protected class Model_SELECTKeyword_0 extends KeywordToken  {
	
	public Model_SELECTKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getSELECTKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// col=Columns?
protected class Model_ColAssignment_1 extends AssignmentToken  {
	
	public Model_ColAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getColAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Columns_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("col",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("col");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getColColumnsParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_SELECTKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "FROM"
protected class Model_FROMKeyword_2 extends KeywordToken  {
	
	public Model_FROMKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getFROMKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_ColAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_SELECTKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// tbl=Tables
protected class Model_TblAssignment_3 extends AssignmentToken  {
	
	public Model_TblAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTblAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tables_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tbl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tbl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTablesRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getTblTablesParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_FROMKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("WHERE" whereEntry=WhereEntry)?
protected class Model_Group_4 extends GroupToken {
	
	public Model_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_WhereEntryAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "WHERE"
protected class Model_WHEREKeyword_4_0 extends KeywordToken  {
	
	public Model_WHEREKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getWHEREKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_TblAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// whereEntry=WhereEntry
protected class Model_WhereEntryAssignment_4_1 extends AssignmentToken  {
	
	public Model_WhereEntryAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getWhereEntryAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("whereEntry",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("whereEntry");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWhereEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_WHEREKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("GROUP BY" groupByEntry=GroupByColumns)?
protected class Model_Group_5 extends GroupToken {
	
	public Model_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_GroupByEntryAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "GROUP BY"
protected class Model_GROUPBYKeyword_5_0 extends KeywordToken  {
	
	public Model_GROUPBYKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getGROUPBYKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_TblAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// groupByEntry=GroupByColumns
protected class Model_GroupByEntryAssignment_5_1 extends AssignmentToken  {
	
	public Model_GroupByEntryAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getGroupByEntryAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumns_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("groupByEntry",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("groupByEntry");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupByColumnsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getGroupByEntryGroupByColumnsParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_GROUPBYKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("HAVING" havingEntry=HavingEntry)?
protected class Model_Group_6 extends GroupToken {
	
	public Model_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_HavingEntryAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "HAVING"
protected class Model_HAVINGKeyword_6_0 extends KeywordToken  {
	
	public Model_HAVINGKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getHAVINGKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_Group_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_TblAssignment_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// havingEntry=HavingEntry
protected class Model_HavingEntryAssignment_6_1 extends AssignmentToken  {
	
	public Model_HavingEntryAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getHavingEntryAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HavingEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("havingEntry",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("havingEntry");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHavingEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getHavingEntryHavingEntryParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_HAVINGKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("ORDER BY" orderByEntry=OrderByColumns)?
protected class Model_Group_7 extends GroupToken {
	
	public Model_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_OrderByEntryAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ORDER BY"
protected class Model_ORDERBYKeyword_7_0 extends KeywordToken  {
	
	public Model_ORDERBYKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getORDERBYKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_Group_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_TblAssignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// orderByEntry=OrderByColumns
protected class Model_OrderByEntryAssignment_7_1 extends AssignmentToken  {
	
	public Model_OrderByEntryAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getOrderByEntryAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumns_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("orderByEntry",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("orderByEntry");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrderByColumnsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getOrderByEntryOrderByColumnsParserRuleCall_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ORDERBYKeyword_7_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Model ****************/


/************ begin Rule OrderByColumns ****************
 *
 * OrderByColumns:
 * 	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
 *
 **/

// OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
protected class OrderByColumns_Group extends GroupToken {
	
	public OrderByColumns_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrderByColumnsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumns_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrderByColumns_OrderByColumnFullParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrderByColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// OrderByColumnFull
protected class OrderByColumns_OrderByColumnFullParserRuleCall_0 extends RuleCallToken {
	
	public OrderByColumns_OrderByColumnFullParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumnFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrderByColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		if(checkForRecursion(OrderByColumnFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
protected class OrderByColumns_Group_1 extends GroupToken {
	
	public OrderByColumns_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrderByColumnsAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumns_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrOrderByColumn.entries+=current}
protected class OrderByColumns_OrOrderByColumnEntriesAction_1_0 extends ActionToken  {

	public OrderByColumns_OrOrderByColumnEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumns_OrderByColumnFullParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("," entries+=OrderByColumnFull)+
protected class OrderByColumns_Group_1_1 extends GroupToken {
	
	public OrderByColumns_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrderByColumnsAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumns_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class OrderByColumns_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public OrderByColumns_CommaKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumns_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrderByColumns_OrOrderByColumnEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=OrderByColumnFull
protected class OrderByColumns_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public OrderByColumns_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrderByColumnsAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumnFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrderByColumnFullRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrderByColumns_CommaKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule OrderByColumns ****************/


/************ begin Rule OrderByColumnFull ****************
 *
 * OrderByColumnFull:
 * 	colOrder=Column | TableFull "." colOrder=Column;
 *
 **/

// colOrder=Column | TableFull "." colOrder=Column
protected class OrderByColumnFull_Alternatives extends AlternativesToken {

	public OrderByColumnFull_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOrderByColumnFullAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumnFull_ColOrderAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrderByColumnFull_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrderByColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// colOrder=Column
protected class OrderByColumnFull_ColOrderAssignment_0 extends AssignmentToken  {
	
	public OrderByColumnFull_ColOrderAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Column_ColNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrderByColumnFullRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("colOrder",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colOrder");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrderByColumnFullAccess().getColOrderColumnParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TableFull "." colOrder=Column
protected class OrderByColumnFull_Group_1 extends GroupToken {
	
	public OrderByColumnFull_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrderByColumnFullAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumnFull_ColOrderAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TableFull
protected class OrderByColumnFull_TableFullParserRuleCall_1_0 extends RuleCallToken {
	
	public OrderByColumnFull_TableFullParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrderByColumnFullAccess().getTableFullParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TableFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "."
protected class OrderByColumnFull_FullStopKeyword_1_1 extends KeywordToken  {
	
	public OrderByColumnFull_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrderByColumnFullAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrderByColumnFull_TableFullParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// colOrder=Column
protected class OrderByColumnFull_ColOrderAssignment_1_2 extends AssignmentToken  {
	
	public OrderByColumnFull_ColOrderAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Column_ColNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("colOrder",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colOrder");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrderByColumnFullAccess().getColOrderColumnParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrderByColumnFull_FullStopKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrderByColumnFull ****************/


/************ begin Rule GroupByColumns ****************
 *
 * GroupByColumns:
 * 	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
 *
 **/

// GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
protected class GroupByColumns_Group extends GroupToken {
	
	public GroupByColumns_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupByColumnsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumns_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupByColumns_GroupByColumnFullParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupByColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// GroupByColumnFull
protected class GroupByColumns_GroupByColumnFullParserRuleCall_0 extends RuleCallToken {
	
	public GroupByColumns_GroupByColumnFullParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumnFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupByColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GroupByColumnFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
protected class GroupByColumns_Group_1 extends GroupToken {
	
	public GroupByColumns_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupByColumnsAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumns_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrGroupByColumn.entries+=current}
protected class GroupByColumns_OrGroupByColumnEntriesAction_1_0 extends ActionToken  {

	public GroupByColumns_OrGroupByColumnEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumns_GroupByColumnFullParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("," entries+=GroupByColumnFull)+
protected class GroupByColumns_Group_1_1 extends GroupToken {
	
	public GroupByColumns_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupByColumnsAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumns_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class GroupByColumns_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public GroupByColumns_CommaKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumns_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupByColumns_OrGroupByColumnEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=GroupByColumnFull
protected class GroupByColumns_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public GroupByColumns_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupByColumnsAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumnFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupByColumnFullRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupByColumns_CommaKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule GroupByColumns ****************/


/************ begin Rule GroupByColumnFull ****************
 *
 * GroupByColumnFull:
 * 	groupByColumn=Column | TableFull "." groupByColumn=Column;
 *
 **/

// groupByColumn=Column | TableFull "." groupByColumn=Column
protected class GroupByColumnFull_Alternatives extends AlternativesToken {

	public GroupByColumnFull_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getGroupByColumnFullAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumnFull_GroupByColumnAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupByColumnFull_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupByColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// groupByColumn=Column
protected class GroupByColumnFull_GroupByColumnAssignment_0 extends AssignmentToken  {
	
	public GroupByColumnFull_GroupByColumnAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupByColumnFullAccess().getGroupByColumnAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Column_ColNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupByColumnFullRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("groupByColumn",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("groupByColumn");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupByColumnFullAccess().getGroupByColumnColumnParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TableFull "." groupByColumn=Column
protected class GroupByColumnFull_Group_1 extends GroupToken {
	
	public GroupByColumnFull_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupByColumnFullAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumnFull_GroupByColumnAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TableFull
protected class GroupByColumnFull_TableFullParserRuleCall_1_0 extends RuleCallToken {
	
	public GroupByColumnFull_TableFullParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getGroupByColumnFullAccess().getTableFullParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TableFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "."
protected class GroupByColumnFull_FullStopKeyword_1_1 extends KeywordToken  {
	
	public GroupByColumnFull_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupByColumnFullAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupByColumnFull_TableFullParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// groupByColumn=Column
protected class GroupByColumnFull_GroupByColumnAssignment_1_2 extends AssignmentToken  {
	
	public GroupByColumnFull_GroupByColumnAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupByColumnFullAccess().getGroupByColumnAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Column_ColNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("groupByColumn",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("groupByColumn");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupByColumnFullAccess().getGroupByColumnColumnParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupByColumnFull_FullStopKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule GroupByColumnFull ****************/


/************ begin Rule Columns ****************
 *
 * Columns:
 * 	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
 *
 **/

// ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
protected class Columns_Group extends GroupToken {
	
	public Columns_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getColumnsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Columns_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Columns_ColumnOrAliasParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ColumnOrAlias
protected class Columns_ColumnOrAliasParserRuleCall_0 extends RuleCallToken {
	
	public Columns_ColumnOrAliasParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnOrAlias_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ColumnOrAlias_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
protected class Columns_Group_1 extends GroupToken {
	
	public Columns_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getColumnsAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Columns_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrColumn.entries+=current}
protected class Columns_OrColumnEntriesAction_1_0 extends ActionToken  {

	public Columns_OrColumnEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Columns_ColumnOrAliasParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("," entries+=ColumnOrAlias)+
protected class Columns_Group_1_1 extends GroupToken {
	
	public Columns_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getColumnsAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Columns_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Columns_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public Columns_CommaKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Columns_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Columns_OrColumnEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=ColumnOrAlias
protected class Columns_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public Columns_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getColumnsAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnOrAlias_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnOrAliasRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Columns_CommaKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Columns ****************/


/************ begin Rule ColumnOrAlias ****************
 *
 * ColumnOrAlias:
 * 	ColumnFull | ColumnFull "AS" colAlias=ColumnAlias | ColumnFull colAlias=ColumnAlias;
 *
 **/

// ColumnFull | ColumnFull "AS" colAlias=ColumnAlias | ColumnFull colAlias=ColumnAlias
protected class ColumnOrAlias_Alternatives extends AlternativesToken {

	public ColumnOrAlias_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnOrAlias_ColumnFullParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ColumnOrAlias_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ColumnOrAlias_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ColumnFull
protected class ColumnOrAlias_ColumnFullParserRuleCall_0 extends RuleCallToken {
	
	public ColumnOrAlias_ColumnFullParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ColumnFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ColumnFull "AS" colAlias=ColumnAlias
protected class ColumnOrAlias_Group_1 extends GroupToken {
	
	public ColumnOrAlias_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnOrAlias_ColAliasAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ColumnFull
protected class ColumnOrAlias_ColumnFullParserRuleCall_1_0 extends RuleCallToken {
	
	public ColumnOrAlias_ColumnFullParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ColumnFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "AS"
protected class ColumnOrAlias_ASKeyword_1_1 extends KeywordToken  {
	
	public ColumnOrAlias_ASKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getASKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnOrAlias_ColumnFullParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// colAlias=ColumnAlias
protected class ColumnOrAlias_ColAliasAssignment_1_2 extends AssignmentToken  {
	
	public ColumnOrAlias_ColAliasAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnAlias_ColAliasAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("colAlias",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colAlias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnAliasRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getColumnOrAliasAccess().getColAliasColumnAliasParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ColumnOrAlias_ASKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ColumnFull colAlias=ColumnAlias
protected class ColumnOrAlias_Group_2 extends GroupToken {
	
	public ColumnOrAlias_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnOrAlias_ColAliasAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ColumnFull
protected class ColumnOrAlias_ColumnFullParserRuleCall_2_0 extends RuleCallToken {
	
	public ColumnOrAlias_ColumnFullParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ColumnFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// colAlias=ColumnAlias
protected class ColumnOrAlias_ColAliasAssignment_2_1 extends AssignmentToken  {
	
	public ColumnOrAlias_ColAliasAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnAlias_ColAliasAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("colAlias",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colAlias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnAliasRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getColumnOrAliasAccess().getColAliasColumnAliasParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ColumnOrAlias_ColumnFullParserRuleCall_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ColumnOrAlias ****************/


/************ begin Rule ColumnFull ****************
 *
 * ColumnFull:
 * 	colName=Column | TableFull "." colName=Column;
 *
 **/

// colName=Column | TableFull "." colName=Column
protected class ColumnFull_Alternatives extends AlternativesToken {

	public ColumnFull_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getColumnFullAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnFull_ColNameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ColumnFull_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnFullRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// colName=Column
protected class ColumnFull_ColNameAssignment_0 extends AssignmentToken  {
	
	public ColumnFull_ColNameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getColumnFullAccess().getColNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Column_ColNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnFullRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("colName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getColumnFullAccess().getColNameColumnParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TableFull "." colName=Column
protected class ColumnFull_Group_1 extends GroupToken {
	
	public ColumnFull_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getColumnFullAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnFull_ColNameAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TableFull
protected class ColumnFull_TableFullParserRuleCall_1_0 extends RuleCallToken {
	
	public ColumnFull_TableFullParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getColumnFullAccess().getTableFullParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TableFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "."
protected class ColumnFull_FullStopKeyword_1_1 extends KeywordToken  {
	
	public ColumnFull_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ColumnFull_TableFullParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// colName=Column
protected class ColumnFull_ColNameAssignment_1_2 extends AssignmentToken  {
	
	public ColumnFull_ColNameAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getColumnFullAccess().getColNameAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Column_ColNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("colName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getColumnRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getColumnFullAccess().getColNameColumnParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ColumnFull_FullStopKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ColumnFull ****************/


/************ begin Rule ColumnAlias ****************
 *
 * ColumnAlias:
 * 	colAlias=ID;
 *
 **/

// colAlias=ID
protected class ColumnAlias_ColAliasAssignment extends AssignmentToken  {
	
	public ColumnAlias_ColAliasAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getColumnAliasAccess().getColAliasAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnAliasRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("colAlias",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colAlias");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getColumnAliasAccess().getColAliasIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getColumnAliasAccess().getColAliasIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ColumnAlias ****************/


/************ begin Rule Column ****************
 *
 * Column:
 * 	colName=ID;
 *
 **/

// colName=ID
protected class Column_ColNameAssignment extends AssignmentToken  {
	
	public Column_ColNameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getColumnAccess().getColNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getColumnRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("colName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getColumnAccess().getColNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getColumnAccess().getColNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Column ****************/


/************ begin Rule Tables ****************
 *
 * Tables:
 * 	TableOrAlias ({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?;
 *
 **/

// TableOrAlias ({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?
protected class Tables_Group extends GroupToken {
	
	public Tables_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTablesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tables_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Tables_TableOrAliasParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TableOrAlias
protected class Tables_TableOrAliasParserRuleCall_0 extends RuleCallToken {
	
	public Tables_TableOrAliasParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTablesAccess().getTableOrAliasParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableOrAlias_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TableOrAlias_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?
protected class Tables_Group_1 extends GroupToken {
	
	public Tables_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTablesAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tables_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrTable.entries+=current}
protected class Tables_OrTableEntriesAction_1_0 extends ActionToken  {

	public Tables_OrTableEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tables_TableOrAliasParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("," entries+=TableOrAlias)+
protected class Tables_Group_1_1 extends GroupToken {
	
	public Tables_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTablesAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tables_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Tables_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public Tables_CommaKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTablesAccess().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tables_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Tables_OrTableEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=TableOrAlias
protected class Tables_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public Tables_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTablesAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableOrAlias_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableOrAliasRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTablesAccess().getEntriesTableOrAliasParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Tables_CommaKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Tables ****************/


/************ begin Rule TableOrAlias ****************
 *
 * TableOrAlias:
 * 	TableFull | TableFull "AS" tblAlias=TableAlias | TableFull tblAlias=TableAlias;
 *
 **/

// TableFull | TableFull "AS" tblAlias=TableAlias | TableFull tblAlias=TableAlias
protected class TableOrAlias_Alternatives extends AlternativesToken {

	public TableOrAlias_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableOrAlias_TableFullParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TableOrAlias_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TableOrAlias_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TableFull
protected class TableOrAlias_TableFullParserRuleCall_0 extends RuleCallToken {
	
	public TableOrAlias_TableFullParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TableFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TableFull "AS" tblAlias=TableAlias
protected class TableOrAlias_Group_1 extends GroupToken {
	
	public TableOrAlias_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableOrAlias_TblAliasAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// TableFull
protected class TableOrAlias_TableFullParserRuleCall_1_0 extends RuleCallToken {
	
	public TableOrAlias_TableFullParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TableFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "AS"
protected class TableOrAlias_ASKeyword_1_1 extends KeywordToken  {
	
	public TableOrAlias_ASKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getASKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableOrAlias_TableFullParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// tblAlias=TableAlias
protected class TableOrAlias_TblAliasAssignment_1_2 extends AssignmentToken  {
	
	public TableOrAlias_TblAliasAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableAlias_TblAliasAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tblAlias",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tblAlias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableAliasRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableOrAliasAccess().getTblAliasTableAliasParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableOrAlias_ASKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// TableFull tblAlias=TableAlias
protected class TableOrAlias_Group_2 extends GroupToken {
	
	public TableOrAlias_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableOrAlias_TblAliasAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// TableFull
protected class TableOrAlias_TableFullParserRuleCall_2_0 extends RuleCallToken {
	
	public TableOrAlias_TableFullParserRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TableFull_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// tblAlias=TableAlias
protected class TableOrAlias_TblAliasAssignment_2_1 extends AssignmentToken  {
	
	public TableOrAlias_TblAliasAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableAlias_TblAliasAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tblAlias",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tblAlias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableAliasRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableOrAliasAccess().getTblAliasTableAliasParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableOrAlias_TableFullParserRuleCall_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule TableOrAlias ****************/


/************ begin Rule TableFull ****************
 *
 * TableFull:
 * 	Schema "." tbl=Table | tbl=Table;
 *
 **/

// Schema "." tbl=Table | tbl=Table
protected class TableFull_Alternatives extends AlternativesToken {

	public TableFull_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTableFullAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TableFull_TblAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Schema "." tbl=Table
protected class TableFull_Group_0 extends GroupToken {
	
	public TableFull_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableFullAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_TblAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Schema
protected class TableFull_SchemaParserRuleCall_0_0 extends RuleCallToken {
	
	public TableFull_SchemaParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTableFullAccess().getSchemaParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Schema_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "."
protected class TableFull_FullStopKeyword_0_1 extends KeywordToken  {
	
	public TableFull_FullStopKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableFullAccess().getFullStopKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableFull_SchemaParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// tbl=Table
protected class TableFull_TblAssignment_0_2 extends AssignmentToken  {
	
	public TableFull_TblAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableFullAccess().getTblAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Table_TblAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tbl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tbl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableFullAccess().getTblTableParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableFull_FullStopKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// tbl=Table
protected class TableFull_TblAssignment_1 extends AssignmentToken  {
	
	public TableFull_TblAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableFullAccess().getTblAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Table_TblAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableFullRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("tbl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tbl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableFullAccess().getTblTableParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule TableFull ****************/


/************ begin Rule Table ****************
 *
 * Table:
 * 	tbl=ID;
 *
 **/

// tbl=ID
protected class Table_TblAssignment extends AssignmentToken  {
	
	public Table_TblAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableAccess().getTblAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("tbl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tbl");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTableAccess().getTblIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTableAccess().getTblIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Table ****************/


/************ begin Rule TableAlias ****************
 *
 * TableAlias:
 * 	tblAlias=ID;
 *
 **/

// tblAlias=ID
protected class TableAlias_TblAliasAssignment extends AssignmentToken  {
	
	public TableAlias_TblAliasAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableAliasAccess().getTblAliasAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableAliasRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("tblAlias",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tblAlias");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTableAliasAccess().getTblAliasIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTableAliasAccess().getTblAliasIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule TableAlias ****************/


/************ begin Rule Schema ****************
 *
 * Schema:
 * 	Database "." schem=ID | schem=ID;
 *
 **/

// Database "." schem=ID | schem=ID
protected class Schema_Alternatives extends AlternativesToken {

	public Schema_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSchemaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Schema_SchemAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Database "." schem=ID
protected class Schema_Group_0 extends GroupToken {
	
	public Schema_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSchemaAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_SchemAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Database
protected class Schema_DatabaseParserRuleCall_0_0 extends RuleCallToken {
	
	public Schema_DatabaseParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSchemaAccess().getDatabaseParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Database_DbNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Database_DbNameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "."
protected class Schema_FullStopKeyword_0_1 extends KeywordToken  {
	
	public Schema_FullStopKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSchemaAccess().getFullStopKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_DatabaseParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// schem=ID
protected class Schema_SchemAssignment_0_2 extends AssignmentToken  {
	
	public Schema_SchemAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSchemaAccess().getSchemAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_FullStopKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("schem",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("schem");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_0_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}


// schem=ID
protected class Schema_SchemAssignment_1 extends AssignmentToken  {
	
	public Schema_SchemAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSchemaAccess().getSchemAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("schem",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("schem");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Schema ****************/


/************ begin Rule Database ****************
 *
 * Database:
 * 	dbName=ID;
 *
 **/

// dbName=ID
protected class Database_DbNameAssignment extends AssignmentToken  {
	
	public Database_DbNameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDatabaseAccess().getDbNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDatabaseRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("dbName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dbName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Database ****************/


/************ begin Rule WhereEntry ****************
 *
 * WhereEntry:
 * 	AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?;
 *
 **/

// AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?
protected class WhereEntry_Group extends GroupToken {
	
	public WhereEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhereEntry_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WhereEntry_AndWhereEntryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AndWhereEntry
protected class WhereEntry_AndWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public WhereEntry_AndWhereEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AndWhereEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?
protected class WhereEntry_Group_1 extends GroupToken {
	
	public WhereEntry_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhereEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrWhereEntry.entries+=current}
protected class WhereEntry_OrWhereEntryEntriesAction_1_0 extends ActionToken  {

	public WhereEntry_OrWhereEntryEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhereEntry_AndWhereEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("OR" entries+=AndWhereEntry)+
protected class WhereEntry_Group_1_1 extends GroupToken {
	
	public WhereEntry_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhereEntry_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "OR"
protected class WhereEntry_ORKeyword_1_1_0 extends KeywordToken  {
	
	public WhereEntry_ORKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhereEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WhereEntry_OrWhereEntryEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=AndWhereEntry
protected class WhereEntry_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public WhereEntry_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndWhereEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhereEntry_ORKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule WhereEntry ****************/


/************ begin Rule AndWhereEntry ****************
 *
 * AndWhereEntry returns WhereEntry:
 * 	ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?;
 *
 **/

// ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?
protected class AndWhereEntry_Group extends GroupToken {
	
	public AndWhereEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndWhereEntry_ConcreteWhereEntryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConcreteWhereEntry
protected class AndWhereEntry_ConcreteWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public AndWhereEntry_ConcreteWhereEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConcreteWhereEntry_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?
protected class AndWhereEntry_Group_1 extends GroupToken {
	
	public AndWhereEntry_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AndWhereEntry.entries+=current}
protected class AndWhereEntry_AndWhereEntryEntriesAction_1_0 extends ActionToken  {

	public AndWhereEntry_AndWhereEntryEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndWhereEntry_ConcreteWhereEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("AND" entries+=ConcreteWhereEntry)+
protected class AndWhereEntry_Group_1_1 extends GroupToken {
	
	public AndWhereEntry_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndWhereEntry_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "AND"
protected class AndWhereEntry_ANDKeyword_1_1_0 extends KeywordToken  {
	
	public AndWhereEntry_ANDKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndWhereEntry_AndWhereEntryEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=ConcreteWhereEntry
protected class AndWhereEntry_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public AndWhereEntry_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcreteWhereEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndWhereEntry_ANDKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule AndWhereEntry ****************/


/************ begin Rule ConcreteWhereEntry ****************
 *
 * ConcreteWhereEntry returns WhereEntry:
 * 	ParWhereEntry | ExpressionWhereEntry;
 *
 **/

// ParWhereEntry | ExpressionWhereEntry
protected class ConcreteWhereEntry_Alternatives extends AlternativesToken {

	public ConcreteWhereEntry_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConcreteWhereEntryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteWhereEntry_ParWhereEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConcreteWhereEntry_ExpressionWhereEntryParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ParWhereEntry
protected class ConcreteWhereEntry_ParWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public ConcreteWhereEntry_ParWhereEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ParWhereEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExpressionWhereEntry
protected class ConcreteWhereEntry_ExpressionWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public ConcreteWhereEntry_ExpressionWhereEntryParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ExpressionWhereEntry_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConcreteWhereEntry ****************/


/************ begin Rule ParWhereEntry ****************
 *
 * ParWhereEntry returns WhereEntry:
 * 	"(" WhereEntry ")";
 *
 **/

// "(" WhereEntry ")"
protected class ParWhereEntry_Group extends GroupToken {
	
	public ParWhereEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParWhereEntry_RightParenthesisKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class ParWhereEntry_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParWhereEntry_LeftParenthesisKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// WhereEntry
protected class ParWhereEntry_WhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public ParWhereEntry_WhereEntryParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(WhereEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParWhereEntry_LeftParenthesisKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParWhereEntry_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParWhereEntry_RightParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParWhereEntry_WhereEntryParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ParWhereEntry ****************/


/************ begin Rule HavingEntry ****************
 *
 * HavingEntry:
 * 	AndHavingEntry ({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?;
 *
 **/

// AndHavingEntry ({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?
protected class HavingEntry_Group extends GroupToken {
	
	public HavingEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHavingEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HavingEntry_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HavingEntry_AndHavingEntryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AndHavingEntry
protected class HavingEntry_AndHavingEntryParserRuleCall_0 extends RuleCallToken {
	
	public HavingEntry_AndHavingEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHavingEntryAccess().getAndHavingEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndHavingEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AndHavingEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?
protected class HavingEntry_Group_1 extends GroupToken {
	
	public HavingEntry_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHavingEntryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HavingEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrHavingEntry.entries+=current}
protected class HavingEntry_OrHavingEntryEntriesAction_1_0 extends ActionToken  {

	public HavingEntry_OrHavingEntryEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HavingEntry_AndHavingEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("OR" entries+=AndHavingEntry)+
protected class HavingEntry_Group_1_1 extends GroupToken {
	
	public HavingEntry_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHavingEntryAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HavingEntry_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "OR"
protected class HavingEntry_ORKeyword_1_1_0 extends KeywordToken  {
	
	public HavingEntry_ORKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHavingEntryAccess().getORKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HavingEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HavingEntry_OrHavingEntryEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=AndHavingEntry
protected class HavingEntry_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public HavingEntry_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHavingEntryAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndHavingEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndHavingEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getHavingEntryAccess().getEntriesAndHavingEntryParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new HavingEntry_ORKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule HavingEntry ****************/


/************ begin Rule AndHavingEntry ****************
 *
 * AndHavingEntry returns HavingEntry:
 * 	ConcreteHavingEntry ({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?;
 *
 **/

// ConcreteHavingEntry ({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?
protected class AndHavingEntry_Group extends GroupToken {
	
	public AndHavingEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndHavingEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndHavingEntry_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndHavingEntry_ConcreteHavingEntryParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConcreteHavingEntry
protected class AndHavingEntry_ConcreteHavingEntryParserRuleCall_0 extends RuleCallToken {
	
	public AndHavingEntry_ConcreteHavingEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndHavingEntryAccess().getConcreteHavingEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteHavingEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ConcreteHavingEntry_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?
protected class AndHavingEntry_Group_1 extends GroupToken {
	
	public AndHavingEntry_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndHavingEntryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndHavingEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AndHavingEntry.entries+=current}
protected class AndHavingEntry_AndHavingEntryEntriesAction_1_0 extends ActionToken  {

	public AndHavingEntry_AndHavingEntryEntriesAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndHavingEntry_ConcreteHavingEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("entries", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("entries")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ("AND" entries+=ConcreteHavingEntry)+
protected class AndHavingEntry_Group_1_1 extends GroupToken {
	
	public AndHavingEntry_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndHavingEntryAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndHavingEntry_EntriesAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "AND"
protected class AndHavingEntry_ANDKeyword_1_1_0 extends KeywordToken  {
	
	public AndHavingEntry_ANDKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAndHavingEntryAccess().getANDKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndHavingEntry_Group_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndHavingEntry_AndHavingEntryEntriesAction_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// entries+=ConcreteHavingEntry
protected class AndHavingEntry_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public AndHavingEntry_EntriesAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndHavingEntryAccess().getEntriesAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteHavingEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entries",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcreteHavingEntryRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndHavingEntryAccess().getEntriesConcreteHavingEntryParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndHavingEntry_ANDKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule AndHavingEntry ****************/


/************ begin Rule ConcreteHavingEntry ****************
 *
 * ConcreteHavingEntry returns HavingEntry:
 * 	ParHavingEntry | ExpressionWhereEntry;
 *
 **/

// ParHavingEntry | ExpressionWhereEntry
protected class ConcreteHavingEntry_Alternatives extends AlternativesToken {

	public ConcreteHavingEntry_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConcreteHavingEntryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteHavingEntry_ParHavingEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConcreteHavingEntry_ExpressionWhereEntryParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ParHavingEntry
protected class ConcreteHavingEntry_ParHavingEntryParserRuleCall_0 extends RuleCallToken {
	
	public ConcreteHavingEntry_ParHavingEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConcreteHavingEntryAccess().getParHavingEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParHavingEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ParHavingEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExpressionWhereEntry
protected class ConcreteHavingEntry_ExpressionWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public ConcreteHavingEntry_ExpressionWhereEntryParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConcreteHavingEntryAccess().getExpressionWhereEntryParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ExpressionWhereEntry_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConcreteHavingEntry ****************/


/************ begin Rule ParHavingEntry ****************
 *
 * ParHavingEntry returns HavingEntry:
 * 	"(" HavingEntry ")";
 *
 **/

// "(" HavingEntry ")"
protected class ParHavingEntry_Group extends GroupToken {
	
	public ParHavingEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParHavingEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParHavingEntry_RightParenthesisKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class ParHavingEntry_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParHavingEntry_LeftParenthesisKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParHavingEntryAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// HavingEntry
protected class ParHavingEntry_HavingEntryParserRuleCall_1 extends RuleCallToken {
	
	public ParHavingEntry_HavingEntryParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParHavingEntryAccess().getHavingEntryParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HavingEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(HavingEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParHavingEntry_LeftParenthesisKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParHavingEntry_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParHavingEntry_RightParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParHavingEntryAccess().getRightParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParHavingEntry_HavingEntryParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ParHavingEntry ****************/


/************ begin Rule ExpressionWhereEntry ****************
 *
 * ExpressionWhereEntry:
 * 	SingleExpressionWhereEntry | MultiExpressionWhereEntry;
 *
 **/

// SingleExpressionWhereEntry | MultiExpressionWhereEntry
protected class ExpressionWhereEntry_Alternatives extends AlternativesToken {

	public ExpressionWhereEntry_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpressionWhereEntryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExpressionWhereEntry_SingleExpressionWhereEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExpressionWhereEntry_MultiExpressionWhereEntryParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SingleExpressionWhereEntry
protected class ExpressionWhereEntry_SingleExpressionWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public ExpressionWhereEntry_SingleExpressionWhereEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionWhereEntryAccess().getSingleExpressionWhereEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleExpressionWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SingleExpressionWhereEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MultiExpressionWhereEntry
protected class ExpressionWhereEntry_MultiExpressionWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public ExpressionWhereEntry_MultiExpressionWhereEntryParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionWhereEntryAccess().getMultiExpressionWhereEntryParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiExpressionWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MultiExpressionWhereEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ExpressionWhereEntry ****************/


/************ begin Rule SingleExpressionWhereEntry ****************
 *
 * SingleExpressionWhereEntry:
 * 	name=ID operator=Operator rhs=Expression;
 *
 **/

// name=ID operator=Operator rhs=Expression
protected class SingleExpressionWhereEntry_Group extends GroupToken {
	
	public SingleExpressionWhereEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSingleExpressionWhereEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleExpressionWhereEntry_RhsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class SingleExpressionWhereEntry_NameAssignment_0 extends AssignmentToken  {
	
	public SingleExpressionWhereEntry_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleExpressionWhereEntryAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSingleExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSingleExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// operator=Operator
protected class SingleExpressionWhereEntry_OperatorAssignment_1 extends AssignmentToken  {
	
	public SingleExpressionWhereEntry_OperatorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleExpressionWhereEntry_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// rhs=Expression
protected class SingleExpressionWhereEntry_RhsAssignment_2 extends AssignmentToken  {
	
	public SingleExpressionWhereEntry_RhsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleExpressionWhereEntryAccess().getRhsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSingleExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SingleExpressionWhereEntry_OperatorAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule SingleExpressionWhereEntry ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 * 	DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
 * 	ReplacableValue;
 *
 **/

// DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
// ReplacableValue
protected class Expression_Alternatives extends AlternativesToken {

	public Expression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_DoubleExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_LongExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Expression_StringExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Expression_NullExpressionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Expression_DateExpressionParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Expression_BooleanExpressionParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Expression_ReplacableValueParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReplacableValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DoubleExpression
protected class Expression_DoubleExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Expression_DoubleExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DoubleExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LongExpression
protected class Expression_LongExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Expression_LongExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLongExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LongExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringExpression
protected class Expression_StringExpressionParserRuleCall_2 extends RuleCallToken {
	
	public Expression_StringExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StringExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NullExpression
protected class Expression_NullExpressionParserRuleCall_3 extends RuleCallToken {
	
	public Expression_NullExpressionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NullExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DateExpression
protected class Expression_DateExpressionParserRuleCall_4 extends RuleCallToken {
	
	public Expression_DateExpressionParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DateExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanExpression
protected class Expression_BooleanExpressionParserRuleCall_5 extends RuleCallToken {
	
	public Expression_BooleanExpressionParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReplacableValue
protected class Expression_ReplacableValueParserRuleCall_6 extends RuleCallToken {
	
	public Expression_ReplacableValueParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReplacableValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReplacableValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReplacableValue_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression ****************/


/************ begin Rule ReplacableValue ****************
 *
 * ReplacableValue:
 * 	value="?";
 *
 **/

// value="?"
protected class ReplacableValue_ValueAssignment extends AssignmentToken  {
	
	public ReplacableValue_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReplacableValueAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReplacableValueRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ReplacableValue ****************/


/************ begin Rule DoubleExpression ****************
 *
 * DoubleExpression:
 * 	value=SIGNED_DOUBLE;
 *
 **/

// value=SIGNED_DOUBLE
protected class DoubleExpression_ValueAssignment extends AssignmentToken  {
	
	public DoubleExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DoubleExpression ****************/


/************ begin Rule LongExpression ****************
 *
 * LongExpression:
 * 	value=SINGED_LONG;
 *
 **/

// value=SINGED_LONG
protected class LongExpression_ValueAssignment extends AssignmentToken  {
	
	public LongExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLongExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLongExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LongExpression ****************/


/************ begin Rule StringExpression ****************
 *
 * StringExpression:
 * 	value=STRING;
 *
 **/

// value=STRING
protected class StringExpression_ValueAssignment extends AssignmentToken  {
	
	public StringExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StringExpression ****************/


/************ begin Rule NullExpression ****************
 *
 * NullExpression:
 * 	value="null";
 *
 **/

// value="null"
protected class NullExpression_ValueAssignment extends AssignmentToken  {
	
	public NullExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNullExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getNullExpressionAccess().getValueNullKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNullExpressionAccess().getValueNullKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NullExpression ****************/


/************ begin Rule DateExpression ****************
 *
 * DateExpression:
 * 	value=DATE;
 *
 **/

// value=DATE
protected class DateExpression_ValueAssignment extends AssignmentToken  {
	
	public DateExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule DateExpression ****************/


/************ begin Rule BooleanExpression ****************
 *
 * BooleanExpression:
 * 	true="true" | true="false";
 *
 **/

// true="true" | true="false"
protected class BooleanExpression_Alternatives extends AlternativesToken {

	public BooleanExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBooleanExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanExpression_TrueAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BooleanExpression_TrueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// true="true"
protected class BooleanExpression_TrueAssignment_0 extends AssignmentToken  {
	
	public BooleanExpression_TrueAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanExpressionAccess().getTrueAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("true",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("true");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// true="false"
protected class BooleanExpression_TrueAssignment_1 extends AssignmentToken  {
	
	public BooleanExpression_TrueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanExpressionAccess().getTrueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("true",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("true");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule BooleanExpression ****************/


/************ begin Rule MultiExpressionWhereEntry ****************
 *
 * MultiExpressionWhereEntry:
 * 	name=ID operator=ArrayOperator rhs=ArrayExpression;
 *
 **/

// name=ID operator=ArrayOperator rhs=ArrayExpression
protected class MultiExpressionWhereEntry_Group extends GroupToken {
	
	public MultiExpressionWhereEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiExpressionWhereEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiExpressionWhereEntry_RhsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiExpressionWhereEntryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class MultiExpressionWhereEntry_NameAssignment_0 extends AssignmentToken  {
	
	public MultiExpressionWhereEntry_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiExpressionWhereEntryAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultiExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultiExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// operator=ArrayOperator
protected class MultiExpressionWhereEntry_OperatorAssignment_1 extends AssignmentToken  {
	
	public MultiExpressionWhereEntry_OperatorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiExpressionWhereEntry_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorArrayOperatorEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorArrayOperatorEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// rhs=ArrayExpression
protected class MultiExpressionWhereEntry_RhsAssignment_2 extends AssignmentToken  {
	
	public MultiExpressionWhereEntry_RhsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiExpressionWhereEntryAccess().getRhsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArrayExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiExpressionWhereEntryAccess().getRhsArrayExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiExpressionWhereEntry_OperatorAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule MultiExpressionWhereEntry ****************/


/************ begin Rule ArrayExpression ****************
 *
 * ArrayExpression:
 * 	DoubleArrayExpression | LongArrayExpression | StringArrayExpression | NullArrayExpression | DateArrayExpression |
 * 	BooleanArrayExpression;
 *
 **/

// DoubleArrayExpression | LongArrayExpression | StringArrayExpression | NullArrayExpression | DateArrayExpression |
// BooleanArrayExpression
protected class ArrayExpression_Alternatives extends AlternativesToken {

	public ArrayExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getArrayExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArrayExpression_DoubleArrayExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArrayExpression_LongArrayExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ArrayExpression_StringArrayExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ArrayExpression_NullArrayExpressionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ArrayExpression_DateArrayExpressionParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ArrayExpression_BooleanArrayExpressionParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanArrayExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateArrayExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDoubleArrayExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLongArrayExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullArrayExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringArrayExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DoubleArrayExpression
protected class ArrayExpression_DoubleArrayExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ArrayExpression_DoubleArrayExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArrayExpressionAccess().getDoubleArrayExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleArrayExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleArrayExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DoubleArrayExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LongArrayExpression
protected class ArrayExpression_LongArrayExpressionParserRuleCall_1 extends RuleCallToken {
	
	public ArrayExpression_LongArrayExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArrayExpressionAccess().getLongArrayExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongArrayExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLongArrayExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LongArrayExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringArrayExpression
protected class ArrayExpression_StringArrayExpressionParserRuleCall_2 extends RuleCallToken {
	
	public ArrayExpression_StringArrayExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArrayExpressionAccess().getStringArrayExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringArrayExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringArrayExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StringArrayExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NullArrayExpression
protected class ArrayExpression_NullArrayExpressionParserRuleCall_3 extends RuleCallToken {
	
	public ArrayExpression_NullArrayExpressionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArrayExpressionAccess().getNullArrayExpressionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullArrayExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullArrayExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NullArrayExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DateArrayExpression
protected class ArrayExpression_DateArrayExpressionParserRuleCall_4 extends RuleCallToken {
	
	public ArrayExpression_DateArrayExpressionParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArrayExpressionAccess().getDateArrayExpressionParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateArrayExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateArrayExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DateArrayExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanArrayExpression
protected class ArrayExpression_BooleanArrayExpressionParserRuleCall_5 extends RuleCallToken {
	
	public ArrayExpression_BooleanArrayExpressionParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArrayExpressionAccess().getBooleanArrayExpressionParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanArrayExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanArrayExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanArrayExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ArrayExpression ****************/


/************ begin Rule DoubleArrayExpression ****************
 *
 * DoubleArrayExpression:
 * 	"[" values+=SIGNED_DOUBLE ("," values+=SIGNED_DOUBLE)* "]";
 *
 **/

// "[" values+=SIGNED_DOUBLE ("," values+=SIGNED_DOUBLE)* "]"
protected class DoubleArrayExpression_Group extends GroupToken {
	
	public DoubleArrayExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoubleArrayExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleArrayExpression_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDoubleArrayExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class DoubleArrayExpression_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public DoubleArrayExpression_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleArrayExpressionAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// values+=SIGNED_DOUBLE
protected class DoubleArrayExpression_ValuesAssignment_1 extends AssignmentToken  {
	
	public DoubleArrayExpression_ValuesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleArrayExpression_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("," values+=SIGNED_DOUBLE)*
protected class DoubleArrayExpression_Group_2 extends GroupToken {
	
	public DoubleArrayExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDoubleArrayExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleArrayExpression_ValuesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class DoubleArrayExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public DoubleArrayExpression_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleArrayExpressionAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DoubleArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=SIGNED_DOUBLE
protected class DoubleArrayExpression_ValuesAssignment_2_1 extends AssignmentToken  {
	
	public DoubleArrayExpression_ValuesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleArrayExpression_CommaKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class DoubleArrayExpression_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public DoubleArrayExpression_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleArrayExpressionAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DoubleArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DoubleArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule DoubleArrayExpression ****************/


/************ begin Rule LongArrayExpression ****************
 *
 * LongArrayExpression:
 * 	"[" values+=SINGED_LONG ("," values+=SINGED_LONG)* "]";
 *
 **/

// "[" values+=SINGED_LONG ("," values+=SINGED_LONG)* "]"
protected class LongArrayExpression_Group extends GroupToken {
	
	public LongArrayExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLongArrayExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongArrayExpression_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLongArrayExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class LongArrayExpression_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public LongArrayExpression_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLongArrayExpressionAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// values+=SINGED_LONG
protected class LongArrayExpression_ValuesAssignment_1 extends AssignmentToken  {
	
	public LongArrayExpression_ValuesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongArrayExpression_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("," values+=SINGED_LONG)*
protected class LongArrayExpression_Group_2 extends GroupToken {
	
	public LongArrayExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLongArrayExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongArrayExpression_ValuesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class LongArrayExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public LongArrayExpression_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLongArrayExpressionAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LongArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=SINGED_LONG
protected class LongArrayExpression_ValuesAssignment_2_1 extends AssignmentToken  {
	
	public LongArrayExpression_ValuesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongArrayExpression_CommaKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class LongArrayExpression_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public LongArrayExpression_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLongArrayExpressionAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LongArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LongArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule LongArrayExpression ****************/


/************ begin Rule StringArrayExpression ****************
 *
 * StringArrayExpression:
 * 	"[" values+=STRING ("," values+=STRING)* "]";
 *
 **/

// "[" values+=STRING ("," values+=STRING)* "]"
protected class StringArrayExpression_Group extends GroupToken {
	
	public StringArrayExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringArrayExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringArrayExpression_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringArrayExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class StringArrayExpression_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public StringArrayExpression_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringArrayExpressionAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// values+=STRING
protected class StringArrayExpression_ValuesAssignment_1 extends AssignmentToken  {
	
	public StringArrayExpression_ValuesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringArrayExpression_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("," values+=STRING)*
protected class StringArrayExpression_Group_2 extends GroupToken {
	
	public StringArrayExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringArrayExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringArrayExpression_ValuesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class StringArrayExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public StringArrayExpression_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringArrayExpressionAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=STRING
protected class StringArrayExpression_ValuesAssignment_2_1 extends AssignmentToken  {
	
	public StringArrayExpression_ValuesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringArrayExpression_CommaKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class StringArrayExpression_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public StringArrayExpression_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringArrayExpressionAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule StringArrayExpression ****************/


/************ begin Rule NullArrayExpression ****************
 *
 * NullArrayExpression:
 * 	"[" values+="null" ("," values+="null")* "]";
 *
 **/

// "[" values+="null" ("," values+="null")* "]"
protected class NullArrayExpression_Group extends GroupToken {
	
	public NullArrayExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNullArrayExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullArrayExpression_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullArrayExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class NullArrayExpression_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public NullArrayExpression_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullArrayExpressionAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// values+="null"
protected class NullArrayExpression_ValuesAssignment_1 extends AssignmentToken  {
	
	public NullArrayExpression_ValuesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullArrayExpression_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// ("," values+="null")*
protected class NullArrayExpression_Group_2 extends GroupToken {
	
	public NullArrayExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNullArrayExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullArrayExpression_ValuesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class NullArrayExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public NullArrayExpression_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullArrayExpressionAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NullArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+="null"
protected class NullArrayExpression_ValuesAssignment_2_1 extends AssignmentToken  {
	
	public NullArrayExpression_ValuesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullArrayExpression_CommaKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class NullArrayExpression_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public NullArrayExpression_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullArrayExpressionAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NullArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NullArrayExpression ****************/


/************ begin Rule DateArrayExpression ****************
 *
 * DateArrayExpression:
 * 	"[" values+=DATE ("," values+=DATE)* "]";
 *
 **/

// "[" values+=DATE ("," values+=DATE)* "]"
protected class DateArrayExpression_Group extends GroupToken {
	
	public DateArrayExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDateArrayExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateArrayExpression_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateArrayExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class DateArrayExpression_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public DateArrayExpression_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDateArrayExpressionAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// values+=DATE
protected class DateArrayExpression_ValuesAssignment_1 extends AssignmentToken  {
	
	public DateArrayExpression_ValuesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateArrayExpression_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("," values+=DATE)*
protected class DateArrayExpression_Group_2 extends GroupToken {
	
	public DateArrayExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDateArrayExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateArrayExpression_ValuesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class DateArrayExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public DateArrayExpression_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDateArrayExpressionAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DateArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=DATE
protected class DateArrayExpression_ValuesAssignment_2_1 extends AssignmentToken  {
	
	public DateArrayExpression_ValuesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateArrayExpression_CommaKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class DateArrayExpression_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public DateArrayExpression_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDateArrayExpressionAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DateArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule DateArrayExpression ****************/


/************ begin Rule BooleanArrayExpression ****************
 *
 * BooleanArrayExpression:
 * 	"[" values+=BOOL ("," values+=BOOL)* "]";
 *
 **/

// "[" values+=BOOL ("," values+=BOOL)* "]"
protected class BooleanArrayExpression_Group extends GroupToken {
	
	public BooleanArrayExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanArrayExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanArrayExpression_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanArrayExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class BooleanArrayExpression_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public BooleanArrayExpression_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanArrayExpressionAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// values+=BOOL
protected class BooleanArrayExpression_ValuesAssignment_1 extends AssignmentToken  {
	
	public BooleanArrayExpression_ValuesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanArrayExpression_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("," values+=BOOL)*
protected class BooleanArrayExpression_Group_2 extends GroupToken {
	
	public BooleanArrayExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanArrayExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanArrayExpression_ValuesAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class BooleanArrayExpression_CommaKeyword_2_0 extends KeywordToken  {
	
	public BooleanArrayExpression_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanArrayExpressionAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BooleanArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=BOOL
protected class BooleanArrayExpression_ValuesAssignment_2_1 extends AssignmentToken  {
	
	public BooleanArrayExpression_ValuesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanArrayExpression_CommaKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class BooleanArrayExpression_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public BooleanArrayExpression_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanArrayExpressionAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanArrayExpression_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BooleanArrayExpression_ValuesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule BooleanArrayExpression ****************/

}
