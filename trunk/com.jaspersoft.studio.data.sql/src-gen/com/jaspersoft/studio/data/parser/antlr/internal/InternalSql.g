/*
* generated by Xtext
*/
grammar InternalSql;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.jaspersoft.studio.data.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.jaspersoft.studio.data.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.jaspersoft.studio.data.services.SqlGrammarAccess;

}

@parser::members {

 	private SqlGrammarAccess grammarAccess;
 	
    public InternalSqlParser(TokenStream input, SqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SELECT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getSELECTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getColColumnParserRuleCall_1_0()); 
	    }
		lv_col_1_0=ruleColumn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"col",
        		lv_col_1_0, 
        		"Column");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='FROM' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getFROMKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDbDatabaseParserRuleCall_3_0()); 
	    }
		lv_db_3_0=ruleDatabase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"db",
        		lv_db_3_0, 
        		"Database");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='WHERE' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getWHEREKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0()); 
	    }
		lv_whereEntry_5_0=ruleWhereEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"whereEntry",
        		lv_whereEntry_5_0, 
        		"WhereEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDatabase
entryRuleDatabase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseRule()); }
	 iv_ruleDatabase=ruleDatabase 
	 { $current=$iv_ruleDatabase.current; } 
	 EOF 
;

// Rule Database
ruleDatabase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dbName_0_0=RULE_ID
		{
			newLeafNode(lv_dbName_0_0, grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dbName",
        		lv_dbName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	 iv_ruleColumn=ruleColumn 
	 { $current=$iv_ruleColumn.current; } 
	 EOF 
;

// Rule Column
ruleColumn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnAccess().getColColumnOrAliasParserRuleCall_0()); 
	    }
		lv_col_0_0=ruleColumnOrAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnRule());
	        }
       		set(
       			$current, 
       			"col",
        		lv_col_0_0, 
        		"ColumnOrAlias");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleColumnOrAlias
entryRuleColumnOrAlias returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnOrAliasRule()); } 
	 iv_ruleColumnOrAlias=ruleColumnOrAlias 
	 { $current=$iv_ruleColumnOrAlias.current.getText(); }  
	 EOF 
;

// Rule ColumnOrAlias
ruleColumnOrAlias returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_0()); 
    }
    this_ColumnFull_0=ruleColumnFull    {
		$current.merge(this_ColumnFull_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_1_0()); 
    }
    this_ColumnFull_1=ruleColumnFull    {
		$current.merge(this_ColumnFull_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='AS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColumnOrAliasAccess().getASKeyword_1_1()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getColumnOrAliasAccess().getIDTerminalRuleCall_1_2()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_2_0()); 
    }
    this_ColumnFull_4=ruleColumnFull    {
		$current.merge(this_ColumnFull_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getColumnOrAliasAccess().getIDTerminalRuleCall_2_1()); 
    }
))
    ;





// Entry rule entryRuleColumnFull
entryRuleColumnFull returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnFullRule()); } 
	 iv_ruleColumnFull=ruleColumnFull 
	 { $current=$iv_ruleColumnFull.current.getText(); }  
	 EOF 
;

// Rule ColumnFull
ruleColumnFull returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getColumnFullAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColumnFullAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getColumnFullAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleWhereEntry
entryRuleWhereEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhereEntryRule()); }
	 iv_ruleWhereEntry=ruleWhereEntry 
	 { $current=$iv_ruleWhereEntry.current; } 
	 EOF 
;

// Rule WhereEntry
ruleWhereEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0()); 
    }
    this_AndWhereEntry_0=ruleAndWhereEntry
    { 
        $current = $this_AndWhereEntry_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0(),
            $current);
    }
)(	otherlv_2='OR' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleAndWhereEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereEntryRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"AndWhereEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleAndWhereEntry
entryRuleAndWhereEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndWhereEntryRule()); }
	 iv_ruleAndWhereEntry=ruleAndWhereEntry 
	 { $current=$iv_ruleAndWhereEntry.current; } 
	 EOF 
;

// Rule AndWhereEntry
ruleAndWhereEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0()); 
    }
    this_ConcreteWhereEntry_0=ruleConcreteWhereEntry
    { 
        $current = $this_ConcreteWhereEntry_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0(),
            $current);
    }
)(	otherlv_2='AND' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleConcreteWhereEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndWhereEntryRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"ConcreteWhereEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleConcreteWhereEntry
entryRuleConcreteWhereEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConcreteWhereEntryRule()); }
	 iv_ruleConcreteWhereEntry=ruleConcreteWhereEntry 
	 { $current=$iv_ruleConcreteWhereEntry.current; } 
	 EOF 
;

// Rule ConcreteWhereEntry
ruleConcreteWhereEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0()); 
    }
    this_ParWhereEntry_0=ruleParWhereEntry
    { 
        $current = $this_ParWhereEntry_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1()); 
    }
    this_ExpressionWhereEntry_1=ruleExpressionWhereEntry
    { 
        $current = $this_ExpressionWhereEntry_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParWhereEntry
entryRuleParWhereEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParWhereEntryRule()); }
	 iv_ruleParWhereEntry=ruleParWhereEntry 
	 { $current=$iv_ruleParWhereEntry.current; } 
	 EOF 
;

// Rule ParWhereEntry
ruleParWhereEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1()); 
    }
    this_WhereEntry_1=ruleWhereEntry
    { 
        $current = $this_WhereEntry_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleExpressionWhereEntry
entryRuleExpressionWhereEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionWhereEntryRule()); }
	 iv_ruleExpressionWhereEntry=ruleExpressionWhereEntry 
	 { $current=$iv_ruleExpressionWhereEntry.current; } 
	 EOF 
;

// Rule ExpressionWhereEntry
ruleExpressionWhereEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionWhereEntryAccess().getSingleExpressionWhereEntryParserRuleCall_0()); 
    }
    this_SingleExpressionWhereEntry_0=ruleSingleExpressionWhereEntry
    { 
        $current = $this_SingleExpressionWhereEntry_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionWhereEntryAccess().getMultiExpressionWhereEntryParserRuleCall_1()); 
    }
    this_MultiExpressionWhereEntry_1=ruleMultiExpressionWhereEntry
    { 
        $current = $this_MultiExpressionWhereEntry_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSingleExpressionWhereEntry
entryRuleSingleExpressionWhereEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleExpressionWhereEntryRule()); }
	 iv_ruleSingleExpressionWhereEntry=ruleSingleExpressionWhereEntry 
	 { $current=$iv_ruleSingleExpressionWhereEntry.current; } 
	 EOF 
;

// Rule SingleExpressionWhereEntry
ruleSingleExpressionWhereEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSingleExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleExpressionWhereEntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleExpressionWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleExpressionWhereEntryRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0()); 
    }
    this_DoubleExpression_0=ruleDoubleExpression
    { 
        $current = $this_DoubleExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1()); 
    }
    this_LongExpression_1=ruleLongExpression
    { 
        $current = $this_LongExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2()); 
    }
    this_StringExpression_2=ruleStringExpression
    { 
        $current = $this_StringExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3()); 
    }
    this_NullExpression_3=ruleNullExpression
    { 
        $current = $this_NullExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4()); 
    }
    this_DateExpression_4=ruleDateExpression
    { 
        $current = $this_DateExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5()); 
    }
    this_BooleanExpression_5=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6()); 
    }
    this_ReplacableValue_6=ruleReplacableValue
    { 
        $current = $this_ReplacableValue_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReplacableValue
entryRuleReplacableValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReplacableValueRule()); }
	 iv_ruleReplacableValue=ruleReplacableValue 
	 { $current=$iv_ruleReplacableValue.current; } 
	 EOF 
;

// Rule ReplacableValue
ruleReplacableValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'?' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReplacableValueRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "?");
	    }

)
)
;





// Entry rule entryRuleDoubleExpression
entryRuleDoubleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleExpressionRule()); }
	 iv_ruleDoubleExpression=ruleDoubleExpression 
	 { $current=$iv_ruleDoubleExpression.current; } 
	 EOF 
;

// Rule DoubleExpression
ruleDoubleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_SIGNED_DOUBLE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SIGNED_DOUBLE");
	    }

)
)
;





// Entry rule entryRuleLongExpression
entryRuleLongExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLongExpressionRule()); }
	 iv_ruleLongExpression=ruleLongExpression 
	 { $current=$iv_ruleLongExpression.current; } 
	 EOF 
;

// Rule LongExpression
ruleLongExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_SINGED_LONG
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SINGED_LONG");
	    }

)
)
;





// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	 iv_ruleStringExpression=ruleStringExpression 
	 { $current=$iv_ruleStringExpression.current; } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullExpressionRule()); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'null' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getNullExpressionAccess().getValueNullKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "null");
	    }

)
)
;





// Entry rule entryRuleDateExpression
entryRuleDateExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateExpressionRule()); }
	 iv_ruleDateExpression=ruleDateExpression 
	 { $current=$iv_ruleDateExpression.current; } 
	 EOF 
;

// Rule DateExpression
ruleDateExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_DATE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DATE");
	    }

)
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_true_0_0=	'true' 
    {
        newLeafNode(lv_true_0_0, grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpressionRule());
	        }
       		setWithLastConsumed($current, "true", lv_true_0_0, "true");
	    }

)
)
    |(
(
		lv_true_1_0=	'false' 
    {
        newLeafNode(lv_true_1_0, grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpressionRule());
	        }
       		setWithLastConsumed($current, "true", lv_true_1_0, "false");
	    }

)
))
;





// Entry rule entryRuleMultiExpressionWhereEntry
entryRuleMultiExpressionWhereEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiExpressionWhereEntryRule()); }
	 iv_ruleMultiExpressionWhereEntry=ruleMultiExpressionWhereEntry 
	 { $current=$iv_ruleMultiExpressionWhereEntry.current; } 
	 EOF 
;

// Rule MultiExpressionWhereEntry
ruleMultiExpressionWhereEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMultiExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiExpressionWhereEntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorArrayOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleArrayOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiExpressionWhereEntryRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"ArrayOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsArrayExpressionParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleArrayExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiExpressionWhereEntryRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"ArrayExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArrayExpression
entryRuleArrayExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayExpressionRule()); }
	 iv_ruleArrayExpression=ruleArrayExpression 
	 { $current=$iv_ruleArrayExpression.current; } 
	 EOF 
;

// Rule ArrayExpression
ruleArrayExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArrayExpressionAccess().getDoubleArrayExpressionParserRuleCall_0()); 
    }
    this_DoubleArrayExpression_0=ruleDoubleArrayExpression
    { 
        $current = $this_DoubleArrayExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArrayExpressionAccess().getLongArrayExpressionParserRuleCall_1()); 
    }
    this_LongArrayExpression_1=ruleLongArrayExpression
    { 
        $current = $this_LongArrayExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArrayExpressionAccess().getStringArrayExpressionParserRuleCall_2()); 
    }
    this_StringArrayExpression_2=ruleStringArrayExpression
    { 
        $current = $this_StringArrayExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArrayExpressionAccess().getNullArrayExpressionParserRuleCall_3()); 
    }
    this_NullArrayExpression_3=ruleNullArrayExpression
    { 
        $current = $this_NullArrayExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArrayExpressionAccess().getDateArrayExpressionParserRuleCall_4()); 
    }
    this_DateArrayExpression_4=ruleDateArrayExpression
    { 
        $current = $this_DateArrayExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArrayExpressionAccess().getBooleanArrayExpressionParserRuleCall_5()); 
    }
    this_BooleanArrayExpression_5=ruleBooleanArrayExpression
    { 
        $current = $this_BooleanArrayExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDoubleArrayExpression
entryRuleDoubleArrayExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleArrayExpressionRule()); }
	 iv_ruleDoubleArrayExpression=ruleDoubleArrayExpression 
	 { $current=$iv_ruleDoubleArrayExpression.current; } 
	 EOF 
;

// Rule DoubleArrayExpression
ruleDoubleArrayExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoubleArrayExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_values_1_0=RULE_SIGNED_DOUBLE
		{
			newLeafNode(lv_values_1_0, grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"SIGNED_DOUBLE");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoubleArrayExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		lv_values_3_0=RULE_SIGNED_DOUBLE
		{
			newLeafNode(lv_values_3_0, grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"SIGNED_DOUBLE");
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDoubleArrayExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleLongArrayExpression
entryRuleLongArrayExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLongArrayExpressionRule()); }
	 iv_ruleLongArrayExpression=ruleLongArrayExpression 
	 { $current=$iv_ruleLongArrayExpression.current; } 
	 EOF 
;

// Rule LongArrayExpression
ruleLongArrayExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLongArrayExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_values_1_0=RULE_SINGED_LONG
		{
			newLeafNode(lv_values_1_0, grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"SINGED_LONG");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLongArrayExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		lv_values_3_0=RULE_SINGED_LONG
		{
			newLeafNode(lv_values_3_0, grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"SINGED_LONG");
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLongArrayExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStringArrayExpression
entryRuleStringArrayExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringArrayExpressionRule()); }
	 iv_ruleStringArrayExpression=ruleStringArrayExpression 
	 { $current=$iv_ruleStringArrayExpression.current; } 
	 EOF 
;

// Rule StringArrayExpression
ruleStringArrayExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringArrayExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_values_1_0=RULE_STRING
		{
			newLeafNode(lv_values_1_0, grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"STRING");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStringArrayExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		lv_values_3_0=RULE_STRING
		{
			newLeafNode(lv_values_3_0, grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"STRING");
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStringArrayExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleNullArrayExpression
entryRuleNullArrayExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullArrayExpressionRule()); }
	 iv_ruleNullArrayExpression=ruleNullArrayExpression 
	 { $current=$iv_ruleNullArrayExpression.current; } 
	 EOF 
;

// Rule NullArrayExpression
ruleNullArrayExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNullArrayExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_values_1_0=	'null' 
    {
        newLeafNode(lv_values_1_0, grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullArrayExpressionRule());
	        }
       		addWithLastConsumed($current, "values", lv_values_1_0, "null");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNullArrayExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		lv_values_3_0=	'null' 
    {
        newLeafNode(lv_values_3_0, grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullArrayExpressionRule());
	        }
       		addWithLastConsumed($current, "values", lv_values_3_0, "null");
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNullArrayExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleDateArrayExpression
entryRuleDateArrayExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateArrayExpressionRule()); }
	 iv_ruleDateArrayExpression=ruleDateArrayExpression 
	 { $current=$iv_ruleDateArrayExpression.current; } 
	 EOF 
;

// Rule DateArrayExpression
ruleDateArrayExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDateArrayExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_values_1_0=RULE_DATE
		{
			newLeafNode(lv_values_1_0, grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"DATE");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDateArrayExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		lv_values_3_0=RULE_DATE
		{
			newLeafNode(lv_values_3_0, grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"DATE");
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDateArrayExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBooleanArrayExpression
entryRuleBooleanArrayExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanArrayExpressionRule()); }
	 iv_ruleBooleanArrayExpression=ruleBooleanArrayExpression 
	 { $current=$iv_ruleBooleanArrayExpression.current; } 
	 EOF 
;

// Rule BooleanArrayExpression
ruleBooleanArrayExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBooleanArrayExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_values_1_0=RULE_BOOL
		{
			newLeafNode(lv_values_1_0, grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"BOOL");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanArrayExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		lv_values_3_0=RULE_BOOL
		{
			newLeafNode(lv_values_3_0, grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanArrayExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"BOOL");
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBooleanArrayExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Rule ArrayOperator
ruleArrayOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='in' 
	{
        $current = grammarAccess.getArrayOperatorAccess().getSql_inEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getArrayOperatorAccess().getSql_inEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='not in' 
	{
        $current = grammarAccess.getArrayOperatorAccess().getSql_notInEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getArrayOperatorAccess().getSql_notInEnumLiteralDeclaration_1()); 
    }
));



// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='=' 
	{
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='like' 
	{
        $current = grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='not like' 
	{
        $current = grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='not in' 
	{
        $current = grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='in' 
	{
        $current = grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9()); 
    }
));



RULE_BOOL : ('true'|'false'|'TRUE'|'FALSE');

RULE_SINGED_LONG : '-'? ('0'..'9')+;

RULE_DATE : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'1' '0'..'9' '-' '0'..'3' '0'..'9';

RULE_SIGNED_DOUBLE : '-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


