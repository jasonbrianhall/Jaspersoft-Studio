/*
* generated by Xtext
*/

package com.jaspersoft.studio.data.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SqlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColNameIDTerminalRuleCall_1_0 = (RuleCall)cColNameAssignment_1.eContents().get(0);
		
		//Model:
		//	"SELECT" colName=ID;
		public ParserRule getRule() { return rule; }

		//"SELECT" colName=ID
		public Group getGroup() { return cGroup; }

		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }

		//colName=ID
		public Assignment getColNameAssignment_1() { return cColNameAssignment_1; }

		//ID
		public RuleCall getColNameIDTerminalRuleCall_1_0() { return cColNameIDTerminalRuleCall_1_0; }
	}
	
	
	private ModelElements pModel;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.jaspersoft.studio.data.Sql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"SELECT" colName=ID;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////	(col=Columns)?
	////	'FROM'
	////	tbl=Tables
	////	 ('WHERE' whereEntry=WhereEntry)?
	////	('GROUP BY' groupByEntry=GroupByColumns)?
	////	('HAVING' havingEntry=HavingEntry)?
	////	('ORDER BY' orderByEntry=OrderByColumns)? ;
	////OrderByColumns returns OrderByColumns:
	////	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
	////
	////OrderByColumnFull:
	/// *	colOrder=Column | * / //( TableFull '.' colOrder = Column ) ;
	////GroupByColumns returns GroupByColumns:
	////	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
	////
	////GroupByColumnFull:
	/// *groupByColumn=Column |* / //( TableFull '.' groupByColumn = Column ) ; 
	////Columns returns Columns:
	////	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
	////
	////ColumnOrAlias:
	////ColumnFull |  (ColumnFull 'AS' colAlias=ColumnAlias)    | (ColumnFull colAlias=ColumnAlias) ;
	////ColumnFull:
	////colName=Column |  (TableFull '.' colName=Column);
	////ColumnAlias:
	////	colAlias=ID;
	////
	////Column:
	////	colName=ID;
	////Tables returns Tables :
	////	TableOrAlias ({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?;
	////TableOrAlias:
	////TableFull |  (TableFull 'AS' tblAlias=TableAlias)   | (TableFull tblAlias=TableAlias)  ;
	////TableFull:
	////(Schema '.' tbl=Table) |  tbl=Table;
	////Table:
	////	tbl=ID;
	////
	////TableAlias:
	////	tblAlias=ID;
	////Schema:
	////	(Database "." schem=ID) | schem=ID;
	////
	////Database:
	////	dbName=ID;
	////WhereEntry returns WhereEntry:
	////	AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?;
	////
	////AndWhereEntry returns WhereEntry:
	////	ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?;
	////
	////ConcreteWhereEntry returns WhereEntry:
	////	ParWhereEntry | ExpressionWhereEntry;
	////
	////ParWhereEntry returns WhereEntry:
	////	"(" WhereEntry ")";
	////
	////HavingEntry returns HavingEntry:
	////	AndHavingEntry ({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?;
	////
	////AndHavingEntry returns HavingEntry:
	////	ConcreteHavingEntry ({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?;
	////
	////ConcreteHavingEntry returns HavingEntry:
	////	ParHavingEntry | ExpressionWhereEntry;
	////ParHavingEntry returns HavingEntry:
	////	"(" HavingEntry ")";
	////
	////ExpressionWhereEntry:
	////	SingleExpressionWhereEntry |
	////	MultiExpressionWhereEntry;
	////
	////SingleExpressionWhereEntry:
	////	name=ID operator=Operator rhs=Expression;
	////
	////Expression:
	////	DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
	////	ReplacableValue;
	////
	////ReplacableValue:
	////	value="?";
	////
	////DoubleExpression:
	////	value=SIGNED_DOUBLE;
	////
	////LongExpression:
	////	value=SINGED_LONG;
	////
	////StringExpression:
	////	value=STRING;
	////
	////NullExpression:
	////	value="null";
	////
	////DateExpression:
	////	value=DATE;
	////
	////BooleanExpression:
	////	true="true" | true="false";
	////
	////MultiExpressionWhereEntry:
	////	name=ID operator=ArrayOperator rhs=ArrayExpression;
	////
	////ArrayExpression:
	////	DoubleArrayExpression | LongArrayExpression | StringArrayExpression |
	////	NullArrayExpression | DateArrayExpression | BooleanArrayExpression;
	////
	////DoubleArrayExpression:
	////	'[' values+=SIGNED_DOUBLE (',' values+=SIGNED_DOUBLE)* ']';
	////
	////LongArrayExpression:
	////	'[' values+=SINGED_LONG (',' values+=SINGED_LONG)* ']';
	////
	////StringArrayExpression:
	////	'[' values+=STRING (',' values+=STRING)* ']';
	////
	////NullArrayExpression:
	////	'[' values+="null" (',' values+="null")* ']';
	////
	////DateArrayExpression:
	////	'[' values+=DATE (',' values+=DATE)* ']';
	////
	////BooleanArrayExpression:
	////	'[' values+=BOOL (',' values+=BOOL)* ']';
	////enum ArrayOperator:
	////	sql_in="IN" |
	////	sql_notIn="NOT IN";
	////
	////enum OperatorComparison:
	////	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" |
	////	equal="=" | notEqual="!=" | notEqual2="<>";
	////
	////enum OperatorArithmetic:
	////	plus="+" | minus="-" | multiply="*" | devide="/" | module="%";
	////
	////enum OperatorLogical:
	////	or="OR" | and="AND";
	////
	////terminal BOOL:
	////	"true" | "false" | "TRUE" | "FALSE";
	////
	////terminal SINGED_LONG returns ecore::ELong:
	////	'-'? ('0'..'9')+;
	////
	////terminal DATE returns ecore::EDate:
	////	'0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' ('0'..'1') '0'..'9' '-' '0'..'3'
	////	'0'..'9';
	////
	////terminal SIGNED_DOUBLE returns ecore::EDouble:
	////	'-'? ('0'..'9')+ ('.' ('0'..'9')+)?;
	//terminal SL_COMMENT:
	//	("--" | "#" | "//") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
