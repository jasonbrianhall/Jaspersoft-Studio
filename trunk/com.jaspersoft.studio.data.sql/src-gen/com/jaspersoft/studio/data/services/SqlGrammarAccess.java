/*
* generated by Xtext
*/

package com.jaspersoft.studio.data.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SqlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cQueryAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuerySelectQueryParserRuleCall_0 = (RuleCall)cQueryAssignment.eContents().get(0);
		
		//Model:
		//	query=SelectQuery;
		public ParserRule getRule() { return rule; }

		//query=SelectQuery
		public Assignment getQueryAssignment() { return cQueryAssignment; }

		//SelectQuery
		public RuleCall getQuerySelectQueryParserRuleCall_0() { return cQuerySelectQueryParserRuleCall_0; }
	}

	public class FetchFirstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FetchFirst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFetchFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFetchFirstIntegerValueParserRuleCall_0_0 = (RuleCall)cFetchFirstAssignment_0.eContents().get(0);
		private final Assignment cRowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRowAlternatives_1_0 = (Alternatives)cRowAssignment_1.eContents().get(0);
		private final Keyword cRowROWKeyword_1_0_0 = (Keyword)cRowAlternatives_1_0.eContents().get(0);
		private final Keyword cRowROWSKeyword_1_0_1 = (Keyword)cRowAlternatives_1_0.eContents().get(1);
		private final Keyword cONLYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FetchFirst:
		//	fetchFirst=IntegerValue? row=("ROW" | "ROWS") "ONLY";
		public ParserRule getRule() { return rule; }

		//fetchFirst=IntegerValue? row=("ROW" | "ROWS") "ONLY"
		public Group getGroup() { return cGroup; }

		//fetchFirst=IntegerValue?
		public Assignment getFetchFirstAssignment_0() { return cFetchFirstAssignment_0; }

		//IntegerValue
		public RuleCall getFetchFirstIntegerValueParserRuleCall_0_0() { return cFetchFirstIntegerValueParserRuleCall_0_0; }

		//row=("ROW" | "ROWS")
		public Assignment getRowAssignment_1() { return cRowAssignment_1; }

		//"ROW" | "ROWS"
		public Alternatives getRowAlternatives_1_0() { return cRowAlternatives_1_0; }

		//"ROW"
		public Keyword getRowROWKeyword_1_0_0() { return cRowROWKeyword_1_0_0; }

		//"ROWS"
		public Keyword getRowROWSKeyword_1_0_1() { return cRowROWSKeyword_1_0_1; }

		//"ONLY"
		public Keyword getONLYKeyword_2() { return cONLYKeyword_2; }
	}

	public class OffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Offset");
		private final Assignment cOffsetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOffsetINTTerminalRuleCall_0 = (RuleCall)cOffsetAssignment.eContents().get(0);
		
		//Offset:
		//	offset=INT;
		public ParserRule getRule() { return rule; }

		//offset=INT
		public Assignment getOffsetAssignment() { return cOffsetAssignment; }

		//INT
		public RuleCall getOffsetINTTerminalRuleCall_0() { return cOffsetINTTerminalRuleCall_0; }
	}

	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Limit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLimitAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cALLKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cL1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cL1INTTerminalRuleCall_1_0_0 = (RuleCall)cL1Assignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cL2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cL2IntegerValueParserRuleCall_1_1_1_0 = (RuleCall)cL2Assignment_1_1_1.eContents().get(0);
		
		//Limit:
		//	{Limit} "ALL" | l1=INT ("," l2=IntegerValue)?;
		public ParserRule getRule() { return rule; }

		//{Limit} "ALL" | l1=INT ("," l2=IntegerValue)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Limit} "ALL"
		public Group getGroup_0() { return cGroup_0; }

		//{Limit}
		public Action getLimitAction_0_0() { return cLimitAction_0_0; }

		//"ALL"
		public Keyword getALLKeyword_0_1() { return cALLKeyword_0_1; }

		//l1=INT ("," l2=IntegerValue)?
		public Group getGroup_1() { return cGroup_1; }

		//l1=INT
		public Assignment getL1Assignment_1_0() { return cL1Assignment_1_0; }

		//INT
		public RuleCall getL1INTTerminalRuleCall_1_0_0() { return cL1INTTerminalRuleCall_1_0_0; }

		//("," l2=IntegerValue)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//l2=IntegerValue
		public Assignment getL2Assignment_1_1_1() { return cL2Assignment_1_1_1; }

		//IntegerValue
		public RuleCall getL2IntegerValueParserRuleCall_1_1_1_0() { return cL2IntegerValueParserRuleCall_1_1_1_0; }
	}

	public class SelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpSelectSubSetParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//SelectQuery:
		//	Select op+=SelectSubSet*;
		public ParserRule getRule() { return rule; }

		//Select op+=SelectSubSet*
		public Group getGroup() { return cGroup; }

		//Select
		public RuleCall getSelectParserRuleCall_0() { return cSelectParserRuleCall_0; }

		//op+=SelectSubSet*
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//SelectSubSet
		public RuleCall getOpSelectSubSetParserRuleCall_1_0() { return cOpSelectSubSetParserRuleCall_1_0; }
	}

	public class SelectSubSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectSubSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpUNIONKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpINTERSECTKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpMINUSKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Keyword cOpEXCEPTKeyword_0_0_3 = (Keyword)cOpAlternatives_0_0.eContents().get(3);
		private final Assignment cAllAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAllALLKeyword_1_0 = (Keyword)cAllAssignment_1.eContents().get(0);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuerySelectParserRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		
		//SelectSubSet:
		//	op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT") all="ALL"? query=Select;
		public ParserRule getRule() { return rule; }

		//op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT") all="ALL"? query=Select
		public Group getGroup() { return cGroup; }

		//op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"UNION" | "INTERSECT" | "MINUS" | "EXCEPT"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"UNION"
		public Keyword getOpUNIONKeyword_0_0_0() { return cOpUNIONKeyword_0_0_0; }

		//"INTERSECT"
		public Keyword getOpINTERSECTKeyword_0_0_1() { return cOpINTERSECTKeyword_0_0_1; }

		//"MINUS"
		public Keyword getOpMINUSKeyword_0_0_2() { return cOpMINUSKeyword_0_0_2; }

		//"EXCEPT"
		public Keyword getOpEXCEPTKeyword_0_0_3() { return cOpEXCEPTKeyword_0_0_3; }

		//all="ALL"?
		public Assignment getAllAssignment_1() { return cAllAssignment_1; }

		//"ALL"
		public Keyword getAllALLKeyword_1_0() { return cAllALLKeyword_1_0; }

		//query=Select
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }

		//Select
		public RuleCall getQuerySelectParserRuleCall_2_0() { return cQuerySelectParserRuleCall_2_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSelectSELECTKeyword_0_0 = (Keyword)cSelectAssignment_0.eContents().get(0);
		private final Keyword cDISTINCTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTOPKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cSIGNED_DOUBLETerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Keyword cPERCENTKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cWITHTIESKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cColsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColsColumnsParserRuleCall_3_0 = (RuleCall)cColsAssignment_3.eContents().get(0);
		private final Keyword cFROMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTblAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTblTablesParserRuleCall_5_0 = (RuleCall)cTblAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWHEREKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cWhereExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cWhereExpressionFullExpressionParserRuleCall_6_1_0 = (RuleCall)cWhereExpressionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGROUPBYKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGroupByEntryAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGroupByEntryGroupByColumnsParserRuleCall_7_1_0 = (RuleCall)cGroupByEntryAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cHAVINGKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cHavingEntryAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cHavingEntryFullExpressionParserRuleCall_8_1_0 = (RuleCall)cHavingEntryAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cORDERBYKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOrderByEntryAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOrderByEntryOrderByColumnsParserRuleCall_9_1_0 = (RuleCall)cOrderByEntryAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLIMITKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cLimAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cLimLimitParserRuleCall_10_1_0 = (RuleCall)cLimAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cOFFSETKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cOffsetAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cOffsetOffsetParserRuleCall_11_1_0 = (RuleCall)cOffsetAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cFETCHFIRSTKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cFetchFirstAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cFetchFirstFetchFirstParserRuleCall_12_1_0 = (RuleCall)cFetchFirstAssignment_12_1.eContents().get(0);
		
		//Select:
		//	select="SELECT" "DISTINCT"? ("TOP" (INT | SIGNED_DOUBLE) "PERCENT"? "WITH TIES"?)? cols=Columns "FROM" tbl=Tables
		//	("WHERE" whereExpression=FullExpression)? ("GROUP BY" groupByEntry=GroupByColumns)? ("HAVING"
		//	havingEntry=FullExpression)? ("ORDER BY" orderByEntry=OrderByColumns)? ("LIMIT" lim=Limit)? ("OFFSET" offset=Offset)?
		//	("FETCH FIRST" fetchFirst=FetchFirst)?;
		public ParserRule getRule() { return rule; }

		//select="SELECT" "DISTINCT"? ("TOP" (INT | SIGNED_DOUBLE) "PERCENT"? "WITH TIES"?)? cols=Columns "FROM" tbl=Tables
		//("WHERE" whereExpression=FullExpression)? ("GROUP BY" groupByEntry=GroupByColumns)? ("HAVING"
		//havingEntry=FullExpression)? ("ORDER BY" orderByEntry=OrderByColumns)? ("LIMIT" lim=Limit)? ("OFFSET" offset=Offset)?
		//("FETCH FIRST" fetchFirst=FetchFirst)?
		public Group getGroup() { return cGroup; }

		//select="SELECT"
		public Assignment getSelectAssignment_0() { return cSelectAssignment_0; }

		//"SELECT"
		public Keyword getSelectSELECTKeyword_0_0() { return cSelectSELECTKeyword_0_0; }

		//"DISTINCT"?
		public Keyword getDISTINCTKeyword_1() { return cDISTINCTKeyword_1; }

		//("TOP" (INT | SIGNED_DOUBLE) "PERCENT"? "WITH TIES"?)?
		public Group getGroup_2() { return cGroup_2; }

		//"TOP"
		public Keyword getTOPKeyword_2_0() { return cTOPKeyword_2_0; }

		//INT | SIGNED_DOUBLE
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1_0() { return cINTTerminalRuleCall_2_1_0; }

		//SIGNED_DOUBLE
		public RuleCall getSIGNED_DOUBLETerminalRuleCall_2_1_1() { return cSIGNED_DOUBLETerminalRuleCall_2_1_1; }

		//"PERCENT"?
		public Keyword getPERCENTKeyword_2_2() { return cPERCENTKeyword_2_2; }

		//"WITH TIES"?
		public Keyword getWITHTIESKeyword_2_3() { return cWITHTIESKeyword_2_3; }

		//cols=Columns
		public Assignment getColsAssignment_3() { return cColsAssignment_3; }

		//Columns
		public RuleCall getColsColumnsParserRuleCall_3_0() { return cColsColumnsParserRuleCall_3_0; }

		//"FROM"
		public Keyword getFROMKeyword_4() { return cFROMKeyword_4; }

		//tbl=Tables
		public Assignment getTblAssignment_5() { return cTblAssignment_5; }

		//Tables
		public RuleCall getTblTablesParserRuleCall_5_0() { return cTblTablesParserRuleCall_5_0; }

		//("WHERE" whereExpression=FullExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//"WHERE"
		public Keyword getWHEREKeyword_6_0() { return cWHEREKeyword_6_0; }

		//whereExpression=FullExpression
		public Assignment getWhereExpressionAssignment_6_1() { return cWhereExpressionAssignment_6_1; }

		//FullExpression
		public RuleCall getWhereExpressionFullExpressionParserRuleCall_6_1_0() { return cWhereExpressionFullExpressionParserRuleCall_6_1_0; }

		//("GROUP BY" groupByEntry=GroupByColumns)?
		public Group getGroup_7() { return cGroup_7; }

		//"GROUP BY"
		public Keyword getGROUPBYKeyword_7_0() { return cGROUPBYKeyword_7_0; }

		//groupByEntry=GroupByColumns
		public Assignment getGroupByEntryAssignment_7_1() { return cGroupByEntryAssignment_7_1; }

		//GroupByColumns
		public RuleCall getGroupByEntryGroupByColumnsParserRuleCall_7_1_0() { return cGroupByEntryGroupByColumnsParserRuleCall_7_1_0; }

		//("HAVING" havingEntry=FullExpression)?
		public Group getGroup_8() { return cGroup_8; }

		//"HAVING"
		public Keyword getHAVINGKeyword_8_0() { return cHAVINGKeyword_8_0; }

		//havingEntry=FullExpression
		public Assignment getHavingEntryAssignment_8_1() { return cHavingEntryAssignment_8_1; }

		//FullExpression
		public RuleCall getHavingEntryFullExpressionParserRuleCall_8_1_0() { return cHavingEntryFullExpressionParserRuleCall_8_1_0; }

		//("ORDER BY" orderByEntry=OrderByColumns)?
		public Group getGroup_9() { return cGroup_9; }

		//"ORDER BY"
		public Keyword getORDERBYKeyword_9_0() { return cORDERBYKeyword_9_0; }

		//orderByEntry=OrderByColumns
		public Assignment getOrderByEntryAssignment_9_1() { return cOrderByEntryAssignment_9_1; }

		//OrderByColumns
		public RuleCall getOrderByEntryOrderByColumnsParserRuleCall_9_1_0() { return cOrderByEntryOrderByColumnsParserRuleCall_9_1_0; }

		//("LIMIT" lim=Limit)?
		public Group getGroup_10() { return cGroup_10; }

		//"LIMIT"
		public Keyword getLIMITKeyword_10_0() { return cLIMITKeyword_10_0; }

		//lim=Limit
		public Assignment getLimAssignment_10_1() { return cLimAssignment_10_1; }

		//Limit
		public RuleCall getLimLimitParserRuleCall_10_1_0() { return cLimLimitParserRuleCall_10_1_0; }

		//("OFFSET" offset=Offset)?
		public Group getGroup_11() { return cGroup_11; }

		//"OFFSET"
		public Keyword getOFFSETKeyword_11_0() { return cOFFSETKeyword_11_0; }

		//offset=Offset
		public Assignment getOffsetAssignment_11_1() { return cOffsetAssignment_11_1; }

		//Offset
		public RuleCall getOffsetOffsetParserRuleCall_11_1_0() { return cOffsetOffsetParserRuleCall_11_1_0; }

		//("FETCH FIRST" fetchFirst=FetchFirst)?
		public Group getGroup_12() { return cGroup_12; }

		//"FETCH FIRST"
		public Keyword getFETCHFIRSTKeyword_12_0() { return cFETCHFIRSTKeyword_12_0; }

		//fetchFirst=FetchFirst
		public Assignment getFetchFirstAssignment_12_1() { return cFetchFirstAssignment_12_1; }

		//FetchFirst
		public RuleCall getFetchFirstFetchFirstParserRuleCall_12_1_0() { return cFetchFirstFetchFirstParserRuleCall_12_1_0; }
	}

	public class ColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Columns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cColumnOrAliasParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesColumnOrAliasParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//Columns returns OrColumn:
		//	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
		public ParserRule getRule() { return rule; }

		//ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
		public Group getGroup() { return cGroup; }

		//ColumnOrAlias
		public RuleCall getColumnOrAliasParserRuleCall_0() { return cColumnOrAliasParserRuleCall_0; }

		//({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrColumn.entries+=current}
		public Action getOrColumnEntriesAction_1_0() { return cOrColumnEntriesAction_1_0; }

		//("," entries+=ColumnOrAlias)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=ColumnOrAlias
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ColumnOrAlias
		public RuleCall getEntriesColumnOrAliasParserRuleCall_1_1_1_0() { return cEntriesColumnOrAliasParserRuleCall_1_1_1_0; }
	}

	public class ColumnOrAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnOrAlias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCeOperandGroupParserRuleCall_0_0_0 = (RuleCall)cCeAssignment_0_0.eContents().get(0);
		private final Assignment cAliasAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cAliasASKeyword_0_1_0 = (Keyword)cAliasAssignment_0_1.eContents().get(0);
		private final Assignment cColAliasAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cColAliasDbObjectNameParserRuleCall_0_2_0 = (RuleCall)cColAliasAssignment_0_2.eContents().get(0);
		private final Assignment cAllColsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAllColsSTARTerminalRuleCall_1_0 = (RuleCall)cAllColsAssignment_1.eContents().get(0);
		private final Assignment cDbAllColsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDbAllColsDbObjectNameAllParserRuleCall_2_0 = (RuleCall)cDbAllColsAssignment_2.eContents().get(0);
		
		//ColumnOrAlias:
		//	ce=OperandGroup alias="AS"? colAlias=DbObjectName? | allCols=STAR | dbAllCols=DbObjectNameAll;
		public ParserRule getRule() { return rule; }

		//ce=OperandGroup alias="AS"? colAlias=DbObjectName? | allCols=STAR | dbAllCols=DbObjectNameAll
		public Alternatives getAlternatives() { return cAlternatives; }

		//ce=OperandGroup alias="AS"? colAlias=DbObjectName?
		public Group getGroup_0() { return cGroup_0; }

		//ce=OperandGroup
		public Assignment getCeAssignment_0_0() { return cCeAssignment_0_0; }

		//OperandGroup
		public RuleCall getCeOperandGroupParserRuleCall_0_0_0() { return cCeOperandGroupParserRuleCall_0_0_0; }

		//alias="AS"?
		public Assignment getAliasAssignment_0_1() { return cAliasAssignment_0_1; }

		//"AS"
		public Keyword getAliasASKeyword_0_1_0() { return cAliasASKeyword_0_1_0; }

		//colAlias=DbObjectName?
		public Assignment getColAliasAssignment_0_2() { return cColAliasAssignment_0_2; }

		//DbObjectName
		public RuleCall getColAliasDbObjectNameParserRuleCall_0_2_0() { return cColAliasDbObjectNameParserRuleCall_0_2_0; }

		//allCols=STAR
		public Assignment getAllColsAssignment_1() { return cAllColsAssignment_1; }

		//STAR
		public RuleCall getAllColsSTARTerminalRuleCall_1_0() { return cAllColsSTARTerminalRuleCall_1_0; }

		//dbAllCols=DbObjectNameAll
		public Assignment getDbAllColsAssignment_2() { return cDbAllColsAssignment_2; }

		//DbObjectNameAll
		public RuleCall getDbAllColsDbObjectNameAllParserRuleCall_2_0() { return cDbAllColsDbObjectNameAllParserRuleCall_2_0; }
	}

	public class ColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDbObjectNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cColEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesDbObjectNameParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//ColumnFull:
		//	DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?;
		public ParserRule getRule() { return rule; }

		//DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup() { return cGroup; }

		//DbObjectName
		public RuleCall getDbObjectNameParserRuleCall_0() { return cDbObjectNameParserRuleCall_0; }

		//({Col.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Col.entries+=current}
		public Action getColEntriesAction_1_0() { return cColEntriesAction_1_0; }

		//("." entries+=DbObjectName)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//entries+=DbObjectName
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//DbObjectName
		public RuleCall getEntriesDbObjectNameParserRuleCall_1_1_1_0() { return cEntriesDbObjectNameParserRuleCall_1_1_1_0; }
	}

	public class TablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFromTableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrTableEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesFromTableParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//Tables returns OrTable:
		//	FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?;
		public ParserRule getRule() { return rule; }

		//FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?
		public Group getGroup() { return cGroup; }

		//FromTable
		public RuleCall getFromTableParserRuleCall_0() { return cFromTableParserRuleCall_0; }

		//({OrTable.entries+=current} ("," entries+=FromTable)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrTable.entries+=current}
		public Action getOrTableEntriesAction_1_0() { return cOrTableEntriesAction_1_0; }

		//("," entries+=FromTable)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=FromTable
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//FromTable
		public RuleCall getEntriesFromTableParserRuleCall_1_1_1_0() { return cEntriesFromTableParserRuleCall_1_1_1_0; }
	}

	public class FromTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTableTableOrAliasParserRuleCall_0_0 = (RuleCall)cTableAssignment_0.eContents().get(0);
		private final Assignment cFjoinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFjoinFromTableJoinParserRuleCall_1_0 = (RuleCall)cFjoinAssignment_1.eContents().get(0);
		
		//FromTable:
		//	table=TableOrAlias fjoin+=FromTableJoin*;
		public ParserRule getRule() { return rule; }

		//table=TableOrAlias fjoin+=FromTableJoin*
		public Group getGroup() { return cGroup; }

		//table=TableOrAlias
		public Assignment getTableAssignment_0() { return cTableAssignment_0; }

		//TableOrAlias
		public RuleCall getTableTableOrAliasParserRuleCall_0_0() { return cTableTableOrAliasParserRuleCall_0_0; }

		//fjoin+=FromTableJoin*
		public Assignment getFjoinAssignment_1() { return cFjoinAssignment_1; }

		//FromTableJoin
		public RuleCall getFjoinFromTableJoinParserRuleCall_1_0() { return cFjoinFromTableJoinParserRuleCall_1_0; }
	}

	public class FromTableJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromTableJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJoinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJoinJoinTypeParserRuleCall_0_0 = (RuleCall)cJoinAssignment_0.eContents().get(0);
		private final Assignment cOnTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOnTableTableOrAliasParserRuleCall_1_0 = (RuleCall)cOnTableAssignment_1.eContents().get(0);
		private final Keyword cONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJoinExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinExprFullExpressionParserRuleCall_3_0 = (RuleCall)cJoinExprAssignment_3.eContents().get(0);
		
		//FromTableJoin:
		//	join=JoinType onTable=TableOrAlias "ON" joinExpr=FullExpression;
		public ParserRule getRule() { return rule; }

		//join=JoinType onTable=TableOrAlias "ON" joinExpr=FullExpression
		public Group getGroup() { return cGroup; }

		//join=JoinType
		public Assignment getJoinAssignment_0() { return cJoinAssignment_0; }

		//JoinType
		public RuleCall getJoinJoinTypeParserRuleCall_0_0() { return cJoinJoinTypeParserRuleCall_0_0; }

		//onTable=TableOrAlias
		public Assignment getOnTableAssignment_1() { return cOnTableAssignment_1; }

		//TableOrAlias
		public RuleCall getOnTableTableOrAliasParserRuleCall_1_0() { return cOnTableTableOrAliasParserRuleCall_1_0; }

		//"ON"
		public Keyword getONKeyword_2() { return cONKeyword_2; }

		//joinExpr=FullExpression
		public Assignment getJoinExprAssignment_3() { return cJoinExprAssignment_3; }

		//FullExpression
		public RuleCall getJoinExprFullExpressionParserRuleCall_3_0() { return cJoinExprFullExpressionParserRuleCall_3_0; }
	}

	public class TableOrAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableOrAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTfullAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTfullTableFullParserRuleCall_0_0_0 = (RuleCall)cTfullAssignment_0_0.eContents().get(0);
		private final Assignment cSqAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cSqSubQueryOperandParserRuleCall_0_1_0 = (RuleCall)cSqAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPivotAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPivotPivotTableParserRuleCall_1_0_0 = (RuleCall)cPivotAssignment_1_0.eContents().get(0);
		private final Assignment cUnpivotAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cUnpivotUnpivotTableParserRuleCall_1_1_0 = (RuleCall)cUnpivotAssignment_1_1.eContents().get(0);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAliasASKeyword_2_0 = (Keyword)cAliasAssignment_2.eContents().get(0);
		private final Assignment cTblAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTblAliasDbObjectNameParserRuleCall_3_0 = (RuleCall)cTblAliasAssignment_3.eContents().get(0);
		
		//TableOrAlias:
		//	(tfull=TableFull | sq=SubQueryOperand) (pivot=PivotTable | unpivot=UnpivotTable)? alias="AS"? tblAlias=DbObjectName?;
		public ParserRule getRule() { return rule; }

		//(tfull=TableFull | sq=SubQueryOperand) (pivot=PivotTable | unpivot=UnpivotTable)? alias="AS"? tblAlias=DbObjectName?
		public Group getGroup() { return cGroup; }

		//tfull=TableFull | sq=SubQueryOperand
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//tfull=TableFull
		public Assignment getTfullAssignment_0_0() { return cTfullAssignment_0_0; }

		//TableFull
		public RuleCall getTfullTableFullParserRuleCall_0_0_0() { return cTfullTableFullParserRuleCall_0_0_0; }

		//sq=SubQueryOperand
		public Assignment getSqAssignment_0_1() { return cSqAssignment_0_1; }

		//SubQueryOperand
		public RuleCall getSqSubQueryOperandParserRuleCall_0_1_0() { return cSqSubQueryOperandParserRuleCall_0_1_0; }

		//(pivot=PivotTable | unpivot=UnpivotTable)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//pivot=PivotTable
		public Assignment getPivotAssignment_1_0() { return cPivotAssignment_1_0; }

		//PivotTable
		public RuleCall getPivotPivotTableParserRuleCall_1_0_0() { return cPivotPivotTableParserRuleCall_1_0_0; }

		//unpivot=UnpivotTable
		public Assignment getUnpivotAssignment_1_1() { return cUnpivotAssignment_1_1; }

		//UnpivotTable
		public RuleCall getUnpivotUnpivotTableParserRuleCall_1_1_0() { return cUnpivotUnpivotTableParserRuleCall_1_1_0; }

		//alias="AS"?
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }

		//"AS"
		public Keyword getAliasASKeyword_2_0() { return cAliasASKeyword_2_0; }

		//tblAlias=DbObjectName?
		public Assignment getTblAliasAssignment_3() { return cTblAliasAssignment_3; }

		//DbObjectName
		public RuleCall getTblAliasDbObjectNameParserRuleCall_3_0() { return cTblAliasDbObjectNameParserRuleCall_3_0; }
	}

	public class PivotTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPIVOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cXMLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPfunAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPfunPivotFunctionsParserRuleCall_3_0 = (RuleCall)cPfunAssignment_3.eContents().get(0);
		private final Assignment cPforAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPforPivotForClauseParserRuleCall_4_0 = (RuleCall)cPforAssignment_4.eContents().get(0);
		private final Assignment cPinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPinPivotInClauseParserRuleCall_5_0 = (RuleCall)cPinAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PivotTable:
		//	"PIVOT" "XML"? "(" pfun=PivotFunctions pfor=PivotForClause pin=PivotInClause ")";
		public ParserRule getRule() { return rule; }

		//"PIVOT" "XML"? "(" pfun=PivotFunctions pfor=PivotForClause pin=PivotInClause ")"
		public Group getGroup() { return cGroup; }

		//"PIVOT"
		public Keyword getPIVOTKeyword_0() { return cPIVOTKeyword_0; }

		//"XML"?
		public Keyword getXMLKeyword_1() { return cXMLKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//pfun=PivotFunctions
		public Assignment getPfunAssignment_3() { return cPfunAssignment_3; }

		//PivotFunctions
		public RuleCall getPfunPivotFunctionsParserRuleCall_3_0() { return cPfunPivotFunctionsParserRuleCall_3_0; }

		//pfor=PivotForClause
		public Assignment getPforAssignment_4() { return cPforAssignment_4; }

		//PivotForClause
		public RuleCall getPforPivotForClauseParserRuleCall_4_0() { return cPforPivotForClauseParserRuleCall_4_0; }

		//pin=PivotInClause
		public Assignment getPinAssignment_5() { return cPinAssignment_5; }

		//PivotInClause
		public RuleCall getPinPivotInClauseParserRuleCall_5_0() { return cPinPivotInClauseParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class PivotFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotFunctions");
		private final Assignment cAbcAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAbcIDTerminalRuleCall_0 = (RuleCall)cAbcAssignment.eContents().get(0);
		
		//PivotFunctions:
		//	abc= // PivotFunction ({pfnct.entries+=current} ("," entries+=PivotFunction)+)?;
		//	ID;
		public ParserRule getRule() { return rule; }

		//abc= // PivotFunction ({pfnct.entries+=current} ("," entries+=PivotFunction)+)?;
		//ID
		public Assignment getAbcAssignment() { return cAbcAssignment; }

		//// PivotFunction ({pfnct.entries+=current} ("," entries+=PivotFunction)+)?;
		//ID
		public RuleCall getAbcIDTerminalRuleCall_0() { return cAbcIDTerminalRuleCall_0; }
	}

	public class PivotFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPivotColParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cASKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PivotFunction:
		//	ID "(" PivotCol ")" "AS"? ID;
		public ParserRule getRule() { return rule; }

		//ID "(" PivotCol ")" "AS"? ID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//PivotCol
		public RuleCall getPivotColParserRuleCall_2() { return cPivotColParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"AS"?
		public Keyword getASKeyword_4() { return cASKeyword_4; }

		//ID
		public RuleCall getIDTerminalRuleCall_5() { return cIDTerminalRuleCall_5; }
	}

	public class PivotInClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotInClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSqAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSqSubQueryOperandParserRuleCall_2_0_0 = (RuleCall)cSqAssignment_2_0.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgsUnpivotInClauseArgsParserRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Assignment cPinanyAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cPinanyPivotInClauseAnyParserRuleCall_2_2_0 = (RuleCall)cPinanyAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PivotInClause:
		//	"IN" "(" (sq=SubQueryOperand | args=UnpivotInClauseArgs | pinany=PivotInClauseAny) ")";
		public ParserRule getRule() { return rule; }

		//"IN" "(" (sq=SubQueryOperand | args=UnpivotInClauseArgs | pinany=PivotInClauseAny) ")"
		public Group getGroup() { return cGroup; }

		//"IN"
		public Keyword getINKeyword_0() { return cINKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//sq=SubQueryOperand | args=UnpivotInClauseArgs | pinany=PivotInClauseAny
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//sq=SubQueryOperand
		public Assignment getSqAssignment_2_0() { return cSqAssignment_2_0; }

		//SubQueryOperand
		public RuleCall getSqSubQueryOperandParserRuleCall_2_0_0() { return cSqSubQueryOperandParserRuleCall_2_0_0; }

		//args=UnpivotInClauseArgs
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }

		//UnpivotInClauseArgs
		public RuleCall getArgsUnpivotInClauseArgsParserRuleCall_2_1_0() { return cArgsUnpivotInClauseArgsParserRuleCall_2_1_0; }

		//pinany=PivotInClauseAny
		public Assignment getPinanyAssignment_2_2() { return cPinanyAssignment_2_2; }

		//PivotInClauseAny
		public RuleCall getPinanyPivotInClauseAnyParserRuleCall_2_2_0() { return cPinanyPivotInClauseAnyParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PivotInClauseAnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotInClauseAny");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cANYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cANYKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//PivotInClauseAny:
		//	"ANY" ("," "ANY")?;
		public ParserRule getRule() { return rule; }

		//"ANY" ("," "ANY")?
		public Group getGroup() { return cGroup; }

		//"ANY"
		public Keyword getANYKeyword_0() { return cANYKeyword_0; }

		//("," "ANY")?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//"ANY"
		public Keyword getANYKeyword_1_1() { return cANYKeyword_1_1; }
	}

	public class UnpivotTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnpivotTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUNPIVOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cINCLUDEKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cEXCLUDEKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cNULLSKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPcolsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPcolsPivotColumnsParserRuleCall_3_0 = (RuleCall)cPcolsAssignment_3.eContents().get(0);
		private final Assignment cPforAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPforPivotForClauseParserRuleCall_4_0 = (RuleCall)cPforAssignment_4.eContents().get(0);
		private final Assignment cInopAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInopUnpivotInClauseParserRuleCall_5_0 = (RuleCall)cInopAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnpivotTable:
		//	"UNPIVOT" (("INCLUDE" | "EXCLUDE") "NULLS")? "(" pcols=PivotColumns pfor=PivotForClause inop=UnpivotInClause ")";
		public ParserRule getRule() { return rule; }

		//"UNPIVOT" (("INCLUDE" | "EXCLUDE") "NULLS")? "(" pcols=PivotColumns pfor=PivotForClause inop=UnpivotInClause ")"
		public Group getGroup() { return cGroup; }

		//"UNPIVOT"
		public Keyword getUNPIVOTKeyword_0() { return cUNPIVOTKeyword_0; }

		//(("INCLUDE" | "EXCLUDE") "NULLS")?
		public Group getGroup_1() { return cGroup_1; }

		//"INCLUDE" | "EXCLUDE"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"INCLUDE"
		public Keyword getINCLUDEKeyword_1_0_0() { return cINCLUDEKeyword_1_0_0; }

		//"EXCLUDE"
		public Keyword getEXCLUDEKeyword_1_0_1() { return cEXCLUDEKeyword_1_0_1; }

		//"NULLS"
		public Keyword getNULLSKeyword_1_1() { return cNULLSKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//pcols=PivotColumns
		public Assignment getPcolsAssignment_3() { return cPcolsAssignment_3; }

		//PivotColumns
		public RuleCall getPcolsPivotColumnsParserRuleCall_3_0() { return cPcolsPivotColumnsParserRuleCall_3_0; }

		//pfor=PivotForClause
		public Assignment getPforAssignment_4() { return cPforAssignment_4; }

		//PivotForClause
		public RuleCall getPforPivotForClauseParserRuleCall_4_0() { return cPforPivotForClauseParserRuleCall_4_0; }

		//inop=UnpivotInClause
		public Assignment getInopAssignment_5() { return cInopAssignment_5; }

		//UnpivotInClause
		public RuleCall getInopUnpivotInClauseParserRuleCall_5_0() { return cInopUnpivotInClauseParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class UnpivotInClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnpivotInClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnipivotInClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpINKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsUnpivotInClauseArgsParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnpivotInClause:
		//	{UnipivotInClause} op="IN" "(" args=UnpivotInClauseArgs ")";
		public ParserRule getRule() { return rule; }

		//{UnipivotInClause} op="IN" "(" args=UnpivotInClauseArgs ")"
		public Group getGroup() { return cGroup; }

		//{UnipivotInClause}
		public Action getUnipivotInClauseAction_0() { return cUnipivotInClauseAction_0; }

		//op="IN"
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"IN"
		public Keyword getOpINKeyword_1_0() { return cOpINKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//args=UnpivotInClauseArgs
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }

		//UnpivotInClauseArgs
		public RuleCall getArgsUnpivotInClauseArgsParserRuleCall_3_0() { return cArgsUnpivotInClauseArgsParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UnpivotInClauseArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnpivotInClauseArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnpivotInClauseArgParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUicargsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//UnpivotInClauseArgs:
		//	UnpivotInClauseArg ({uicargs.entries+=current} ("," entries+=UnpivotInClauseArg)+)?;
		public ParserRule getRule() { return rule; }

		//UnpivotInClauseArg ({uicargs.entries+=current} ("," entries+=UnpivotInClauseArg)+)?
		public Group getGroup() { return cGroup; }

		//UnpivotInClauseArg
		public RuleCall getUnpivotInClauseArgParserRuleCall_0() { return cUnpivotInClauseArgParserRuleCall_0; }

		//({uicargs.entries+=current} ("," entries+=UnpivotInClauseArg)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{uicargs.entries+=current}
		public Action getUicargsEntriesAction_1_0() { return cUicargsEntriesAction_1_0; }

		//("," entries+=UnpivotInClauseArg)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=UnpivotInClauseArg
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//UnpivotInClauseArg
		public RuleCall getEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0() { return cEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0; }
	}

	public class UnpivotInClauseArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnpivotInClauseArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPcolsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPcolsPivotColumnsParserRuleCall_0_0 = (RuleCall)cPcolsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCfulsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCfulsPivotColumnsParserRuleCall_1_1_0 = (RuleCall)cCfulsAssignment_1_1.eContents().get(0);
		
		//UnpivotInClauseArg:
		//	pcols=PivotColumns ("AS" cfuls=PivotColumns)?;
		public ParserRule getRule() { return rule; }

		//pcols=PivotColumns ("AS" cfuls=PivotColumns)?
		public Group getGroup() { return cGroup; }

		//pcols=PivotColumns
		public Assignment getPcolsAssignment_0() { return cPcolsAssignment_0; }

		//PivotColumns
		public RuleCall getPcolsPivotColumnsParserRuleCall_0_0() { return cPcolsPivotColumnsParserRuleCall_0_0; }

		//("AS" cfuls=PivotColumns)?
		public Group getGroup_1() { return cGroup_1; }

		//"AS"
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }

		//cfuls=PivotColumns
		public Assignment getCfulsAssignment_1_1() { return cCfulsAssignment_1_1; }

		//PivotColumns
		public RuleCall getCfulsPivotColumnsParserRuleCall_1_1_0() { return cCfulsPivotColumnsParserRuleCall_1_1_0; }
	}

	public class PivotForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cColumnFullParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cColumnsParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//PivotForClause:
		//	"FOR" (ColumnFull | "(" Columns ")");
		public ParserRule getRule() { return rule; }

		//"FOR" (ColumnFull | "(" Columns ")")
		public Group getGroup() { return cGroup; }

		//"FOR"
		public Keyword getFORKeyword_0() { return cFORKeyword_0; }

		//ColumnFull | "(" Columns ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ColumnFull
		public RuleCall getColumnFullParserRuleCall_1_0() { return cColumnFullParserRuleCall_1_0; }

		//"(" Columns ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//Columns
		public RuleCall getColumnsParserRuleCall_1_1_1() { return cColumnsParserRuleCall_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class PivotColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotColumns");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPivotColParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPivotColsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PivotColumns:
		//	PivotCol | "(" PivotCols ")";
		public ParserRule getRule() { return rule; }

		//PivotCol | "(" PivotCols ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PivotCol
		public RuleCall getPivotColParserRuleCall_0() { return cPivotColParserRuleCall_0; }

		//"(" PivotCols ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//PivotCols
		public RuleCall getPivotColsParserRuleCall_1_1() { return cPivotColsParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class PivotColsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotCols");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPivotColParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPvcsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesPivotColParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//PivotCols returns Pivots:
		//	PivotCol ({pvcs.entries+=current} ("," entries+=PivotCol)+)?;
		public ParserRule getRule() { return rule; }

		//PivotCol ({pvcs.entries+=current} ("," entries+=PivotCol)+)?
		public Group getGroup() { return cGroup; }

		//PivotCol
		public RuleCall getPivotColParserRuleCall_0() { return cPivotColParserRuleCall_0; }

		//({pvcs.entries+=current} ("," entries+=PivotCol)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{pvcs.entries+=current}
		public Action getPvcsEntriesAction_1_0() { return cPvcsEntriesAction_1_0; }

		//("," entries+=PivotCol)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=PivotCol
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//PivotCol
		public RuleCall getEntriesPivotColParserRuleCall_1_1_1_0() { return cEntriesPivotColParserRuleCall_1_1_1_0; }
	}

	public class PivotColElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PivotCol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDbObjectNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPcolsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesDbObjectNameParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//PivotCol:
		//	DbObjectName ({pcols.entries+=current} ("." entries+=DbObjectName)+)?;
		public ParserRule getRule() { return rule; }

		//DbObjectName ({pcols.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup() { return cGroup; }

		//DbObjectName
		public RuleCall getDbObjectNameParserRuleCall_0() { return cDbObjectNameParserRuleCall_0; }

		//({pcols.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{pcols.entries+=current}
		public Action getPcolsEntriesAction_1_0() { return cPcolsEntriesAction_1_0; }

		//("." entries+=DbObjectName)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//entries+=DbObjectName
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//DbObjectName
		public RuleCall getEntriesDbObjectNameParserRuleCall_1_1_1_0() { return cEntriesDbObjectNameParserRuleCall_1_1_1_0; }
	}

	public class TableFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDbObjectNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTblsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesDbObjectNameParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//TableFull:
		//	DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?;
		public ParserRule getRule() { return rule; }

		//DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup() { return cGroup; }

		//DbObjectName
		public RuleCall getDbObjectNameParserRuleCall_0() { return cDbObjectNameParserRuleCall_0; }

		//({tbls.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{tbls.entries+=current}
		public Action getTblsEntriesAction_1_0() { return cTblsEntriesAction_1_0; }

		//("." entries+=DbObjectName)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//entries+=DbObjectName
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//DbObjectName
		public RuleCall getEntriesDbObjectNameParserRuleCall_1_1_1_0() { return cEntriesDbObjectNameParserRuleCall_1_1_1_0; }
	}

	public class DbObjectNameAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DbObjectNameAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbnameDBIDParserRuleCall_0_0 = (RuleCall)cDbnameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DbObjectNameAll:
		//	dbname=DBID "." STAR;
		public ParserRule getRule() { return rule; }

		//dbname=DBID "." STAR
		public Group getGroup() { return cGroup; }

		//dbname=DBID
		public Assignment getDbnameAssignment_0() { return cDbnameAssignment_0; }

		//DBID
		public RuleCall getDbnameDBIDParserRuleCall_0_0() { return cDbnameDBIDParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_2() { return cSTARTerminalRuleCall_2; }
	}

	public class DbObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DbObjectName");
		private final Assignment cDbnameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDbnameDBIDParserRuleCall_0 = (RuleCall)cDbnameAssignment.eContents().get(0);
		
		//DbObjectName:
		//	dbname=DBID;
		public ParserRule getRule() { return rule; }

		//dbname=DBID
		public Assignment getDbnameAssignment() { return cDbnameAssignment; }

		//DBID
		public RuleCall getDbnameDBIDParserRuleCall_0() { return cDbnameDBIDParserRuleCall_0; }
	}

	public class OrderByColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrderByColumnFullParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrOrderByColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesOrderByColumnFullParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OrderByColumns returns OrOrderByColumn:
		//	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
		public ParserRule getRule() { return rule; }

		//OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
		public Group getGroup() { return cGroup; }

		//OrderByColumnFull
		public RuleCall getOrderByColumnFullParserRuleCall_0() { return cOrderByColumnFullParserRuleCall_0; }

		//({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrOrderByColumn.entries+=current}
		public Action getOrOrderByColumnEntriesAction_1_0() { return cOrOrderByColumnEntriesAction_1_0; }

		//("," entries+=OrderByColumnFull)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=OrderByColumnFull
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//OrderByColumnFull
		public RuleCall getEntriesOrderByColumnFullParserRuleCall_1_1_1_0() { return cEntriesOrderByColumnFullParserRuleCall_1_1_1_0; }
	}

	public class OrderByColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByColumnFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cColOrderAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cColOrderColumnFullParserRuleCall_0_0_0 = (RuleCall)cColOrderAssignment_0_0.eContents().get(0);
		private final Assignment cColOrderIntAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cColOrderIntUNSIGNEDTerminalRuleCall_0_1_0 = (RuleCall)cColOrderIntAssignment_0_1.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cDirectionAlternatives_1_0 = (Alternatives)cDirectionAssignment_1.eContents().get(0);
		private final Keyword cDirectionASCKeyword_1_0_0 = (Keyword)cDirectionAlternatives_1_0.eContents().get(0);
		private final Keyword cDirectionDESCKeyword_1_0_1 = (Keyword)cDirectionAlternatives_1_0.eContents().get(1);
		
		//OrderByColumnFull:
		//	(colOrder=ColumnFull | colOrderInt=UNSIGNED) direction=("ASC" | "DESC")?;
		public ParserRule getRule() { return rule; }

		//(colOrder=ColumnFull | colOrderInt=UNSIGNED) direction=("ASC" | "DESC")?
		public Group getGroup() { return cGroup; }

		//colOrder=ColumnFull | colOrderInt=UNSIGNED
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//colOrder=ColumnFull
		public Assignment getColOrderAssignment_0_0() { return cColOrderAssignment_0_0; }

		//ColumnFull
		public RuleCall getColOrderColumnFullParserRuleCall_0_0_0() { return cColOrderColumnFullParserRuleCall_0_0_0; }

		//colOrderInt=UNSIGNED
		public Assignment getColOrderIntAssignment_0_1() { return cColOrderIntAssignment_0_1; }

		//UNSIGNED
		public RuleCall getColOrderIntUNSIGNEDTerminalRuleCall_0_1_0() { return cColOrderIntUNSIGNEDTerminalRuleCall_0_1_0; }

		//direction=("ASC" | "DESC")?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//"ASC" | "DESC"
		public Alternatives getDirectionAlternatives_1_0() { return cDirectionAlternatives_1_0; }

		//"ASC"
		public Keyword getDirectionASCKeyword_1_0_0() { return cDirectionASCKeyword_1_0_0; }

		//"DESC"
		public Keyword getDirectionDESCKeyword_1_0_1() { return cDirectionDESCKeyword_1_0_1; }
	}

	public class GroupByColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGroupByColumnFullParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrGroupByColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesGroupByColumnFullParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//GroupByColumns returns OrGroupByColumn:
		//	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
		public ParserRule getRule() { return rule; }

		//GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
		public Group getGroup() { return cGroup; }

		//GroupByColumnFull
		public RuleCall getGroupByColumnFullParserRuleCall_0() { return cGroupByColumnFullParserRuleCall_0; }

		//({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrGroupByColumn.entries+=current}
		public Action getOrGroupByColumnEntriesAction_1_0() { return cOrGroupByColumnEntriesAction_1_0; }

		//("," entries+=GroupByColumnFull)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=GroupByColumnFull
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//GroupByColumnFull
		public RuleCall getEntriesGroupByColumnFullParserRuleCall_1_1_1_0() { return cEntriesGroupByColumnFullParserRuleCall_1_1_1_0; }
	}

	public class GroupByColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByColumnFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cColGrByAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cColGrByColumnFullParserRuleCall_0_0 = (RuleCall)cColGrByAssignment_0.eContents().get(0);
		private final Assignment cGbFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cGbFunctionOperandFunctionParserRuleCall_1_0 = (RuleCall)cGbFunctionAssignment_1.eContents().get(0);
		private final Assignment cGrByIntAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGrByIntUNSIGNEDTerminalRuleCall_2_0 = (RuleCall)cGrByIntAssignment_2.eContents().get(0);
		
		//GroupByColumnFull:
		//	colGrBy=ColumnFull | gbFunction=OperandFunction | grByInt=UNSIGNED;
		public ParserRule getRule() { return rule; }

		//colGrBy=ColumnFull | gbFunction=OperandFunction | grByInt=UNSIGNED
		public Alternatives getAlternatives() { return cAlternatives; }

		//colGrBy=ColumnFull
		public Assignment getColGrByAssignment_0() { return cColGrByAssignment_0; }

		//ColumnFull
		public RuleCall getColGrByColumnFullParserRuleCall_0_0() { return cColGrByColumnFullParserRuleCall_0_0; }

		//gbFunction=OperandFunction
		public Assignment getGbFunctionAssignment_1() { return cGbFunctionAssignment_1; }

		//OperandFunction
		public RuleCall getGbFunctionOperandFunctionParserRuleCall_1_0() { return cGbFunctionOperandFunctionParserRuleCall_1_0; }

		//grByInt=UNSIGNED
		public Assignment getGrByIntAssignment_2() { return cGrByIntAssignment_2; }

		//UNSIGNED
		public RuleCall getGrByIntUNSIGNEDTerminalRuleCall_2_0() { return cGrByIntUNSIGNEDTerminalRuleCall_2_0; }
	}

	public class FullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionFragmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExprEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEntriesExpressionFragmentSecondParserRuleCall_1_1_0 = (RuleCall)cEntriesAssignment_1_1.eContents().get(0);
		
		//FullExpression returns OrExpr:
		//	ExpressionFragment ({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?;
		public ParserRule getRule() { return rule; }

		//ExpressionFragment ({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?
		public Group getGroup() { return cGroup; }

		//ExpressionFragment
		public RuleCall getExpressionFragmentParserRuleCall_0() { return cExpressionFragmentParserRuleCall_0; }

		//({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpr.entries+=current}
		public Action getOrExprEntriesAction_1_0() { return cOrExprEntriesAction_1_0; }

		//entries+=ExpressionFragmentSecond+
		public Assignment getEntriesAssignment_1_1() { return cEntriesAssignment_1_1; }

		//ExpressionFragmentSecond
		public RuleCall getEntriesExpressionFragmentSecondParserRuleCall_1_1_0() { return cEntriesExpressionFragmentSecondParserRuleCall_1_1_0; }
	}

	public class ExpressionFragmentSecondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionFragmentSecond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cCAlternatives_0_0_0 = (Alternatives)cCAssignment_0_0.eContents().get(0);
		private final Keyword cCANDKeyword_0_0_0_0 = (Keyword)cCAlternatives_0_0_0.eContents().get(0);
		private final Keyword cCORKeyword_0_0_0_1 = (Keyword)cCAlternatives_0_0_0.eContents().get(1);
		private final Assignment cEfragAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEfragExpressionFragmentParserRuleCall_0_1_0 = (RuleCall)cEfragAssignment_0_1.eContents().get(0);
		private final Assignment cNotPrmAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNotPrmJRNPARAMTerminalRuleCall_1_0 = (RuleCall)cNotPrmAssignment_1.eContents().get(0);
		
		//ExpressionFragmentSecond returns FullExpression:
		//	c=("AND" | "OR") efrag=ExpressionFragment | notPrm=JRNPARAM;
		public ParserRule getRule() { return rule; }

		//c=("AND" | "OR") efrag=ExpressionFragment | notPrm=JRNPARAM
		public Alternatives getAlternatives() { return cAlternatives; }

		//c=("AND" | "OR") efrag=ExpressionFragment
		public Group getGroup_0() { return cGroup_0; }

		//c=("AND" | "OR")
		public Assignment getCAssignment_0_0() { return cCAssignment_0_0; }

		//"AND" | "OR"
		public Alternatives getCAlternatives_0_0_0() { return cCAlternatives_0_0_0; }

		//"AND"
		public Keyword getCANDKeyword_0_0_0_0() { return cCANDKeyword_0_0_0_0; }

		//"OR"
		public Keyword getCORKeyword_0_0_0_1() { return cCORKeyword_0_0_0_1; }

		//efrag=ExpressionFragment
		public Assignment getEfragAssignment_0_1() { return cEfragAssignment_0_1; }

		//ExpressionFragment
		public RuleCall getEfragExpressionFragmentParserRuleCall_0_1_0() { return cEfragExpressionFragmentParserRuleCall_0_1_0; }

		//notPrm=JRNPARAM
		public Assignment getNotPrmAssignment_1() { return cNotPrmAssignment_1; }

		//JRNPARAM
		public RuleCall getNotPrmJRNPARAMTerminalRuleCall_1_0() { return cNotPrmJRNPARAMTerminalRuleCall_1_0; }
	}

	public class ExpressionFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpgroupAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpgroupExpressionGroupParserRuleCall_0_0 = (RuleCall)cExpgroupAssignment_0.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Assignment cXexpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cXexpAlternatives_2_0 = (Alternatives)cXexpAssignment_2.eContents().get(0);
		private final RuleCall cXexpXExpressionParserRuleCall_2_0_0 = (RuleCall)cXexpAlternatives_2_0.eContents().get(0);
		private final RuleCall cXexpXExpression_ParserRuleCall_2_0_1 = (RuleCall)cXexpAlternatives_2_0.eContents().get(1);
		private final Assignment cNotPrmAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNotPrmJRNPARAMTerminalRuleCall_3_0 = (RuleCall)cNotPrmAssignment_3.eContents().get(0);
		private final Assignment cInAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cInInOperatorParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);
		private final Assignment cExistsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cExistsExistsOperatorParserRuleCall_5_0 = (RuleCall)cExistsAssignment_5.eContents().get(0);
		
		//ExpressionFragment returns FullExpression:
		//	expgroup=ExpressionGroup | exp=Expression | xexp=(XExpression | XExpression_) | notPrm=JRNPARAM | in=InOperator |
		//	exists=ExistsOperator;
		public ParserRule getRule() { return rule; }

		//expgroup=ExpressionGroup | exp=Expression | xexp=(XExpression | XExpression_) | notPrm=JRNPARAM | in=InOperator |
		//exists=ExistsOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//expgroup=ExpressionGroup
		public Assignment getExpgroupAssignment_0() { return cExpgroupAssignment_0; }

		//ExpressionGroup
		public RuleCall getExpgroupExpressionGroupParserRuleCall_0_0() { return cExpgroupExpressionGroupParserRuleCall_0_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }

		//xexp=(XExpression | XExpression_)
		public Assignment getXexpAssignment_2() { return cXexpAssignment_2; }

		//XExpression | XExpression_
		public Alternatives getXexpAlternatives_2_0() { return cXexpAlternatives_2_0; }

		//XExpression
		public RuleCall getXexpXExpressionParserRuleCall_2_0_0() { return cXexpXExpressionParserRuleCall_2_0_0; }

		//XExpression_
		public RuleCall getXexpXExpression_ParserRuleCall_2_0_1() { return cXexpXExpression_ParserRuleCall_2_0_1; }

		//notPrm=JRNPARAM
		public Assignment getNotPrmAssignment_3() { return cNotPrmAssignment_3; }

		//JRNPARAM
		public RuleCall getNotPrmJRNPARAMTerminalRuleCall_3_0() { return cNotPrmJRNPARAMTerminalRuleCall_3_0; }

		//in=InOperator
		public Assignment getInAssignment_4() { return cInAssignment_4; }

		//InOperator
		public RuleCall getInInOperatorParserRuleCall_4_0() { return cInInOperatorParserRuleCall_4_0; }

		//exists=ExistsOperator
		public Assignment getExistsAssignment_5() { return cExistsAssignment_5; }

		//ExistsOperator
		public RuleCall getExistsExistsOperatorParserRuleCall_5_0() { return cExistsExistsOperatorParserRuleCall_5_0; }
	}

	public class ExpressionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsnotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIsnotAlternatives_1_0 = (Alternatives)cIsnotAssignment_1.eContents().get(0);
		private final Keyword cIsnotNOTKeyword_1_0_0 = (Keyword)cIsnotAlternatives_1_0.eContents().get(0);
		private final Keyword cIsnotNOTKeyword_1_0_1 = (Keyword)cIsnotAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprFullExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExpressionGroup returns ExprGroup:
		//	{ExprGroup} isnot=("NOT " | "NOT\n")? "(" expr=FullExpression ")";
		public ParserRule getRule() { return rule; }

		//{ExprGroup} isnot=("NOT " | "NOT\n")? "(" expr=FullExpression ")"
		public Group getGroup() { return cGroup; }

		//{ExprGroup}
		public Action getExprGroupAction_0() { return cExprGroupAction_0; }

		//isnot=("NOT " | "NOT\n")?
		public Assignment getIsnotAssignment_1() { return cIsnotAssignment_1; }

		//"NOT " | "NOT\n"
		public Alternatives getIsnotAlternatives_1_0() { return cIsnotAlternatives_1_0; }

		//"NOT "
		public Keyword getIsnotNOTKeyword_1_0_0() { return cIsnotNOTKeyword_1_0_0; }

		//"NOT\n"
		public Keyword getIsnotNOTKeyword_1_0_1() { return cIsnotNOTKeyword_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expr=FullExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//FullExpression
		public RuleCall getExprFullExpressionParserRuleCall_3_0() { return cExprFullExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cXExprAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXfXFunctionEnumRuleCall_3_0 = (RuleCall)cXfAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColOperandGroupParserRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPrmAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPrmXExpressionParamsParserRuleCall_6_1_0 = (RuleCall)cPrmAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XExpression returns XExpr:
		//	"$X" {XExpr} "{" xf=XFunction "," col=OperandGroup ("," prm=XExpressionParams)? "}";
		public ParserRule getRule() { return rule; }

		//"$X" {XExpr} "{" xf=XFunction "," col=OperandGroup ("," prm=XExpressionParams)? "}"
		public Group getGroup() { return cGroup; }

		//"$X"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//{XExpr}
		public Action getXExprAction_1() { return cXExprAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//xf=XFunction
		public Assignment getXfAssignment_3() { return cXfAssignment_3; }

		//XFunction
		public RuleCall getXfXFunctionEnumRuleCall_3_0() { return cXfXFunctionEnumRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//col=OperandGroup
		public Assignment getColAssignment_5() { return cColAssignment_5; }

		//OperandGroup
		public RuleCall getColOperandGroupParserRuleCall_5_0() { return cColOperandGroupParserRuleCall_5_0; }

		//("," prm=XExpressionParams)?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//prm=XExpressionParams
		public Assignment getPrmAssignment_6_1() { return cPrmAssignment_6_1; }

		//XExpressionParams
		public RuleCall getPrmXExpressionParamsParserRuleCall_6_1_0() { return cPrmXExpressionParamsParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class XExpression_Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression_");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cXExprAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXfXFunctionEnumRuleCall_3_0 = (RuleCall)cXfAssignment_3.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColOperandGroupParserRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVerticalLineKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPrmAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPrmXExpressionParamsParserRuleCall_6_1_0 = (RuleCall)cPrmAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XExpression_ returns XExpr:
		//	"$X" {XExpr} "{" xf=XFunction "|" col=OperandGroup ("|" prm=XExpressionParams)? "}";
		public ParserRule getRule() { return rule; }

		//"$X" {XExpr} "{" xf=XFunction "|" col=OperandGroup ("|" prm=XExpressionParams)? "}"
		public Group getGroup() { return cGroup; }

		//"$X"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//{XExpr}
		public Action getXExprAction_1() { return cXExprAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//xf=XFunction
		public Assignment getXfAssignment_3() { return cXfAssignment_3; }

		//XFunction
		public RuleCall getXfXFunctionEnumRuleCall_3_0() { return cXfXFunctionEnumRuleCall_3_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }

		//col=OperandGroup
		public Assignment getColAssignment_5() { return cColAssignment_5; }

		//OperandGroup
		public RuleCall getColOperandGroupParserRuleCall_5_0() { return cColOperandGroupParserRuleCall_5_0; }

		//("|" prm=XExpressionParams)?
		public Group getGroup_6() { return cGroup_6; }

		//"|"
		public Keyword getVerticalLineKeyword_6_0() { return cVerticalLineKeyword_6_0; }

		//prm=XExpressionParams
		public Assignment getPrmAssignment_6_1() { return cPrmAssignment_6_1; }

		//XExpressionParams
		public RuleCall getPrmXExpressionParamsParserRuleCall_6_1_0() { return cPrmXExpressionParamsParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class XExpressionParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJRParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrmsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesJRParameterParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//XExpressionParams returns Prms:
		//	JRParameter ({Prms.entries+=current} ("," entries+=JRParameter)+)?;
		public ParserRule getRule() { return rule; }

		//JRParameter ({Prms.entries+=current} ("," entries+=JRParameter)+)?
		public Group getGroup() { return cGroup; }

		//JRParameter
		public RuleCall getJRParameterParserRuleCall_0() { return cJRParameterParserRuleCall_0; }

		//({Prms.entries+=current} ("," entries+=JRParameter)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Prms.entries+=current}
		public Action getPrmsEntriesAction_1_0() { return cPrmsEntriesAction_1_0; }

		//("," entries+=JRParameter)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=JRParameter
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//JRParameter
		public RuleCall getEntriesJRParameterParserRuleCall_1_1_1_0() { return cEntriesJRParameterParserRuleCall_1_1_1_0; }
	}

	public class JRParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JRParameter");
		private final Assignment cJrprmAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJrprmIDTerminalRuleCall_0 = (RuleCall)cJrprmAssignment.eContents().get(0);
		
		//JRParameter:
		//	jrprm=ID;
		public ParserRule getRule() { return rule; }

		//jrprm=ID
		public Assignment getJrprmAssignment() { return cJrprmAssignment; }

		//ID
		public RuleCall getJrprmIDTerminalRuleCall_0() { return cJrprmIDTerminalRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1OperandParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsnullAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cIsnullAlternatives_1_0_0 = (Alternatives)cIsnullAssignment_1_0.eContents().get(0);
		private final Keyword cIsnullISNULLKeyword_1_0_0_0 = (Keyword)cIsnullAlternatives_1_0_0.eContents().get(0);
		private final Keyword cIsnullISNOTNULLKeyword_1_0_0_1 = (Keyword)cIsnullAlternatives_1_0_0.eContents().get(1);
		private final Assignment cInAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInInOperatorParserRuleCall_1_1_0 = (RuleCall)cInAssignment_1_1.eContents().get(0);
		private final Assignment cExistsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cExistsExistsOperatorParserRuleCall_1_2_0 = (RuleCall)cExistsAssignment_1_2.eContents().get(0);
		private final Assignment cBetweenAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cBetweenBetweenParserRuleCall_1_3_0 = (RuleCall)cBetweenAssignment_1_3.eContents().get(0);
		private final Assignment cLikeAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cLikeLikeParserRuleCall_1_4_0 = (RuleCall)cLikeAssignment_1_4.eContents().get(0);
		private final Assignment cCompAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cCompComparisonParserRuleCall_1_5_0 = (RuleCall)cCompAssignment_1_5.eContents().get(0);
		
		//Expression returns FullExpression:
		//	op1=Operand (isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | exists=ExistsOperator | between=Between | like=Like
		//	| comp=Comparison);
		public ParserRule getRule() { return rule; }

		//op1=Operand (isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | exists=ExistsOperator | between=Between | like=Like |
		//comp=Comparison)
		public Group getGroup() { return cGroup; }

		//op1=Operand
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }

		//Operand
		public RuleCall getOp1OperandParserRuleCall_0_0() { return cOp1OperandParserRuleCall_0_0; }

		//isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | exists=ExistsOperator | between=Between | like=Like |
		//comp=Comparison
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isnull=("IS NULL" | "IS NOT NULL")
		public Assignment getIsnullAssignment_1_0() { return cIsnullAssignment_1_0; }

		//"IS NULL" | "IS NOT NULL"
		public Alternatives getIsnullAlternatives_1_0_0() { return cIsnullAlternatives_1_0_0; }

		//"IS NULL"
		public Keyword getIsnullISNULLKeyword_1_0_0_0() { return cIsnullISNULLKeyword_1_0_0_0; }

		//"IS NOT NULL"
		public Keyword getIsnullISNOTNULLKeyword_1_0_0_1() { return cIsnullISNOTNULLKeyword_1_0_0_1; }

		//in=InOperator
		public Assignment getInAssignment_1_1() { return cInAssignment_1_1; }

		//InOperator
		public RuleCall getInInOperatorParserRuleCall_1_1_0() { return cInInOperatorParserRuleCall_1_1_0; }

		//exists=ExistsOperator
		public Assignment getExistsAssignment_1_2() { return cExistsAssignment_1_2; }

		//ExistsOperator
		public RuleCall getExistsExistsOperatorParserRuleCall_1_2_0() { return cExistsExistsOperatorParserRuleCall_1_2_0; }

		//between=Between
		public Assignment getBetweenAssignment_1_3() { return cBetweenAssignment_1_3; }

		//Between
		public RuleCall getBetweenBetweenParserRuleCall_1_3_0() { return cBetweenBetweenParserRuleCall_1_3_0; }

		//like=Like
		public Assignment getLikeAssignment_1_4() { return cLikeAssignment_1_4; }

		//Like
		public RuleCall getLikeLikeParserRuleCall_1_4_0() { return cLikeLikeParserRuleCall_1_4_0; }

		//comp=Comparison
		public Assignment getCompAssignment_1_5() { return cCompAssignment_1_5; }

		//Comparison
		public RuleCall getCompComparisonParserRuleCall_1_5_0() { return cCompComparisonParserRuleCall_1_5_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_0_0_2 = (Keyword)cOperatorAlternatives_0_0.eContents().get(2);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_0_0_3 = (Keyword)cOperatorAlternatives_0_0.eContents().get(3);
		private final Keyword cOperatorEqualsSignKeyword_0_0_4 = (Keyword)cOperatorAlternatives_0_0.eContents().get(4);
		private final Keyword cOperatorLessThanSignGreaterThanSignKeyword_0_0_5 = (Keyword)cOperatorAlternatives_0_0.eContents().get(5);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_0_0_6 = (Keyword)cOperatorAlternatives_0_0.eContents().get(6);
		private final Keyword cOperatorCircumflexAccentEqualsSignKeyword_0_0_7 = (Keyword)cOperatorAlternatives_0_0.eContents().get(7);
		private final Assignment cSubOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSubOperatorAlternatives_1_0 = (Alternatives)cSubOperatorAssignment_1.eContents().get(0);
		private final Keyword cSubOperatorANYKeyword_1_0_0 = (Keyword)cSubOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cSubOperatorALLKeyword_1_0_1 = (Keyword)cSubOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cSubOperatorSOMEKeyword_1_0_2 = (Keyword)cSubOperatorAlternatives_1_0.eContents().get(2);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2OperandParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//Comparison:
		//	operator=(">" | ">=" | "<" | "<=" | "=" | "<>" | "!=" | "^=") subOperator=("ANY" | "ALL" | "SOME")? op2=Operand;
		public ParserRule getRule() { return rule; }

		//operator=(">" | ">=" | "<" | "<=" | "=" | "<>" | "!=" | "^=") subOperator=("ANY" | "ALL" | "SOME")? op2=Operand
		public Group getGroup() { return cGroup; }

		//operator=(">" | ">=" | "<" | "<=" | "=" | "<>" | "!=" | "^=")
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//">" | ">=" | "<" | "<=" | "=" | "<>" | "!=" | "^="
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_0_0_0() { return cOperatorGreaterThanSignKeyword_0_0_0; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_0_0_1() { return cOperatorGreaterThanSignEqualsSignKeyword_0_0_1; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_0_0_2() { return cOperatorLessThanSignKeyword_0_0_2; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_0_0_3() { return cOperatorLessThanSignEqualsSignKeyword_0_0_3; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_0_0_4() { return cOperatorEqualsSignKeyword_0_0_4; }

		//"<>"
		public Keyword getOperatorLessThanSignGreaterThanSignKeyword_0_0_5() { return cOperatorLessThanSignGreaterThanSignKeyword_0_0_5; }

		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_0_0_6() { return cOperatorExclamationMarkEqualsSignKeyword_0_0_6; }

		//"^="
		public Keyword getOperatorCircumflexAccentEqualsSignKeyword_0_0_7() { return cOperatorCircumflexAccentEqualsSignKeyword_0_0_7; }

		//subOperator=("ANY" | "ALL" | "SOME")?
		public Assignment getSubOperatorAssignment_1() { return cSubOperatorAssignment_1; }

		//"ANY" | "ALL" | "SOME"
		public Alternatives getSubOperatorAlternatives_1_0() { return cSubOperatorAlternatives_1_0; }

		//"ANY"
		public Keyword getSubOperatorANYKeyword_1_0_0() { return cSubOperatorANYKeyword_1_0_0; }

		//"ALL"
		public Keyword getSubOperatorALLKeyword_1_0_1() { return cSubOperatorALLKeyword_1_0_1; }

		//"SOME"
		public Keyword getSubOperatorSOMEKeyword_1_0_2() { return cSubOperatorSOMEKeyword_1_0_2; }

		//op2=Operand
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }

		//Operand
		public RuleCall getOp2OperandParserRuleCall_2_0() { return cOp2OperandParserRuleCall_2_0; }
	}

	public class LikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Like");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpLikeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpLikeAlternatives_0_0 = (Alternatives)cOpLikeAssignment_0.eContents().get(0);
		private final Keyword cOpLikeLIKEKeyword_0_0_0 = (Keyword)cOpLikeAlternatives_0_0.eContents().get(0);
		private final Keyword cOpLikeNOTLIKEKeyword_0_0_1 = (Keyword)cOpLikeAlternatives_0_0.eContents().get(1);
		private final Assignment cOp2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOp2LikeOperandParserRuleCall_1_0 = (RuleCall)cOp2Assignment_1.eContents().get(0);
		
		//Like:
		//	opLike=("LIKE" | "NOT LIKE") op2=LikeOperand;
		public ParserRule getRule() { return rule; }

		//opLike=("LIKE" | "NOT LIKE") op2=LikeOperand
		public Group getGroup() { return cGroup; }

		//opLike=("LIKE" | "NOT LIKE")
		public Assignment getOpLikeAssignment_0() { return cOpLikeAssignment_0; }

		//"LIKE" | "NOT LIKE"
		public Alternatives getOpLikeAlternatives_0_0() { return cOpLikeAlternatives_0_0; }

		//"LIKE"
		public Keyword getOpLikeLIKEKeyword_0_0_0() { return cOpLikeLIKEKeyword_0_0_0; }

		//"NOT LIKE"
		public Keyword getOpLikeNOTLIKEKeyword_0_0_1() { return cOpLikeNOTLIKEKeyword_0_0_1; }

		//op2=LikeOperand
		public Assignment getOp2Assignment_1() { return cOp2Assignment_1; }

		//LikeOperand
		public RuleCall getOp2LikeOperandParserRuleCall_1_0() { return cOp2LikeOperandParserRuleCall_1_0; }
	}

	public class LikeOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LikeOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOp2Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOp2StringOperandParserRuleCall_0_0 = (RuleCall)cOp2Assignment_0.eContents().get(0);
		private final Assignment cFop2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFop2OperandFunctionParserRuleCall_1_0 = (RuleCall)cFop2Assignment_1.eContents().get(0);
		private final Assignment cFcastAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFcastOpFunctionCastParserRuleCall_2_0 = (RuleCall)cFcastAssignment_2.eContents().get(0);
		private final Assignment cFparamAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFparamParameterOperandParserRuleCall_3_0 = (RuleCall)cFparamAssignment_3.eContents().get(0);
		
		//LikeOperand:
		//	op2=StringOperand | fop2=OperandFunction | fcast=OpFunctionCast | fparam=ParameterOperand;
		public ParserRule getRule() { return rule; }

		//op2=StringOperand | fop2=OperandFunction | fcast=OpFunctionCast | fparam=ParameterOperand
		public Alternatives getAlternatives() { return cAlternatives; }

		//op2=StringOperand
		public Assignment getOp2Assignment_0() { return cOp2Assignment_0; }

		//StringOperand
		public RuleCall getOp2StringOperandParserRuleCall_0_0() { return cOp2StringOperandParserRuleCall_0_0; }

		//fop2=OperandFunction
		public Assignment getFop2Assignment_1() { return cFop2Assignment_1; }

		//OperandFunction
		public RuleCall getFop2OperandFunctionParserRuleCall_1_0() { return cFop2OperandFunctionParserRuleCall_1_0; }

		//fcast=OpFunctionCast
		public Assignment getFcastAssignment_2() { return cFcastAssignment_2; }

		//OpFunctionCast
		public RuleCall getFcastOpFunctionCastParserRuleCall_2_0() { return cFcastOpFunctionCastParserRuleCall_2_0; }

		//fparam=ParameterOperand
		public Assignment getFparamAssignment_3() { return cFparamAssignment_3; }

		//ParameterOperand
		public RuleCall getFparamParameterOperandParserRuleCall_3_0() { return cFparamParameterOperandParserRuleCall_3_0; }
	}

	public class BetweenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Between");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpBetweenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpBetweenAlternatives_0_0 = (Alternatives)cOpBetweenAssignment_0.eContents().get(0);
		private final Keyword cOpBetweenBETWEENKeyword_0_0_0 = (Keyword)cOpBetweenAlternatives_0_0.eContents().get(0);
		private final Keyword cOpBetweenNOTBETWEENKeyword_0_0_1 = (Keyword)cOpBetweenAlternatives_0_0.eContents().get(1);
		private final Assignment cOp2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOp2OperandGroupParserRuleCall_1_0 = (RuleCall)cOp2Assignment_1.eContents().get(0);
		private final Keyword cANDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOp3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOp3OperandGroupParserRuleCall_3_0 = (RuleCall)cOp3Assignment_3.eContents().get(0);
		
		//Between:
		//	opBetween=("BETWEEN" | "NOT BETWEEN") op2=OperandGroup "AND" op3=OperandGroup;
		public ParserRule getRule() { return rule; }

		//opBetween=("BETWEEN" | "NOT BETWEEN") op2=OperandGroup "AND" op3=OperandGroup
		public Group getGroup() { return cGroup; }

		//opBetween=("BETWEEN" | "NOT BETWEEN")
		public Assignment getOpBetweenAssignment_0() { return cOpBetweenAssignment_0; }

		//"BETWEEN" | "NOT BETWEEN"
		public Alternatives getOpBetweenAlternatives_0_0() { return cOpBetweenAlternatives_0_0; }

		//"BETWEEN"
		public Keyword getOpBetweenBETWEENKeyword_0_0_0() { return cOpBetweenBETWEENKeyword_0_0_0; }

		//"NOT BETWEEN"
		public Keyword getOpBetweenNOTBETWEENKeyword_0_0_1() { return cOpBetweenNOTBETWEENKeyword_0_0_1; }

		//op2=OperandGroup
		public Assignment getOp2Assignment_1() { return cOp2Assignment_1; }

		//OperandGroup
		public RuleCall getOp2OperandGroupParserRuleCall_1_0() { return cOp2OperandGroupParserRuleCall_1_0; }

		//"AND"
		public Keyword getANDKeyword_2() { return cANDKeyword_2; }

		//op3=OperandGroup
		public Assignment getOp3Assignment_3() { return cOp3Assignment_3; }

		//OperandGroup
		public RuleCall getOp3OperandGroupParserRuleCall_3_0() { return cOp3OperandGroupParserRuleCall_3_0; }
	}

	public class InOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInOperAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpNOTINKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpINKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubqueryAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSubquerySubQueryOperandParserRuleCall_2_0_0 = (RuleCall)cSubqueryAssignment_2_0.eContents().get(0);
		private final Assignment cOpListAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOpListOperandListGroupParserRuleCall_2_1_0 = (RuleCall)cOpListAssignment_2_1.eContents().get(0);
		
		//InOperator returns InOper:
		//	{InOper} op=("NOT IN" | "IN") (subquery=SubQueryOperand | opList=OperandListGroup);
		public ParserRule getRule() { return rule; }

		//{InOper} op=("NOT IN" | "IN") (subquery=SubQueryOperand | opList=OperandListGroup)
		public Group getGroup() { return cGroup; }

		//{InOper}
		public Action getInOperAction_0() { return cInOperAction_0; }

		//op=("NOT IN" | "IN")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"NOT IN" | "IN"
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }

		//"NOT IN"
		public Keyword getOpNOTINKeyword_1_0_0() { return cOpNOTINKeyword_1_0_0; }

		//"IN"
		public Keyword getOpINKeyword_1_0_1() { return cOpINKeyword_1_0_1; }

		//subquery=SubQueryOperand | opList=OperandListGroup
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//subquery=SubQueryOperand
		public Assignment getSubqueryAssignment_2_0() { return cSubqueryAssignment_2_0; }

		//SubQueryOperand
		public RuleCall getSubquerySubQueryOperandParserRuleCall_2_0_0() { return cSubquerySubQueryOperandParserRuleCall_2_0_0; }

		//opList=OperandListGroup
		public Assignment getOpListAssignment_2_1() { return cOpListAssignment_2_1; }

		//OperandListGroup
		public RuleCall getOpListOperandListGroupParserRuleCall_2_1_0() { return cOpListOperandListGroupParserRuleCall_2_1_0; }
	}

	public class ExistsOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExistsOperAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpNOTEXISTSKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpEXISTSKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubqueryAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSubquerySubQueryOperandParserRuleCall_2_0_0 = (RuleCall)cSubqueryAssignment_2_0.eContents().get(0);
		private final Assignment cOpListAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOpListOperandListGroupParserRuleCall_2_1_0 = (RuleCall)cOpListAssignment_2_1.eContents().get(0);
		
		//ExistsOperator returns ExistsOper:
		//	{ExistsOper} op=("NOT EXISTS" | "EXISTS") (subquery=SubQueryOperand | opList=OperandListGroup);
		public ParserRule getRule() { return rule; }

		//{ExistsOper} op=("NOT EXISTS" | "EXISTS") (subquery=SubQueryOperand | opList=OperandListGroup)
		public Group getGroup() { return cGroup; }

		//{ExistsOper}
		public Action getExistsOperAction_0() { return cExistsOperAction_0; }

		//op=("NOT EXISTS" | "EXISTS")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"NOT EXISTS" | "EXISTS"
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }

		//"NOT EXISTS"
		public Keyword getOpNOTEXISTSKeyword_1_0_0() { return cOpNOTEXISTSKeyword_1_0_0; }

		//"EXISTS"
		public Keyword getOpEXISTSKeyword_1_0_1() { return cOpEXISTSKeyword_1_0_1; }

		//subquery=SubQueryOperand | opList=OperandListGroup
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//subquery=SubQueryOperand
		public Assignment getSubqueryAssignment_2_0() { return cSubqueryAssignment_2_0; }

		//SubQueryOperand
		public RuleCall getSubquerySubQueryOperandParserRuleCall_2_0_0() { return cSubquerySubQueryOperandParserRuleCall_2_0_0; }

		//opList=OperandListGroup
		public Assignment getOpListAssignment_2_1() { return cOpListAssignment_2_1; }

		//OperandListGroup
		public RuleCall getOpListOperandListGroupParserRuleCall_2_1_0() { return cOpListOperandListGroupParserRuleCall_2_1_0; }
	}

	public class OperandListGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandListGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpGroupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpGroupOperandListParserRuleCall_1_0 = (RuleCall)cOpGroupAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OperandListGroup:
		//	"(" opGroup=OperandList ")";
		public ParserRule getRule() { return rule; }

		//"(" opGroup=OperandList ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//opGroup=OperandList
		public Assignment getOpGroupAssignment_1() { return cOpGroupAssignment_1; }

		//OperandList
		public RuleCall getOpGroupOperandListParserRuleCall_1_0() { return cOpGroupOperandListParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class OperandListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cScalarOperandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOpListEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesScalarOperandParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OperandList:
		//	ScalarOperand ({OpList.entries+=current} ("," entries+=ScalarOperand)+)?;
		public ParserRule getRule() { return rule; }

		//ScalarOperand ({OpList.entries+=current} ("," entries+=ScalarOperand)+)?
		public Group getGroup() { return cGroup; }

		//ScalarOperand
		public RuleCall getScalarOperandParserRuleCall_0() { return cScalarOperandParserRuleCall_0; }

		//({OpList.entries+=current} ("," entries+=ScalarOperand)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OpList.entries+=current}
		public Action getOpListEntriesAction_1_0() { return cOpListEntriesAction_1_0; }

		//("," entries+=ScalarOperand)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=ScalarOperand
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ScalarOperand
		public RuleCall getEntriesScalarOperandParserRuleCall_1_1_1_0() { return cEntriesScalarOperandParserRuleCall_1_1_1_0; }
	}

	public class OperandGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandGroup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//OperandGroup returns Operands:
		//	Operand | "(" Operand ")";
		public ParserRule getRule() { return rule; }

		//Operand | "(" Operand ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Operand
		public RuleCall getOperandParserRuleCall_0() { return cOperandParserRuleCall_0; }

		//"(" Operand ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Operand
		public RuleCall getOperandParserRuleCall_1_1() { return cOperandParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1OperandFragmentParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cConcatLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cMultiplyLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final RuleCall cSTARTerminalRuleCall_1_0_3_1 = (RuleCall)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cDivisionLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandFragmentParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Operand returns Operands:
		//	op1=OperandFragment (({Plus.left=current} "+" | {Minus.left=current} "-" | {Concat.left=current} "||" |
		//	{Multiply.left=current} STAR | {Division.left=current} "/") right=OperandFragment)*;
		public ParserRule getRule() { return rule; }

		//op1=OperandFragment (({Plus.left=current} "+" | {Minus.left=current} "-" | {Concat.left=current} "||" |
		//{Multiply.left=current} STAR | {Division.left=current} "/") right=OperandFragment)*
		public Group getGroup() { return cGroup; }

		//op1=OperandFragment
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }

		//OperandFragment
		public RuleCall getOp1OperandFragmentParserRuleCall_0_0() { return cOp1OperandFragmentParserRuleCall_0_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-" | {Concat.left=current} "||" | {Multiply.left=current} STAR |
		//{Division.left=current} "/") right=OperandFragment)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-" | {Concat.left=current} "||" | {Multiply.left=current} STAR |
		//{Division.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//{Concat.left=current} "||"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Concat.left=current}
		public Action getConcatLeftAction_1_0_2_0() { return cConcatLeftAction_1_0_2_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_2_1() { return cVerticalLineVerticalLineKeyword_1_0_2_1; }

		//{Multiply.left=current} STAR
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_3_0() { return cMultiplyLeftAction_1_0_3_0; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_1_0_3_1() { return cSTARTerminalRuleCall_1_0_3_1; }

		//{Division.left=current} "/"
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_4_0() { return cDivisionLeftAction_1_0_4_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_4_1() { return cSolidusKeyword_1_0_4_1; }

		//right=OperandFragment
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OperandFragment
		public RuleCall getRightOperandFragmentParserRuleCall_1_1_0() { return cRightOperandFragmentParserRuleCall_1_1_0; }
	}

	public class OperandFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cColumnColumnOperandParserRuleCall_0_0 = (RuleCall)cColumnAssignment_0.eContents().get(0);
		private final Assignment cXopAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cXopXOperandFragmentParserRuleCall_1_0 = (RuleCall)cXopAssignment_1.eContents().get(0);
		private final Assignment cSubqAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSubqSubQueryOperandParserRuleCall_2_0 = (RuleCall)cSubqAssignment_2.eContents().get(0);
		private final Assignment cFcastAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFcastOpFunctionCastParserRuleCall_3_0 = (RuleCall)cFcastAssignment_3.eContents().get(0);
		private final Assignment cFextAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFextFunctionExtractParserRuleCall_4_0 = (RuleCall)cFextAssignment_4.eContents().get(0);
		private final Assignment cFuncAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cFuncOperandFunctionParserRuleCall_5_0 = (RuleCall)cFuncAssignment_5.eContents().get(0);
		private final Assignment cSqlcaseAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cSqlcaseSQLCASEParserRuleCall_6_0 = (RuleCall)cSqlcaseAssignment_6.eContents().get(0);
		
		//OperandFragment returns Operand:
		//	column=ColumnOperand | xop=XOperandFragment | subq=SubQueryOperand | fcast=OpFunctionCast | fext=FunctionExtract |
		//	func=OperandFunction | sqlcase=SQLCASE;
		public ParserRule getRule() { return rule; }

		//column=ColumnOperand | xop=XOperandFragment | subq=SubQueryOperand | fcast=OpFunctionCast | fext=FunctionExtract |
		//func=OperandFunction | sqlcase=SQLCASE
		public Alternatives getAlternatives() { return cAlternatives; }

		//column=ColumnOperand
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }

		//ColumnOperand
		public RuleCall getColumnColumnOperandParserRuleCall_0_0() { return cColumnColumnOperandParserRuleCall_0_0; }

		//xop=XOperandFragment
		public Assignment getXopAssignment_1() { return cXopAssignment_1; }

		//XOperandFragment
		public RuleCall getXopXOperandFragmentParserRuleCall_1_0() { return cXopXOperandFragmentParserRuleCall_1_0; }

		//subq=SubQueryOperand
		public Assignment getSubqAssignment_2() { return cSubqAssignment_2; }

		//SubQueryOperand
		public RuleCall getSubqSubQueryOperandParserRuleCall_2_0() { return cSubqSubQueryOperandParserRuleCall_2_0; }

		//fcast=OpFunctionCast
		public Assignment getFcastAssignment_3() { return cFcastAssignment_3; }

		//OpFunctionCast
		public RuleCall getFcastOpFunctionCastParserRuleCall_3_0() { return cFcastOpFunctionCastParserRuleCall_3_0; }

		//fext=FunctionExtract
		public Assignment getFextAssignment_4() { return cFextAssignment_4; }

		//FunctionExtract
		public RuleCall getFextFunctionExtractParserRuleCall_4_0() { return cFextFunctionExtractParserRuleCall_4_0; }

		//func=OperandFunction
		public Assignment getFuncAssignment_5() { return cFuncAssignment_5; }

		//OperandFunction
		public RuleCall getFuncOperandFunctionParserRuleCall_5_0() { return cFuncOperandFunctionParserRuleCall_5_0; }

		//sqlcase=SQLCASE
		public Assignment getSqlcaseAssignment_6() { return cSqlcaseAssignment_6; }

		//SQLCASE
		public RuleCall getSqlcaseSQLCASEParserRuleCall_6_0() { return cSqlcaseSQLCASEParserRuleCall_6_0; }
	}

	public class OperandFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFnameFNAMEParserRuleCall_1_0 = (RuleCall)cFnameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStarAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStarSTARTerminalRuleCall_2_0_0 = (RuleCall)cStarAssignment_2_0.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgsOpFunctionArgParserRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFanAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFanFunctionAnalyticalParserRuleCall_4_0 = (RuleCall)cFanAssignment_4.eContents().get(0);
		
		//OperandFunction returns OpFunction:
		//	{OpFunction} fname=FNAME (star=STAR | args=OpFunctionArg)? ")" fan=FunctionAnalytical?;
		public ParserRule getRule() { return rule; }

		//{OpFunction} fname=FNAME (star=STAR | args=OpFunctionArg)? ")" fan=FunctionAnalytical?
		public Group getGroup() { return cGroup; }

		//{OpFunction}
		public Action getOpFunctionAction_0() { return cOpFunctionAction_0; }

		//fname=FNAME
		public Assignment getFnameAssignment_1() { return cFnameAssignment_1; }

		//FNAME
		public RuleCall getFnameFNAMEParserRuleCall_1_0() { return cFnameFNAMEParserRuleCall_1_0; }

		//(star=STAR | args=OpFunctionArg)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//star=STAR
		public Assignment getStarAssignment_2_0() { return cStarAssignment_2_0; }

		//STAR
		public RuleCall getStarSTARTerminalRuleCall_2_0_0() { return cStarSTARTerminalRuleCall_2_0_0; }

		//args=OpFunctionArg
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }

		//OpFunctionArg
		public RuleCall getArgsOpFunctionArgParserRuleCall_2_1_0() { return cArgsOpFunctionArgParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//fan=FunctionAnalytical?
		public Assignment getFanAssignment_4() { return cFanAssignment_4; }

		//FunctionAnalytical
		public RuleCall getFanFunctionAnalyticalParserRuleCall_4_0() { return cFanFunctionAnalyticalParserRuleCall_4_0; }
	}

	public class FunctionExtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionExtract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXTRACTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVEXTRACT_VALUESEnumRuleCall_2_0 = (RuleCall)cVAssignment_2.eContents().get(0);
		private final Keyword cFROMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperandAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperandOperandGroupParserRuleCall_4_0 = (RuleCall)cOperandAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionExtract:
		//	"EXTRACT" "(" v=EXTRACT_VALUES "FROM" operand=OperandGroup ")";
		public ParserRule getRule() { return rule; }

		//"EXTRACT" "(" v=EXTRACT_VALUES "FROM" operand=OperandGroup ")"
		public Group getGroup() { return cGroup; }

		//"EXTRACT"
		public Keyword getEXTRACTKeyword_0() { return cEXTRACTKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//v=EXTRACT_VALUES
		public Assignment getVAssignment_2() { return cVAssignment_2; }

		//EXTRACT_VALUES
		public RuleCall getVEXTRACT_VALUESEnumRuleCall_2_0() { return cVEXTRACT_VALUESEnumRuleCall_2_0; }

		//"FROM"
		public Keyword getFROMKeyword_3() { return cFROMKeyword_3; }

		//operand=OperandGroup
		public Assignment getOperandAssignment_4() { return cOperandAssignment_4; }

		//OperandGroup
		public RuleCall getOperandOperandGroupParserRuleCall_4_0() { return cOperandOperandGroupParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FunctionAnalyticalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionAnalytical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOVERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnClauseAnalyticClauseParserRuleCall_2_0 = (RuleCall)cAnClauseAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionAnalytical:
		//	"OVER" "(" anClause=AnalyticClause ")";
		public ParserRule getRule() { return rule; }

		//"OVER" "(" anClause=AnalyticClause ")"
		public Group getGroup() { return cGroup; }

		//"OVER"
		public Keyword getOVERKeyword_0() { return cOVERKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//anClause=AnalyticClause
		public Assignment getAnClauseAssignment_2() { return cAnClauseAssignment_2; }

		//AnalyticClause
		public RuleCall getAnClauseAnalyticClauseParserRuleCall_2_0() { return cAnClauseAnalyticClauseParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AnalyticClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnalyticClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnalyticClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbcQueryPartitionClauseParserRuleCall_1_0 = (RuleCall)cAbcAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cObcAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cObcOrderByClauseParserRuleCall_2_0_0 = (RuleCall)cObcAssignment_2_0.eContents().get(0);
		private final Assignment cWincAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWincWindowingClauseParserRuleCall_2_1_0 = (RuleCall)cWincAssignment_2_1.eContents().get(0);
		
		//AnalyticClause:
		//	{AnalyticClause} abc=QueryPartitionClause? (obc=OrderByClause winc=WindowingClause?)?;
		public ParserRule getRule() { return rule; }

		//{AnalyticClause} abc=QueryPartitionClause? (obc=OrderByClause winc=WindowingClause?)?
		public Group getGroup() { return cGroup; }

		//{AnalyticClause}
		public Action getAnalyticClauseAction_0() { return cAnalyticClauseAction_0; }

		//abc=QueryPartitionClause?
		public Assignment getAbcAssignment_1() { return cAbcAssignment_1; }

		//QueryPartitionClause
		public RuleCall getAbcQueryPartitionClauseParserRuleCall_1_0() { return cAbcQueryPartitionClauseParserRuleCall_1_0; }

		//(obc=OrderByClause winc=WindowingClause?)?
		public Group getGroup_2() { return cGroup_2; }

		//obc=OrderByClause
		public Assignment getObcAssignment_2_0() { return cObcAssignment_2_0; }

		//OrderByClause
		public RuleCall getObcOrderByClauseParserRuleCall_2_0_0() { return cObcOrderByClauseParserRuleCall_2_0_0; }

		//winc=WindowingClause?
		public Assignment getWincAssignment_2_1() { return cWincAssignment_2_1; }

		//WindowingClause
		public RuleCall getWincWindowingClauseParserRuleCall_2_1_0() { return cWincWindowingClauseParserRuleCall_2_1_0; }
	}

	public class WindowingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WindowingClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cROWSKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRANGEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cWindowingClauseBetweenParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cWindowingClauseOperandPrecedingParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//WindowingClause:
		//	("ROWS" | "RANGE") (WindowingClauseBetween | WindowingClauseOperandPreceding);
		public ParserRule getRule() { return rule; }

		//("ROWS" | "RANGE") (WindowingClauseBetween | WindowingClauseOperandPreceding)
		public Group getGroup() { return cGroup; }

		//"ROWS" | "RANGE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"ROWS"
		public Keyword getROWSKeyword_0_0() { return cROWSKeyword_0_0; }

		//"RANGE"
		public Keyword getRANGEKeyword_0_1() { return cRANGEKeyword_0_1; }

		//WindowingClauseBetween | WindowingClauseOperandPreceding
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//WindowingClauseBetween
		public RuleCall getWindowingClauseBetweenParserRuleCall_1_0() { return cWindowingClauseBetweenParserRuleCall_1_0; }

		//WindowingClauseOperandPreceding
		public RuleCall getWindowingClauseOperandPrecedingParserRuleCall_1_1() { return cWindowingClauseOperandPrecedingParserRuleCall_1_1; }
	}

	public class WindowingClauseBetweenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WindowingClauseBetween");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBETWEENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWcoPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0 = (RuleCall)cWcoPAssignment_1.eContents().get(0);
		private final Keyword cANDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWcoFAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWcoFWindowingClauseOperandFollowingParserRuleCall_3_0 = (RuleCall)cWcoFAssignment_3.eContents().get(0);
		
		//WindowingClauseBetween:
		//	"BETWEEN" wcoP=WindowingClauseOperandPreceding "AND" wcoF=WindowingClauseOperandFollowing;
		public ParserRule getRule() { return rule; }

		//"BETWEEN" wcoP=WindowingClauseOperandPreceding "AND" wcoF=WindowingClauseOperandFollowing
		public Group getGroup() { return cGroup; }

		//"BETWEEN"
		public Keyword getBETWEENKeyword_0() { return cBETWEENKeyword_0; }

		//wcoP=WindowingClauseOperandPreceding
		public Assignment getWcoPAssignment_1() { return cWcoPAssignment_1; }

		//WindowingClauseOperandPreceding
		public RuleCall getWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0() { return cWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0; }

		//"AND"
		public Keyword getANDKeyword_2() { return cANDKeyword_2; }

		//wcoF=WindowingClauseOperandFollowing
		public Assignment getWcoFAssignment_3() { return cWcoFAssignment_3; }

		//WindowingClauseOperandFollowing
		public RuleCall getWcoFWindowingClauseOperandFollowingParserRuleCall_3_0() { return cWcoFWindowingClauseOperandFollowingParserRuleCall_3_0; }
	}

	public class WindowingClauseOperandFollowingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WindowingClauseOperandFollowing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWindowingClauseOperandFollowingAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUNBOUNDEDFOLLOWINGKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCURRENTROWKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cExpAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cExpAnalyticExprArgParserRuleCall_1_2_0_0 = (RuleCall)cExpAssignment_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cPRECEDINGKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Keyword cFOLLOWINGKeyword_1_2_1_1 = (Keyword)cAlternatives_1_2_1.eContents().get(1);
		
		//WindowingClauseOperandFollowing:
		//	{WindowingClauseOperandFollowing} ("UNBOUNDED FOLLOWING" | "CURRENT ROW" | exp=AnalyticExprArg ("PRECEDING" |
		//	"FOLLOWING"));
		public ParserRule getRule() { return rule; }

		//{WindowingClauseOperandFollowing} ("UNBOUNDED FOLLOWING" | "CURRENT ROW" | exp=AnalyticExprArg ("PRECEDING" |
		//"FOLLOWING"))
		public Group getGroup() { return cGroup; }

		//{WindowingClauseOperandFollowing}
		public Action getWindowingClauseOperandFollowingAction_0() { return cWindowingClauseOperandFollowingAction_0; }

		//"UNBOUNDED FOLLOWING" | "CURRENT ROW" | exp=AnalyticExprArg ("PRECEDING" | "FOLLOWING")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"UNBOUNDED FOLLOWING"
		public Keyword getUNBOUNDEDFOLLOWINGKeyword_1_0() { return cUNBOUNDEDFOLLOWINGKeyword_1_0; }

		//"CURRENT ROW"
		public Keyword getCURRENTROWKeyword_1_1() { return cCURRENTROWKeyword_1_1; }

		//exp=AnalyticExprArg ("PRECEDING" | "FOLLOWING")
		public Group getGroup_1_2() { return cGroup_1_2; }

		//exp=AnalyticExprArg
		public Assignment getExpAssignment_1_2_0() { return cExpAssignment_1_2_0; }

		//AnalyticExprArg
		public RuleCall getExpAnalyticExprArgParserRuleCall_1_2_0_0() { return cExpAnalyticExprArgParserRuleCall_1_2_0_0; }

		//"PRECEDING" | "FOLLOWING"
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }

		//"PRECEDING"
		public Keyword getPRECEDINGKeyword_1_2_1_0() { return cPRECEDINGKeyword_1_2_1_0; }

		//"FOLLOWING"
		public Keyword getFOLLOWINGKeyword_1_2_1_1() { return cFOLLOWINGKeyword_1_2_1_1; }
	}

	public class WindowingClauseOperandPrecedingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WindowingClauseOperandPreceding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWindowingClauseOperandPrecedingAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUNBOUNDEDPRECEDINGKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCURRENTROWKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cExprAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cExprAnalyticExprArgParserRuleCall_1_2_0_0 = (RuleCall)cExprAssignment_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cPRECEDINGKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Keyword cFOLLOWINGKeyword_1_2_1_1 = (Keyword)cAlternatives_1_2_1.eContents().get(1);
		
		//WindowingClauseOperandPreceding:
		//	{WindowingClauseOperandPreceding} ("UNBOUNDED PRECEDING" | "CURRENT ROW" | expr=AnalyticExprArg ("PRECEDING" |
		//	"FOLLOWING"));
		public ParserRule getRule() { return rule; }

		//{WindowingClauseOperandPreceding} ("UNBOUNDED PRECEDING" | "CURRENT ROW" | expr=AnalyticExprArg ("PRECEDING" |
		//"FOLLOWING"))
		public Group getGroup() { return cGroup; }

		//{WindowingClauseOperandPreceding}
		public Action getWindowingClauseOperandPrecedingAction_0() { return cWindowingClauseOperandPrecedingAction_0; }

		//"UNBOUNDED PRECEDING" | "CURRENT ROW" | expr=AnalyticExprArg ("PRECEDING" | "FOLLOWING")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"UNBOUNDED PRECEDING"
		public Keyword getUNBOUNDEDPRECEDINGKeyword_1_0() { return cUNBOUNDEDPRECEDINGKeyword_1_0; }

		//"CURRENT ROW"
		public Keyword getCURRENTROWKeyword_1_1() { return cCURRENTROWKeyword_1_1; }

		//expr=AnalyticExprArg ("PRECEDING" | "FOLLOWING")
		public Group getGroup_1_2() { return cGroup_1_2; }

		//expr=AnalyticExprArg
		public Assignment getExprAssignment_1_2_0() { return cExprAssignment_1_2_0; }

		//AnalyticExprArg
		public RuleCall getExprAnalyticExprArgParserRuleCall_1_2_0_0() { return cExprAnalyticExprArgParserRuleCall_1_2_0_0; }

		//"PRECEDING" | "FOLLOWING"
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }

		//"PRECEDING"
		public Keyword getPRECEDINGKeyword_1_2_1_0() { return cPRECEDINGKeyword_1_2_1_0; }

		//"FOLLOWING"
		public Keyword getFOLLOWINGKeyword_1_2_1_1() { return cFOLLOWINGKeyword_1_2_1_1; }
	}

	public class OrderByClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cORDERBYKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cORDERSIBLINGSBYKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsOrderByClauseArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//OrderByClause:
		//	("ORDER BY" | "ORDER SIBLINGS BY") args=OrderByClauseArgs;
		public ParserRule getRule() { return rule; }

		//("ORDER BY" | "ORDER SIBLINGS BY") args=OrderByClauseArgs
		public Group getGroup() { return cGroup; }

		//"ORDER BY" | "ORDER SIBLINGS BY"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"ORDER BY"
		public Keyword getORDERBYKeyword_0_0() { return cORDERBYKeyword_0_0; }

		//"ORDER SIBLINGS BY"
		public Keyword getORDERSIBLINGSBYKeyword_0_1() { return cORDERSIBLINGSBYKeyword_0_1; }

		//args=OrderByClauseArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }

		//OrderByClauseArgs
		public RuleCall getArgsOrderByClauseArgsParserRuleCall_1_0() { return cArgsOrderByClauseArgsParserRuleCall_1_0; }
	}

	public class OrderByClauseArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByClauseArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrderByClauseArgParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOBCArgsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesOrderByClauseArgParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OrderByClauseArgs:
		//	OrderByClauseArg ({OBCArgs.entries+=current} ("," entries+=OrderByClauseArg)+)?;
		public ParserRule getRule() { return rule; }

		//OrderByClauseArg ({OBCArgs.entries+=current} ("," entries+=OrderByClauseArg)+)?
		public Group getGroup() { return cGroup; }

		//OrderByClauseArg
		public RuleCall getOrderByClauseArgParserRuleCall_0() { return cOrderByClauseArgParserRuleCall_0; }

		//({OBCArgs.entries+=current} ("," entries+=OrderByClauseArg)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OBCArgs.entries+=current}
		public Action getOBCArgsEntriesAction_1_0() { return cOBCArgsEntriesAction_1_0; }

		//("," entries+=OrderByClauseArg)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=OrderByClauseArg
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//OrderByClauseArg
		public RuleCall getEntriesOrderByClauseArgParserRuleCall_1_1_1_0() { return cEntriesOrderByClauseArgParserRuleCall_1_1_1_0; }
	}

	public class OrderByClauseArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByClauseArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColAnalyticExprArgParserRuleCall_0_0 = (RuleCall)cColAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cASCKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDESCKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNULLSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cFIRSTKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cLASTKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//OrderByClauseArg:
		//	col=AnalyticExprArg ("ASC" | "DESC")? ("NULLS" ("FIRST" | "LAST"))?;
		public ParserRule getRule() { return rule; }

		//col=AnalyticExprArg ("ASC" | "DESC")? ("NULLS" ("FIRST" | "LAST"))?
		public Group getGroup() { return cGroup; }

		//col=AnalyticExprArg
		public Assignment getColAssignment_0() { return cColAssignment_0; }

		//AnalyticExprArg
		public RuleCall getColAnalyticExprArgParserRuleCall_0_0() { return cColAnalyticExprArgParserRuleCall_0_0; }

		//("ASC" | "DESC")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"ASC"
		public Keyword getASCKeyword_1_0() { return cASCKeyword_1_0; }

		//"DESC"
		public Keyword getDESCKeyword_1_1() { return cDESCKeyword_1_1; }

		//("NULLS" ("FIRST" | "LAST"))?
		public Group getGroup_2() { return cGroup_2; }

		//"NULLS"
		public Keyword getNULLSKeyword_2_0() { return cNULLSKeyword_2_0; }

		//"FIRST" | "LAST"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"FIRST"
		public Keyword getFIRSTKeyword_2_1_0() { return cFIRSTKeyword_2_1_0; }

		//"LAST"
		public Keyword getLASTKeyword_2_1_1() { return cLASTKeyword_2_1_1; }
	}

	public class QueryPartitionClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryPartitionClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPARTITIONBYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cArgsAnalyticExprArgsParserRuleCall_1_0_0 = (RuleCall)cArgsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cAnalyticExprArgsParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//QueryPartitionClause:
		//	"PARTITION BY" (args=AnalyticExprArgs | "(" AnalyticExprArgs ")");
		public ParserRule getRule() { return rule; }

		//"PARTITION BY" (args=AnalyticExprArgs | "(" AnalyticExprArgs ")")
		public Group getGroup() { return cGroup; }

		//"PARTITION BY"
		public Keyword getPARTITIONBYKeyword_0() { return cPARTITIONBYKeyword_0; }

		//args=AnalyticExprArgs | "(" AnalyticExprArgs ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//args=AnalyticExprArgs
		public Assignment getArgsAssignment_1_0() { return cArgsAssignment_1_0; }

		//AnalyticExprArgs
		public RuleCall getArgsAnalyticExprArgsParserRuleCall_1_0_0() { return cArgsAnalyticExprArgsParserRuleCall_1_0_0; }

		//"(" AnalyticExprArgs ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//AnalyticExprArgs
		public RuleCall getAnalyticExprArgsParserRuleCall_1_1_1() { return cAnalyticExprArgsParserRuleCall_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class AnalyticExprArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnalyticExprArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnalyticExprArgParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAExpArgsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesAnalyticExprArgParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//AnalyticExprArgs:
		//	AnalyticExprArg ({AExpArgs.entries+=current} ("," entries+=AnalyticExprArg)+)?;
		public ParserRule getRule() { return rule; }

		//AnalyticExprArg ({AExpArgs.entries+=current} ("," entries+=AnalyticExprArg)+)?
		public Group getGroup() { return cGroup; }

		//AnalyticExprArg
		public RuleCall getAnalyticExprArgParserRuleCall_0() { return cAnalyticExprArgParserRuleCall_0; }

		//({AExpArgs.entries+=current} ("," entries+=AnalyticExprArg)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AExpArgs.entries+=current}
		public Action getAExpArgsEntriesAction_1_0() { return cAExpArgsEntriesAction_1_0; }

		//("," entries+=AnalyticExprArg)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=AnalyticExprArg
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//AnalyticExprArg
		public RuleCall getEntriesAnalyticExprArgParserRuleCall_1_1_1_0() { return cEntriesAnalyticExprArgParserRuleCall_1_1_1_0; }
	}

	public class AnalyticExprArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnalyticExprArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCeOperandParserRuleCall_0_0 = (RuleCall)cCeAssignment_0.eContents().get(0);
		private final Assignment cColAliasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColAliasDbObjectNameParserRuleCall_1_0 = (RuleCall)cColAliasAssignment_1.eContents().get(0);
		
		//AnalyticExprArg:
		//	ce=Operand colAlias=DbObjectName?;
		public ParserRule getRule() { return rule; }

		//ce=Operand colAlias=DbObjectName?
		public Group getGroup() { return cGroup; }

		//ce=Operand
		public Assignment getCeAssignment_0() { return cCeAssignment_0; }

		//Operand
		public RuleCall getCeOperandParserRuleCall_0_0() { return cCeOperandParserRuleCall_0_0; }

		//colAlias=DbObjectName?
		public Assignment getColAliasAssignment_1() { return cColAliasAssignment_1; }

		//DbObjectName
		public RuleCall getColAliasDbObjectNameParserRuleCall_1_0() { return cColAliasDbObjectNameParserRuleCall_1_0; }
	}

	public class OpFunctionArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpFunctionArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOpFunctionArgOperandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOpFListEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OpFunctionArg:
		//	OpFunctionArgOperand ({OpFList.entries+=current} ("," entries+=OpFunctionArgOperand)+)?;
		public ParserRule getRule() { return rule; }

		//OpFunctionArgOperand ({OpFList.entries+=current} ("," entries+=OpFunctionArgOperand)+)?
		public Group getGroup() { return cGroup; }

		//OpFunctionArgOperand
		public RuleCall getOpFunctionArgOperandParserRuleCall_0() { return cOpFunctionArgOperandParserRuleCall_0; }

		//({OpFList.entries+=current} ("," entries+=OpFunctionArgOperand)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OpFList.entries+=current}
		public Action getOpFListEntriesAction_1_0() { return cOpFListEntriesAction_1_0; }

		//("," entries+=OpFunctionArgOperand)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=OpFunctionArgOperand
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//OpFunctionArgOperand
		public RuleCall getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0() { return cEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0; }
	}

	public class OpFunctionArgOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpFunctionArgOperand");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final RuleCall cOpOpFunctionArgAgregateParserRuleCall_0_0 = (RuleCall)cOpAlternatives_0.eContents().get(0);
		private final RuleCall cOpOperandParserRuleCall_0_1 = (RuleCall)cOpAlternatives_0.eContents().get(1);
		
		//OpFunctionArgOperand: / *fa=OpFunctionArgAgregate | fc=OpFunctionArgCast |* / op=(OpFunctionArgAgregate | Operand);
		public ParserRule getRule() { return rule; }

		/// *fa=OpFunctionArgAgregate | fc=OpFunctionArgCast |* / op=(OpFunctionArgAgregate | Operand)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//OpFunctionArgAgregate | Operand
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//OpFunctionArgAgregate
		public RuleCall getOpOpFunctionArgAgregateParserRuleCall_0_0() { return cOpOpFunctionArgAgregateParserRuleCall_0_0; }

		//Operand
		public RuleCall getOpOperandParserRuleCall_0_1() { return cOpOperandParserRuleCall_0_1; }
	}

	public class OpFunctionCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpFunctionCast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperandGroupParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPINTTerminalRuleCall_4_1_0 = (RuleCall)cPAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cP2Assignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cP2INTTerminalRuleCall_4_2_1_0 = (RuleCall)cP2Assignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OpFunctionCast:
		//	"CAST(" op=OperandGroup "AS" type=ID ("(" p=INT ("," p2=INT)? ")")? ")";
		public ParserRule getRule() { return rule; }

		//"CAST(" op=OperandGroup "AS" type=ID ("(" p=INT ("," p2=INT)? ")")? ")"
		public Group getGroup() { return cGroup; }

		//"CAST("
		public Keyword getCASTKeyword_0() { return cCASTKeyword_0; }

		//op=OperandGroup
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//OperandGroup
		public RuleCall getOpOperandGroupParserRuleCall_1_0() { return cOpOperandGroupParserRuleCall_1_0; }

		//"AS"
		public Keyword getASKeyword_2() { return cASKeyword_2; }

		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }

		//("(" p=INT ("," p2=INT)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//p=INT
		public Assignment getPAssignment_4_1() { return cPAssignment_4_1; }

		//INT
		public RuleCall getPINTTerminalRuleCall_4_1_0() { return cPINTTerminalRuleCall_4_1_0; }

		//("," p2=INT)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//p2=INT
		public Assignment getP2Assignment_4_2_1() { return cP2Assignment_4_2_1; }

		//INT
		public RuleCall getP2INTTerminalRuleCall_4_2_1_0() { return cP2INTTerminalRuleCall_4_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class OpFunctionArgAgregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpFunctionArgAgregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cALLKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDISTINCTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cOperandParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OpFunctionArgAgregate:
		//	("ALL" | "DISTINCT") Operand;
		public ParserRule getRule() { return rule; }

		//("ALL" | "DISTINCT") Operand
		public Group getGroup() { return cGroup; }

		//"ALL" | "DISTINCT"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"ALL"
		public Keyword getALLKeyword_0_0() { return cALLKeyword_0_0; }

		//"DISTINCT"
		public Keyword getDISTINCTKeyword_0_1() { return cDISTINCTKeyword_0_1; }

		//Operand
		public RuleCall getOperandParserRuleCall_1() { return cOperandParserRuleCall_1; }
	}

	public class XOperandFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOperandFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamParameterOperandParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cEparamAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEparamExclamationParameterOperandParserRuleCall_1_0 = (RuleCall)cEparamAssignment_1.eContents().get(0);
		private final Assignment cScalarAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cScalarScalarOperandParserRuleCall_2_0 = (RuleCall)cScalarAssignment_2.eContents().get(0);
		
		//XOperandFragment returns Operand:
		//	param=ParameterOperand | eparam=ExclamationParameterOperand | scalar=ScalarOperand;
		public ParserRule getRule() { return rule; }

		//param=ParameterOperand | eparam=ExclamationParameterOperand | scalar=ScalarOperand
		public Alternatives getAlternatives() { return cAlternatives; }

		//param=ParameterOperand
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//ParameterOperand
		public RuleCall getParamParameterOperandParserRuleCall_0_0() { return cParamParameterOperandParserRuleCall_0_0; }

		//eparam=ExclamationParameterOperand
		public Assignment getEparamAssignment_1() { return cEparamAssignment_1; }

		//ExclamationParameterOperand
		public RuleCall getEparamExclamationParameterOperandParserRuleCall_1_0() { return cEparamExclamationParameterOperandParserRuleCall_1_0; }

		//scalar=ScalarOperand
		public Assignment getScalarAssignment_2() { return cScalarAssignment_2; }

		//ScalarOperand
		public RuleCall getScalarScalarOperandParserRuleCall_2_0() { return cScalarScalarOperandParserRuleCall_2_0; }
	}

	public class ParameterOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterOperand");
		private final Assignment cPrmAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrmJRPARAMTerminalRuleCall_0 = (RuleCall)cPrmAssignment.eContents().get(0);
		
		//ParameterOperand returns POperand:
		//	prm=JRPARAM;
		public ParserRule getRule() { return rule; }

		//prm=JRPARAM
		public Assignment getPrmAssignment() { return cPrmAssignment; }

		//JRPARAM
		public RuleCall getPrmJRPARAMTerminalRuleCall_0() { return cPrmJRPARAMTerminalRuleCall_0; }
	}

	public class ExclamationParameterOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExclamationParameterOperand");
		private final Assignment cPrmAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrmJRNPARAMTerminalRuleCall_0 = (RuleCall)cPrmAssignment.eContents().get(0);
		
		//ExclamationParameterOperand returns ExpOperand:
		//	prm=JRNPARAM;
		public ParserRule getRule() { return rule; }

		//prm=JRNPARAM
		public Assignment getPrmAssignment() { return cPrmAssignment; }

		//JRNPARAM
		public RuleCall getPrmJRNPARAMTerminalRuleCall_0() { return cPrmJRNPARAMTerminalRuleCall_0; }
	}

	public class ColumnOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnOperand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCfullAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCfullColumnFullParserRuleCall_0_0 = (RuleCall)cCfullAssignment_0.eContents().get(0);
		private final Assignment cOraAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0 = (Keyword)cOraAssignment_1.eContents().get(0);
		
		//ColumnOperand:
		//	cfull=ColumnFull ora="(+)"?;
		public ParserRule getRule() { return rule; }

		//cfull=ColumnFull ora="(+)"?
		public Group getGroup() { return cGroup; }

		//cfull=ColumnFull
		public Assignment getCfullAssignment_0() { return cCfullAssignment_0; }

		//ColumnFull
		public RuleCall getCfullColumnFullParserRuleCall_0_0() { return cCfullColumnFullParserRuleCall_0_0; }

		//ora="(+)"?
		public Assignment getOraAssignment_1() { return cOraAssignment_1; }

		//"(+)"
		public Keyword getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0() { return cOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0; }
	}

	public class SubQueryOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubQueryOperand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubQueryOperandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelSelectQueryParserRuleCall_2_0 = (RuleCall)cSelAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubQueryOperand:
		//	{SubQueryOperand} "(" sel=SelectQuery ")";
		public ParserRule getRule() { return rule; }

		//{SubQueryOperand} "(" sel=SelectQuery ")"
		public Group getGroup() { return cGroup; }

		//{SubQueryOperand}
		public Action getSubQueryOperandAction_0() { return cSubQueryOperandAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//sel=SelectQuery
		public Assignment getSelAssignment_2() { return cSelAssignment_2; }

		//SelectQuery
		public RuleCall getSelSelectQueryParserRuleCall_2_0() { return cSelSelectQueryParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ScalarOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScalarOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSointAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSointINTTerminalRuleCall_0_0 = (RuleCall)cSointAssignment_0.eContents().get(0);
		private final Assignment cSostrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSostrStringOperandParserRuleCall_1_0 = (RuleCall)cSostrAssignment_1.eContents().get(0);
		private final Assignment cSodblAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSodblSIGNED_DOUBLETerminalRuleCall_2_0 = (RuleCall)cSodblAssignment_2.eContents().get(0);
		private final Assignment cSodateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSodateDATETerminalRuleCall_3_0 = (RuleCall)cSodateAssignment_3.eContents().get(0);
		private final Assignment cSotimeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSotimeTIMETerminalRuleCall_4_0 = (RuleCall)cSotimeAssignment_4.eContents().get(0);
		private final Assignment cSodtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cSodtTIMESTAMPTerminalRuleCall_5_0 = (RuleCall)cSodtAssignment_5.eContents().get(0);
		
		//ScalarOperand:
		//	soint=INT | sostr=StringOperand | sodbl=SIGNED_DOUBLE | sodate=DATE | sotime=TIME | sodt=TIMESTAMP;
		public ParserRule getRule() { return rule; }

		//soint=INT | sostr=StringOperand | sodbl=SIGNED_DOUBLE | sodate=DATE | sotime=TIME | sodt=TIMESTAMP
		public Alternatives getAlternatives() { return cAlternatives; }

		//soint=INT
		public Assignment getSointAssignment_0() { return cSointAssignment_0; }

		//INT
		public RuleCall getSointINTTerminalRuleCall_0_0() { return cSointINTTerminalRuleCall_0_0; }

		//sostr=StringOperand
		public Assignment getSostrAssignment_1() { return cSostrAssignment_1; }

		//StringOperand
		public RuleCall getSostrStringOperandParserRuleCall_1_0() { return cSostrStringOperandParserRuleCall_1_0; }

		//sodbl=SIGNED_DOUBLE
		public Assignment getSodblAssignment_2() { return cSodblAssignment_2; }

		//SIGNED_DOUBLE
		public RuleCall getSodblSIGNED_DOUBLETerminalRuleCall_2_0() { return cSodblSIGNED_DOUBLETerminalRuleCall_2_0; }

		//sodate=DATE
		public Assignment getSodateAssignment_3() { return cSodateAssignment_3; }

		//DATE
		public RuleCall getSodateDATETerminalRuleCall_3_0() { return cSodateDATETerminalRuleCall_3_0; }

		//sotime=TIME
		public Assignment getSotimeAssignment_4() { return cSotimeAssignment_4; }

		//TIME
		public RuleCall getSotimeTIMETerminalRuleCall_4_0() { return cSotimeTIMETerminalRuleCall_4_0; }

		//sodt=TIMESTAMP
		public Assignment getSodtAssignment_5() { return cSodtAssignment_5; }

		//TIMESTAMP
		public RuleCall getSodtTIMESTAMPTerminalRuleCall_5_0() { return cSodtTIMESTAMPTerminalRuleCall_5_0; }
	}

	public class SQLCASEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SQLCASE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprFullExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cWhenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhenSQLCaseWhensParserRuleCall_2_0 = (RuleCall)cWhenAssignment_2.eContents().get(0);
		private final Keyword cENDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SQLCASE returns SQLCaseOperand:
		//	"CASE" expr=FullExpression? when=SQLCaseWhens "END";
		public ParserRule getRule() { return rule; }

		//"CASE" expr=FullExpression? when=SQLCaseWhens "END"
		public Group getGroup() { return cGroup; }

		//"CASE"
		public Keyword getCASEKeyword_0() { return cCASEKeyword_0; }

		//expr=FullExpression?
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//FullExpression
		public RuleCall getExprFullExpressionParserRuleCall_1_0() { return cExprFullExpressionParserRuleCall_1_0; }

		//when=SQLCaseWhens
		public Assignment getWhenAssignment_2() { return cWhenAssignment_2; }

		//SQLCaseWhens
		public RuleCall getWhenSQLCaseWhensParserRuleCall_2_0() { return cWhenSQLCaseWhensParserRuleCall_2_0; }

		//"END"
		public Keyword getENDKeyword_3() { return cENDKeyword_3; }
	}

	public class SQLCaseWhensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SQLCaseWhens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSqlCaseWhenParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cWhenListEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEntriesSqlCaseWhenParserRuleCall_1_1_0 = (RuleCall)cEntriesAssignment_1_1.eContents().get(0);
		
		//SQLCaseWhens:
		//	SqlCaseWhen ({WhenList.entries+=current} entries+=SqlCaseWhen+)?;
		public ParserRule getRule() { return rule; }

		//SqlCaseWhen ({WhenList.entries+=current} entries+=SqlCaseWhen+)?
		public Group getGroup() { return cGroup; }

		//SqlCaseWhen
		public RuleCall getSqlCaseWhenParserRuleCall_0() { return cSqlCaseWhenParserRuleCall_0; }

		//({WhenList.entries+=current} entries+=SqlCaseWhen+)?
		public Group getGroup_1() { return cGroup_1; }

		//{WhenList.entries+=current}
		public Action getWhenListEntriesAction_1_0() { return cWhenListEntriesAction_1_0; }

		//entries+=SqlCaseWhen+
		public Assignment getEntriesAssignment_1_1() { return cEntriesAssignment_1_1; }

		//SqlCaseWhen
		public RuleCall getEntriesSqlCaseWhenParserRuleCall_1_1_0() { return cEntriesSqlCaseWhenParserRuleCall_1_1_0; }
	}

	public class SqlCaseWhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlCaseWhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprFullExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTexpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTexpOperandGroupParserRuleCall_3_0 = (RuleCall)cTexpAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cELSEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEexpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEexpOperandParserRuleCall_4_1_0 = (RuleCall)cEexpAssignment_4_1.eContents().get(0);
		
		//SqlCaseWhen:
		//	"WHEN" expr=FullExpression "THEN" texp=OperandGroup ("ELSE" eexp=Operand)?;
		public ParserRule getRule() { return rule; }

		//"WHEN" expr=FullExpression "THEN" texp=OperandGroup ("ELSE" eexp=Operand)?
		public Group getGroup() { return cGroup; }

		//"WHEN"
		public Keyword getWHENKeyword_0() { return cWHENKeyword_0; }

		//expr=FullExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//FullExpression
		public RuleCall getExprFullExpressionParserRuleCall_1_0() { return cExprFullExpressionParserRuleCall_1_0; }

		//"THEN"
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }

		//texp=OperandGroup
		public Assignment getTexpAssignment_3() { return cTexpAssignment_3; }

		//OperandGroup
		public RuleCall getTexpOperandGroupParserRuleCall_3_0() { return cTexpOperandGroupParserRuleCall_3_0; }

		//("ELSE" eexp=Operand)?
		public Group getGroup_4() { return cGroup_4; }

		//"ELSE"
		public Keyword getELSEKeyword_4_0() { return cELSEKeyword_4_0; }

		//eexp=Operand
		public Assignment getEexpAssignment_4_1() { return cEexpAssignment_4_1; }

		//Operand
		public RuleCall getEexpOperandParserRuleCall_4_1_0() { return cEexpOperandParserRuleCall_4_1_0; }
	}

	public class JoinTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNATURALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cINNERKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cLEFTKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cRIGHTKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cFULLKeyword_1_1_0_2 = (Keyword)cAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOUTERKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cCROSSKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cSTRAIGHT_JOINKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cJOINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//JoinType:
		//	"NATURAL"? ("INNER" | ("LEFT" | "RIGHT" | "FULL") "OUTER"? | "CROSS" | "STRAIGHT_JOIN")? "JOIN";
		public ParserRule getRule() { return rule; }

		//"NATURAL"? ("INNER" | ("LEFT" | "RIGHT" | "FULL") "OUTER"? | "CROSS" | "STRAIGHT_JOIN")? "JOIN"
		public Group getGroup() { return cGroup; }

		//"NATURAL"?
		public Keyword getNATURALKeyword_0() { return cNATURALKeyword_0; }

		//("INNER" | ("LEFT" | "RIGHT" | "FULL") "OUTER"? | "CROSS" | "STRAIGHT_JOIN")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"INNER"
		public Keyword getINNERKeyword_1_0() { return cINNERKeyword_1_0; }

		//("LEFT" | "RIGHT" | "FULL") "OUTER"?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"LEFT" | "RIGHT" | "FULL"
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//"LEFT"
		public Keyword getLEFTKeyword_1_1_0_0() { return cLEFTKeyword_1_1_0_0; }

		//"RIGHT"
		public Keyword getRIGHTKeyword_1_1_0_1() { return cRIGHTKeyword_1_1_0_1; }

		//"FULL"
		public Keyword getFULLKeyword_1_1_0_2() { return cFULLKeyword_1_1_0_2; }

		//"OUTER"?
		public Keyword getOUTERKeyword_1_1_1() { return cOUTERKeyword_1_1_1; }

		//"CROSS"
		public Keyword getCROSSKeyword_1_2() { return cCROSSKeyword_1_2; }

		//"STRAIGHT_JOIN"
		public Keyword getSTRAIGHT_JOINKeyword_1_3() { return cSTRAIGHT_JOINKeyword_1_3; }

		//"JOIN"
		public Keyword getJOINKeyword_2() { return cJOINKeyword_2; }
	}

	public class DBIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DBID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDBNAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DBID:
		//	ID | DBNAME | STRING;
		public ParserRule getRule() { return rule; }

		//ID | DBNAME | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//DBNAME
		public RuleCall getDBNAMETerminalRuleCall_1() { return cDBNAMETerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class StringOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringOperand");
		private final RuleCall cSTRING_TerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringOperand:
		//	STRING_;
		public ParserRule getRule() { return rule; }

		//STRING_
		public RuleCall getSTRING_TerminalRuleCall() { return cSTRING_TerminalRuleCall; }
	}

	public class FNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FNAME:
		//	ID "(";
		public ParserRule getRule() { return rule; }

		//ID "("
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Assignment cIntegerAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntegerINTTerminalRuleCall_0 = (RuleCall)cIntegerAssignment.eContents().get(0);
		
		//IntegerValue:
		//	integer=INT;
		public ParserRule getRule() { return rule; }

		//integer=INT
		public Assignment getIntegerAssignment() { return cIntegerAssignment; }

		//INT
		public RuleCall getIntegerINTTerminalRuleCall_0() { return cIntegerINTTerminalRuleCall_0; }
	}
	
	
	public class EXTRACT_VALUESElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EXTRACT_VALUES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMsMICROSECONDKeyword_0_0 = (Keyword)cMsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSSECONDKeyword_1_0 = (Keyword)cSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMMINUTEKeyword_2_0 = (Keyword)cMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cHHOURKeyword_3_0 = (Keyword)cHEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDayDAYKeyword_4_0 = (Keyword)cDayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cWeekEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cWeekWEEKKeyword_5_0 = (Keyword)cWeekEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cMonthEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cMonthMONTHKeyword_6_0 = (Keyword)cMonthEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cQuartEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cQuartQUARTERKeyword_7_0 = (Keyword)cQuartEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cYearEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cYearYEARKeyword_8_0 = (Keyword)cYearEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMicrosEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMicrosSECOND_MICROSECONDKeyword_9_0 = (Keyword)cMicrosEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cMinMicroEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cMinMicroMINUTE_MICROSECONDKeyword_10_0 = (Keyword)cMinMicroEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cMinSecEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cMinSecMINUTE_SECONDKeyword_11_0 = (Keyword)cMinSecEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cHmsEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cHmsHOUR_MICROSECONDKeyword_12_0 = (Keyword)cHmsEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cHsEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cHsHOUR_SECONDKeyword_13_0 = (Keyword)cHsEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cHminEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cHminHOUR_MINUTEKeyword_14_0 = (Keyword)cHminEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cDmsEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cDmsDAY_MICROSECONDKeyword_15_0 = (Keyword)cDmsEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cDsEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cDsDAY_SECONDKeyword_16_0 = (Keyword)cDsEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cDayminEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cDayminDAY_MINUTEKeyword_17_0 = (Keyword)cDayminEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cDayhEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cDayhDAY_HOURKeyword_18_0 = (Keyword)cDayhEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cYearMonthEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cYearMonthYEAR_MONTHKeyword_19_0 = (Keyword)cYearMonthEnumLiteralDeclaration_19.eContents().get(0);
		
		//enum EXTRACT_VALUES:
		//	ms="MICROSECOND" | s="SECOND" | m="MINUTE" | h="HOUR" | day="DAY" | week="WEEK" | month="MONTH" | quart="QUARTER" |
		//	year="YEAR" | micros="SECOND_MICROSECOND" | minMicro="MINUTE_MICROSECOND" | minSec="MINUTE_SECOND" |
		//	hms="HOUR_MICROSECOND" | hs="HOUR_SECOND" | hmin="HOUR_MINUTE" | dms="DAY_MICROSECOND" | ds="DAY_SECOND" |
		//	daymin="DAY_MINUTE" | dayh="DAY_HOUR" | yearMonth="YEAR_MONTH";
		public EnumRule getRule() { return rule; }

		//ms="MICROSECOND" | s="SECOND" | m="MINUTE" | h="HOUR" | day="DAY" | week="WEEK" | month="MONTH" | quart="QUARTER" |
		//year="YEAR" | micros="SECOND_MICROSECOND" | minMicro="MINUTE_MICROSECOND" | minSec="MINUTE_SECOND" |
		//hms="HOUR_MICROSECOND" | hs="HOUR_SECOND" | hmin="HOUR_MINUTE" | dms="DAY_MICROSECOND" | ds="DAY_SECOND" |
		//daymin="DAY_MINUTE" | dayh="DAY_HOUR" | yearMonth="YEAR_MONTH"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ms="MICROSECOND"
		public EnumLiteralDeclaration getMsEnumLiteralDeclaration_0() { return cMsEnumLiteralDeclaration_0; }

		//"MICROSECOND"
		public Keyword getMsMICROSECONDKeyword_0_0() { return cMsMICROSECONDKeyword_0_0; }

		//s="SECOND"
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_1() { return cSEnumLiteralDeclaration_1; }

		//"SECOND"
		public Keyword getSSECONDKeyword_1_0() { return cSSECONDKeyword_1_0; }

		//m="MINUTE"
		public EnumLiteralDeclaration getMEnumLiteralDeclaration_2() { return cMEnumLiteralDeclaration_2; }

		//"MINUTE"
		public Keyword getMMINUTEKeyword_2_0() { return cMMINUTEKeyword_2_0; }

		//h="HOUR"
		public EnumLiteralDeclaration getHEnumLiteralDeclaration_3() { return cHEnumLiteralDeclaration_3; }

		//"HOUR"
		public Keyword getHHOURKeyword_3_0() { return cHHOURKeyword_3_0; }

		//day="DAY"
		public EnumLiteralDeclaration getDayEnumLiteralDeclaration_4() { return cDayEnumLiteralDeclaration_4; }

		//"DAY"
		public Keyword getDayDAYKeyword_4_0() { return cDayDAYKeyword_4_0; }

		//week="WEEK"
		public EnumLiteralDeclaration getWeekEnumLiteralDeclaration_5() { return cWeekEnumLiteralDeclaration_5; }

		//"WEEK"
		public Keyword getWeekWEEKKeyword_5_0() { return cWeekWEEKKeyword_5_0; }

		//month="MONTH"
		public EnumLiteralDeclaration getMonthEnumLiteralDeclaration_6() { return cMonthEnumLiteralDeclaration_6; }

		//"MONTH"
		public Keyword getMonthMONTHKeyword_6_0() { return cMonthMONTHKeyword_6_0; }

		//quart="QUARTER"
		public EnumLiteralDeclaration getQuartEnumLiteralDeclaration_7() { return cQuartEnumLiteralDeclaration_7; }

		//"QUARTER"
		public Keyword getQuartQUARTERKeyword_7_0() { return cQuartQUARTERKeyword_7_0; }

		//year="YEAR"
		public EnumLiteralDeclaration getYearEnumLiteralDeclaration_8() { return cYearEnumLiteralDeclaration_8; }

		//"YEAR"
		public Keyword getYearYEARKeyword_8_0() { return cYearYEARKeyword_8_0; }

		//micros="SECOND_MICROSECOND"
		public EnumLiteralDeclaration getMicrosEnumLiteralDeclaration_9() { return cMicrosEnumLiteralDeclaration_9; }

		//"SECOND_MICROSECOND"
		public Keyword getMicrosSECOND_MICROSECONDKeyword_9_0() { return cMicrosSECOND_MICROSECONDKeyword_9_0; }

		//minMicro="MINUTE_MICROSECOND"
		public EnumLiteralDeclaration getMinMicroEnumLiteralDeclaration_10() { return cMinMicroEnumLiteralDeclaration_10; }

		//"MINUTE_MICROSECOND"
		public Keyword getMinMicroMINUTE_MICROSECONDKeyword_10_0() { return cMinMicroMINUTE_MICROSECONDKeyword_10_0; }

		//minSec="MINUTE_SECOND"
		public EnumLiteralDeclaration getMinSecEnumLiteralDeclaration_11() { return cMinSecEnumLiteralDeclaration_11; }

		//"MINUTE_SECOND"
		public Keyword getMinSecMINUTE_SECONDKeyword_11_0() { return cMinSecMINUTE_SECONDKeyword_11_0; }

		//hms="HOUR_MICROSECOND"
		public EnumLiteralDeclaration getHmsEnumLiteralDeclaration_12() { return cHmsEnumLiteralDeclaration_12; }

		//"HOUR_MICROSECOND"
		public Keyword getHmsHOUR_MICROSECONDKeyword_12_0() { return cHmsHOUR_MICROSECONDKeyword_12_0; }

		//hs="HOUR_SECOND"
		public EnumLiteralDeclaration getHsEnumLiteralDeclaration_13() { return cHsEnumLiteralDeclaration_13; }

		//"HOUR_SECOND"
		public Keyword getHsHOUR_SECONDKeyword_13_0() { return cHsHOUR_SECONDKeyword_13_0; }

		//hmin="HOUR_MINUTE"
		public EnumLiteralDeclaration getHminEnumLiteralDeclaration_14() { return cHminEnumLiteralDeclaration_14; }

		//"HOUR_MINUTE"
		public Keyword getHminHOUR_MINUTEKeyword_14_0() { return cHminHOUR_MINUTEKeyword_14_0; }

		//dms="DAY_MICROSECOND"
		public EnumLiteralDeclaration getDmsEnumLiteralDeclaration_15() { return cDmsEnumLiteralDeclaration_15; }

		//"DAY_MICROSECOND"
		public Keyword getDmsDAY_MICROSECONDKeyword_15_0() { return cDmsDAY_MICROSECONDKeyword_15_0; }

		//ds="DAY_SECOND"
		public EnumLiteralDeclaration getDsEnumLiteralDeclaration_16() { return cDsEnumLiteralDeclaration_16; }

		//"DAY_SECOND"
		public Keyword getDsDAY_SECONDKeyword_16_0() { return cDsDAY_SECONDKeyword_16_0; }

		//daymin="DAY_MINUTE"
		public EnumLiteralDeclaration getDayminEnumLiteralDeclaration_17() { return cDayminEnumLiteralDeclaration_17; }

		//"DAY_MINUTE"
		public Keyword getDayminDAY_MINUTEKeyword_17_0() { return cDayminDAY_MINUTEKeyword_17_0; }

		//dayh="DAY_HOUR"
		public EnumLiteralDeclaration getDayhEnumLiteralDeclaration_18() { return cDayhEnumLiteralDeclaration_18; }

		//"DAY_HOUR"
		public Keyword getDayhDAY_HOURKeyword_18_0() { return cDayhDAY_HOURKeyword_18_0; }

		//yearMonth="YEAR_MONTH"
		public EnumLiteralDeclaration getYearMonthEnumLiteralDeclaration_19() { return cYearMonthEnumLiteralDeclaration_19; }

		//"YEAR_MONTH"
		public Keyword getYearMonthYEAR_MONTHKeyword_19_0() { return cYearMonthYEAR_MONTHKeyword_19_0; }
	}

	public class XFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "XFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXinINKeyword_0_0 = (Keyword)cXinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXnotinEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXnotinNOTINKeyword_1_0 = (Keyword)cXnotinEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXeqEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXeqEQUALKeyword_2_0 = (Keyword)cXeqEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cXnoteqEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cXnoteqNOTEQUALKeyword_3_0 = (Keyword)cXnoteqEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cXlsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cXlsLESSKeyword_4_0 = (Keyword)cXlsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cXgtEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cXgtGREATERKeyword_5_0 = (Keyword)cXgtEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cXlsrEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cXlsrLESSKeyword_6_0 = (Keyword)cXlsrEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cXgtlEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cXgtlGREATERKeyword_7_0 = (Keyword)cXgtlEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cXbwnEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cXbwnBETWEENKeyword_8_0 = (Keyword)cXbwnEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cXbwncEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cXbwncBETWEENKeyword_9_0 = (Keyword)cXbwncEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cXbwnlEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cXbwnlBETWEENKeyword_10_0 = (Keyword)cXbwnlEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cXbwnrEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cXbwnrBETWEENKeyword_11_0 = (Keyword)cXbwnrEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum XFunction:
		//	xin="IN" | xnotin="NOTIN" | xeq="EQUAL" | xnoteq="NOTEQUAL" | xls="LESS" | xgt="GREATER" | xlsr="LESS]" |
		//	xgtl="[GREATER" | xbwn="BETWEEN" | xbwnc="[BETWEEN]" | xbwnl="[BETWEEN" | xbwnr="BETWEEN]";
		public EnumRule getRule() { return rule; }

		//xin="IN" | xnotin="NOTIN" | xeq="EQUAL" | xnoteq="NOTEQUAL" | xls="LESS" | xgt="GREATER" | xlsr="LESS]" |
		//xgtl="[GREATER" | xbwn="BETWEEN" | xbwnc="[BETWEEN]" | xbwnl="[BETWEEN" | xbwnr="BETWEEN]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//xin="IN"
		public EnumLiteralDeclaration getXinEnumLiteralDeclaration_0() { return cXinEnumLiteralDeclaration_0; }

		//"IN"
		public Keyword getXinINKeyword_0_0() { return cXinINKeyword_0_0; }

		//xnotin="NOTIN"
		public EnumLiteralDeclaration getXnotinEnumLiteralDeclaration_1() { return cXnotinEnumLiteralDeclaration_1; }

		//"NOTIN"
		public Keyword getXnotinNOTINKeyword_1_0() { return cXnotinNOTINKeyword_1_0; }

		//xeq="EQUAL"
		public EnumLiteralDeclaration getXeqEnumLiteralDeclaration_2() { return cXeqEnumLiteralDeclaration_2; }

		//"EQUAL"
		public Keyword getXeqEQUALKeyword_2_0() { return cXeqEQUALKeyword_2_0; }

		//xnoteq="NOTEQUAL"
		public EnumLiteralDeclaration getXnoteqEnumLiteralDeclaration_3() { return cXnoteqEnumLiteralDeclaration_3; }

		//"NOTEQUAL"
		public Keyword getXnoteqNOTEQUALKeyword_3_0() { return cXnoteqNOTEQUALKeyword_3_0; }

		//xls="LESS"
		public EnumLiteralDeclaration getXlsEnumLiteralDeclaration_4() { return cXlsEnumLiteralDeclaration_4; }

		//"LESS"
		public Keyword getXlsLESSKeyword_4_0() { return cXlsLESSKeyword_4_0; }

		//xgt="GREATER"
		public EnumLiteralDeclaration getXgtEnumLiteralDeclaration_5() { return cXgtEnumLiteralDeclaration_5; }

		//"GREATER"
		public Keyword getXgtGREATERKeyword_5_0() { return cXgtGREATERKeyword_5_0; }

		//xlsr="LESS]"
		public EnumLiteralDeclaration getXlsrEnumLiteralDeclaration_6() { return cXlsrEnumLiteralDeclaration_6; }

		//"LESS]"
		public Keyword getXlsrLESSKeyword_6_0() { return cXlsrLESSKeyword_6_0; }

		//xgtl="[GREATER"
		public EnumLiteralDeclaration getXgtlEnumLiteralDeclaration_7() { return cXgtlEnumLiteralDeclaration_7; }

		//"[GREATER"
		public Keyword getXgtlGREATERKeyword_7_0() { return cXgtlGREATERKeyword_7_0; }

		//xbwn="BETWEEN"
		public EnumLiteralDeclaration getXbwnEnumLiteralDeclaration_8() { return cXbwnEnumLiteralDeclaration_8; }

		//"BETWEEN"
		public Keyword getXbwnBETWEENKeyword_8_0() { return cXbwnBETWEENKeyword_8_0; }

		//xbwnc="[BETWEEN]"
		public EnumLiteralDeclaration getXbwncEnumLiteralDeclaration_9() { return cXbwncEnumLiteralDeclaration_9; }

		//"[BETWEEN]"
		public Keyword getXbwncBETWEENKeyword_9_0() { return cXbwncBETWEENKeyword_9_0; }

		//xbwnl="[BETWEEN"
		public EnumLiteralDeclaration getXbwnlEnumLiteralDeclaration_10() { return cXbwnlEnumLiteralDeclaration_10; }

		//"[BETWEEN"
		public Keyword getXbwnlBETWEENKeyword_10_0() { return cXbwnlBETWEENKeyword_10_0; }

		//xbwnr="BETWEEN]"
		public EnumLiteralDeclaration getXbwnrEnumLiteralDeclaration_11() { return cXbwnrEnumLiteralDeclaration_11; }

		//"BETWEEN]"
		public Keyword getXbwnrBETWEENKeyword_11_0() { return cXbwnrBETWEENKeyword_11_0; }
	}
	
	private ModelElements pModel;
	private FetchFirstElements pFetchFirst;
	private OffsetElements pOffset;
	private LimitElements pLimit;
	private SelectQueryElements pSelectQuery;
	private SelectSubSetElements pSelectSubSet;
	private SelectElements pSelect;
	private ColumnsElements pColumns;
	private ColumnOrAliasElements pColumnOrAlias;
	private ColumnFullElements pColumnFull;
	private TablesElements pTables;
	private FromTableElements pFromTable;
	private FromTableJoinElements pFromTableJoin;
	private TableOrAliasElements pTableOrAlias;
	private PivotTableElements pPivotTable;
	private PivotFunctionsElements pPivotFunctions;
	private PivotFunctionElements pPivotFunction;
	private PivotInClauseElements pPivotInClause;
	private PivotInClauseAnyElements pPivotInClauseAny;
	private UnpivotTableElements pUnpivotTable;
	private UnpivotInClauseElements pUnpivotInClause;
	private UnpivotInClauseArgsElements pUnpivotInClauseArgs;
	private UnpivotInClauseArgElements pUnpivotInClauseArg;
	private PivotForClauseElements pPivotForClause;
	private PivotColumnsElements pPivotColumns;
	private PivotColsElements pPivotCols;
	private PivotColElements pPivotCol;
	private TableFullElements pTableFull;
	private DbObjectNameAllElements pDbObjectNameAll;
	private DbObjectNameElements pDbObjectName;
	private OrderByColumnsElements pOrderByColumns;
	private OrderByColumnFullElements pOrderByColumnFull;
	private GroupByColumnsElements pGroupByColumns;
	private GroupByColumnFullElements pGroupByColumnFull;
	private FullExpressionElements pFullExpression;
	private ExpressionFragmentSecondElements pExpressionFragmentSecond;
	private ExpressionFragmentElements pExpressionFragment;
	private ExpressionGroupElements pExpressionGroup;
	private XExpressionElements pXExpression;
	private XExpression_Elements pXExpression_;
	private XExpressionParamsElements pXExpressionParams;
	private JRParameterElements pJRParameter;
	private ExpressionElements pExpression;
	private ComparisonElements pComparison;
	private LikeElements pLike;
	private LikeOperandElements pLikeOperand;
	private BetweenElements pBetween;
	private InOperatorElements pInOperator;
	private ExistsOperatorElements pExistsOperator;
	private OperandListGroupElements pOperandListGroup;
	private OperandListElements pOperandList;
	private OperandGroupElements pOperandGroup;
	private OperandElements pOperand;
	private OperandFragmentElements pOperandFragment;
	private OperandFunctionElements pOperandFunction;
	private FunctionExtractElements pFunctionExtract;
	private FunctionAnalyticalElements pFunctionAnalytical;
	private AnalyticClauseElements pAnalyticClause;
	private WindowingClauseElements pWindowingClause;
	private WindowingClauseBetweenElements pWindowingClauseBetween;
	private WindowingClauseOperandFollowingElements pWindowingClauseOperandFollowing;
	private WindowingClauseOperandPrecedingElements pWindowingClauseOperandPreceding;
	private OrderByClauseElements pOrderByClause;
	private OrderByClauseArgsElements pOrderByClauseArgs;
	private OrderByClauseArgElements pOrderByClauseArg;
	private QueryPartitionClauseElements pQueryPartitionClause;
	private AnalyticExprArgsElements pAnalyticExprArgs;
	private AnalyticExprArgElements pAnalyticExprArg;
	private OpFunctionArgElements pOpFunctionArg;
	private OpFunctionArgOperandElements pOpFunctionArgOperand;
	private OpFunctionCastElements pOpFunctionCast;
	private OpFunctionArgAgregateElements pOpFunctionArgAgregate;
	private XOperandFragmentElements pXOperandFragment;
	private ParameterOperandElements pParameterOperand;
	private ExclamationParameterOperandElements pExclamationParameterOperand;
	private ColumnOperandElements pColumnOperand;
	private SubQueryOperandElements pSubQueryOperand;
	private ScalarOperandElements pScalarOperand;
	private SQLCASEElements pSQLCASE;
	private SQLCaseWhensElements pSQLCaseWhens;
	private SqlCaseWhenElements pSqlCaseWhen;
	private EXTRACT_VALUESElements unknownRuleEXTRACT_VALUES;
	private XFunctionElements unknownRuleXFunction;
	private JoinTypeElements pJoinType;
	private DBIDElements pDBID;
	private StringOperandElements pStringOperand;
	private FNAMEElements pFNAME;
	private IntegerValueElements pIntegerValue;
	private TerminalRule tJRPARAM;
	private TerminalRule tJRNPARAM;
	private TerminalRule tSTAR;
	private TerminalRule tUNSIGNED;
	private TerminalRule tINT;
	private TerminalRule tSIGNED_DOUBLE;
	private TerminalRule tTIMESTAMP;
	private TerminalRule tDATE;
	private TerminalRule tTIME;
	private TerminalRule tSTRING_;
	private TerminalRule tSTRING;
	private TerminalRule tDBNAME;
	private TerminalRule tID;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.jaspersoft.studio.data.Sql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	query=SelectQuery;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//FetchFirst:
	//	fetchFirst=IntegerValue? row=("ROW" | "ROWS") "ONLY";
	public FetchFirstElements getFetchFirstAccess() {
		return (pFetchFirst != null) ? pFetchFirst : (pFetchFirst = new FetchFirstElements());
	}
	
	public ParserRule getFetchFirstRule() {
		return getFetchFirstAccess().getRule();
	}

	//Offset:
	//	offset=INT;
	public OffsetElements getOffsetAccess() {
		return (pOffset != null) ? pOffset : (pOffset = new OffsetElements());
	}
	
	public ParserRule getOffsetRule() {
		return getOffsetAccess().getRule();
	}

	//Limit:
	//	{Limit} "ALL" | l1=INT ("," l2=IntegerValue)?;
	public LimitElements getLimitAccess() {
		return (pLimit != null) ? pLimit : (pLimit = new LimitElements());
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}

	//SelectQuery:
	//	Select op+=SelectSubSet*;
	public SelectQueryElements getSelectQueryAccess() {
		return (pSelectQuery != null) ? pSelectQuery : (pSelectQuery = new SelectQueryElements());
	}
	
	public ParserRule getSelectQueryRule() {
		return getSelectQueryAccess().getRule();
	}

	//SelectSubSet:
	//	op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT") all="ALL"? query=Select;
	public SelectSubSetElements getSelectSubSetAccess() {
		return (pSelectSubSet != null) ? pSelectSubSet : (pSelectSubSet = new SelectSubSetElements());
	}
	
	public ParserRule getSelectSubSetRule() {
		return getSelectSubSetAccess().getRule();
	}

	//Select:
	//	select="SELECT" "DISTINCT"? ("TOP" (INT | SIGNED_DOUBLE) "PERCENT"? "WITH TIES"?)? cols=Columns "FROM" tbl=Tables
	//	("WHERE" whereExpression=FullExpression)? ("GROUP BY" groupByEntry=GroupByColumns)? ("HAVING"
	//	havingEntry=FullExpression)? ("ORDER BY" orderByEntry=OrderByColumns)? ("LIMIT" lim=Limit)? ("OFFSET" offset=Offset)?
	//	("FETCH FIRST" fetchFirst=FetchFirst)?;
	public SelectElements getSelectAccess() {
		return (pSelect != null) ? pSelect : (pSelect = new SelectElements());
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//Columns returns OrColumn:
	//	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
	public ColumnsElements getColumnsAccess() {
		return (pColumns != null) ? pColumns : (pColumns = new ColumnsElements());
	}
	
	public ParserRule getColumnsRule() {
		return getColumnsAccess().getRule();
	}

	//ColumnOrAlias:
	//	ce=OperandGroup alias="AS"? colAlias=DbObjectName? | allCols=STAR | dbAllCols=DbObjectNameAll;
	public ColumnOrAliasElements getColumnOrAliasAccess() {
		return (pColumnOrAlias != null) ? pColumnOrAlias : (pColumnOrAlias = new ColumnOrAliasElements());
	}
	
	public ParserRule getColumnOrAliasRule() {
		return getColumnOrAliasAccess().getRule();
	}

	//ColumnFull:
	//	DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?;
	public ColumnFullElements getColumnFullAccess() {
		return (pColumnFull != null) ? pColumnFull : (pColumnFull = new ColumnFullElements());
	}
	
	public ParserRule getColumnFullRule() {
		return getColumnFullAccess().getRule();
	}

	//Tables returns OrTable:
	//	FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?;
	public TablesElements getTablesAccess() {
		return (pTables != null) ? pTables : (pTables = new TablesElements());
	}
	
	public ParserRule getTablesRule() {
		return getTablesAccess().getRule();
	}

	//FromTable:
	//	table=TableOrAlias fjoin+=FromTableJoin*;
	public FromTableElements getFromTableAccess() {
		return (pFromTable != null) ? pFromTable : (pFromTable = new FromTableElements());
	}
	
	public ParserRule getFromTableRule() {
		return getFromTableAccess().getRule();
	}

	//FromTableJoin:
	//	join=JoinType onTable=TableOrAlias "ON" joinExpr=FullExpression;
	public FromTableJoinElements getFromTableJoinAccess() {
		return (pFromTableJoin != null) ? pFromTableJoin : (pFromTableJoin = new FromTableJoinElements());
	}
	
	public ParserRule getFromTableJoinRule() {
		return getFromTableJoinAccess().getRule();
	}

	//TableOrAlias:
	//	(tfull=TableFull | sq=SubQueryOperand) (pivot=PivotTable | unpivot=UnpivotTable)? alias="AS"? tblAlias=DbObjectName?;
	public TableOrAliasElements getTableOrAliasAccess() {
		return (pTableOrAlias != null) ? pTableOrAlias : (pTableOrAlias = new TableOrAliasElements());
	}
	
	public ParserRule getTableOrAliasRule() {
		return getTableOrAliasAccess().getRule();
	}

	//PivotTable:
	//	"PIVOT" "XML"? "(" pfun=PivotFunctions pfor=PivotForClause pin=PivotInClause ")";
	public PivotTableElements getPivotTableAccess() {
		return (pPivotTable != null) ? pPivotTable : (pPivotTable = new PivotTableElements());
	}
	
	public ParserRule getPivotTableRule() {
		return getPivotTableAccess().getRule();
	}

	//PivotFunctions:
	//	abc= // PivotFunction ({pfnct.entries+=current} ("," entries+=PivotFunction)+)?;
	//	ID;
	public PivotFunctionsElements getPivotFunctionsAccess() {
		return (pPivotFunctions != null) ? pPivotFunctions : (pPivotFunctions = new PivotFunctionsElements());
	}
	
	public ParserRule getPivotFunctionsRule() {
		return getPivotFunctionsAccess().getRule();
	}

	//PivotFunction:
	//	ID "(" PivotCol ")" "AS"? ID;
	public PivotFunctionElements getPivotFunctionAccess() {
		return (pPivotFunction != null) ? pPivotFunction : (pPivotFunction = new PivotFunctionElements());
	}
	
	public ParserRule getPivotFunctionRule() {
		return getPivotFunctionAccess().getRule();
	}

	//PivotInClause:
	//	"IN" "(" (sq=SubQueryOperand | args=UnpivotInClauseArgs | pinany=PivotInClauseAny) ")";
	public PivotInClauseElements getPivotInClauseAccess() {
		return (pPivotInClause != null) ? pPivotInClause : (pPivotInClause = new PivotInClauseElements());
	}
	
	public ParserRule getPivotInClauseRule() {
		return getPivotInClauseAccess().getRule();
	}

	//PivotInClauseAny:
	//	"ANY" ("," "ANY")?;
	public PivotInClauseAnyElements getPivotInClauseAnyAccess() {
		return (pPivotInClauseAny != null) ? pPivotInClauseAny : (pPivotInClauseAny = new PivotInClauseAnyElements());
	}
	
	public ParserRule getPivotInClauseAnyRule() {
		return getPivotInClauseAnyAccess().getRule();
	}

	//UnpivotTable:
	//	"UNPIVOT" (("INCLUDE" | "EXCLUDE") "NULLS")? "(" pcols=PivotColumns pfor=PivotForClause inop=UnpivotInClause ")";
	public UnpivotTableElements getUnpivotTableAccess() {
		return (pUnpivotTable != null) ? pUnpivotTable : (pUnpivotTable = new UnpivotTableElements());
	}
	
	public ParserRule getUnpivotTableRule() {
		return getUnpivotTableAccess().getRule();
	}

	//UnpivotInClause:
	//	{UnipivotInClause} op="IN" "(" args=UnpivotInClauseArgs ")";
	public UnpivotInClauseElements getUnpivotInClauseAccess() {
		return (pUnpivotInClause != null) ? pUnpivotInClause : (pUnpivotInClause = new UnpivotInClauseElements());
	}
	
	public ParserRule getUnpivotInClauseRule() {
		return getUnpivotInClauseAccess().getRule();
	}

	//UnpivotInClauseArgs:
	//	UnpivotInClauseArg ({uicargs.entries+=current} ("," entries+=UnpivotInClauseArg)+)?;
	public UnpivotInClauseArgsElements getUnpivotInClauseArgsAccess() {
		return (pUnpivotInClauseArgs != null) ? pUnpivotInClauseArgs : (pUnpivotInClauseArgs = new UnpivotInClauseArgsElements());
	}
	
	public ParserRule getUnpivotInClauseArgsRule() {
		return getUnpivotInClauseArgsAccess().getRule();
	}

	//UnpivotInClauseArg:
	//	pcols=PivotColumns ("AS" cfuls=PivotColumns)?;
	public UnpivotInClauseArgElements getUnpivotInClauseArgAccess() {
		return (pUnpivotInClauseArg != null) ? pUnpivotInClauseArg : (pUnpivotInClauseArg = new UnpivotInClauseArgElements());
	}
	
	public ParserRule getUnpivotInClauseArgRule() {
		return getUnpivotInClauseArgAccess().getRule();
	}

	//PivotForClause:
	//	"FOR" (ColumnFull | "(" Columns ")");
	public PivotForClauseElements getPivotForClauseAccess() {
		return (pPivotForClause != null) ? pPivotForClause : (pPivotForClause = new PivotForClauseElements());
	}
	
	public ParserRule getPivotForClauseRule() {
		return getPivotForClauseAccess().getRule();
	}

	//PivotColumns:
	//	PivotCol | "(" PivotCols ")";
	public PivotColumnsElements getPivotColumnsAccess() {
		return (pPivotColumns != null) ? pPivotColumns : (pPivotColumns = new PivotColumnsElements());
	}
	
	public ParserRule getPivotColumnsRule() {
		return getPivotColumnsAccess().getRule();
	}

	//PivotCols returns Pivots:
	//	PivotCol ({pvcs.entries+=current} ("," entries+=PivotCol)+)?;
	public PivotColsElements getPivotColsAccess() {
		return (pPivotCols != null) ? pPivotCols : (pPivotCols = new PivotColsElements());
	}
	
	public ParserRule getPivotColsRule() {
		return getPivotColsAccess().getRule();
	}

	//PivotCol:
	//	DbObjectName ({pcols.entries+=current} ("." entries+=DbObjectName)+)?;
	public PivotColElements getPivotColAccess() {
		return (pPivotCol != null) ? pPivotCol : (pPivotCol = new PivotColElements());
	}
	
	public ParserRule getPivotColRule() {
		return getPivotColAccess().getRule();
	}

	//TableFull:
	//	DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?;
	public TableFullElements getTableFullAccess() {
		return (pTableFull != null) ? pTableFull : (pTableFull = new TableFullElements());
	}
	
	public ParserRule getTableFullRule() {
		return getTableFullAccess().getRule();
	}

	//DbObjectNameAll:
	//	dbname=DBID "." STAR;
	public DbObjectNameAllElements getDbObjectNameAllAccess() {
		return (pDbObjectNameAll != null) ? pDbObjectNameAll : (pDbObjectNameAll = new DbObjectNameAllElements());
	}
	
	public ParserRule getDbObjectNameAllRule() {
		return getDbObjectNameAllAccess().getRule();
	}

	//DbObjectName:
	//	dbname=DBID;
	public DbObjectNameElements getDbObjectNameAccess() {
		return (pDbObjectName != null) ? pDbObjectName : (pDbObjectName = new DbObjectNameElements());
	}
	
	public ParserRule getDbObjectNameRule() {
		return getDbObjectNameAccess().getRule();
	}

	//OrderByColumns returns OrOrderByColumn:
	//	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
	public OrderByColumnsElements getOrderByColumnsAccess() {
		return (pOrderByColumns != null) ? pOrderByColumns : (pOrderByColumns = new OrderByColumnsElements());
	}
	
	public ParserRule getOrderByColumnsRule() {
		return getOrderByColumnsAccess().getRule();
	}

	//OrderByColumnFull:
	//	(colOrder=ColumnFull | colOrderInt=UNSIGNED) direction=("ASC" | "DESC")?;
	public OrderByColumnFullElements getOrderByColumnFullAccess() {
		return (pOrderByColumnFull != null) ? pOrderByColumnFull : (pOrderByColumnFull = new OrderByColumnFullElements());
	}
	
	public ParserRule getOrderByColumnFullRule() {
		return getOrderByColumnFullAccess().getRule();
	}

	//GroupByColumns returns OrGroupByColumn:
	//	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
	public GroupByColumnsElements getGroupByColumnsAccess() {
		return (pGroupByColumns != null) ? pGroupByColumns : (pGroupByColumns = new GroupByColumnsElements());
	}
	
	public ParserRule getGroupByColumnsRule() {
		return getGroupByColumnsAccess().getRule();
	}

	//GroupByColumnFull:
	//	colGrBy=ColumnFull | gbFunction=OperandFunction | grByInt=UNSIGNED;
	public GroupByColumnFullElements getGroupByColumnFullAccess() {
		return (pGroupByColumnFull != null) ? pGroupByColumnFull : (pGroupByColumnFull = new GroupByColumnFullElements());
	}
	
	public ParserRule getGroupByColumnFullRule() {
		return getGroupByColumnFullAccess().getRule();
	}

	//FullExpression returns OrExpr:
	//	ExpressionFragment ({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?;
	public FullExpressionElements getFullExpressionAccess() {
		return (pFullExpression != null) ? pFullExpression : (pFullExpression = new FullExpressionElements());
	}
	
	public ParserRule getFullExpressionRule() {
		return getFullExpressionAccess().getRule();
	}

	//ExpressionFragmentSecond returns FullExpression:
	//	c=("AND" | "OR") efrag=ExpressionFragment | notPrm=JRNPARAM;
	public ExpressionFragmentSecondElements getExpressionFragmentSecondAccess() {
		return (pExpressionFragmentSecond != null) ? pExpressionFragmentSecond : (pExpressionFragmentSecond = new ExpressionFragmentSecondElements());
	}
	
	public ParserRule getExpressionFragmentSecondRule() {
		return getExpressionFragmentSecondAccess().getRule();
	}

	//ExpressionFragment returns FullExpression:
	//	expgroup=ExpressionGroup | exp=Expression | xexp=(XExpression | XExpression_) | notPrm=JRNPARAM | in=InOperator |
	//	exists=ExistsOperator;
	public ExpressionFragmentElements getExpressionFragmentAccess() {
		return (pExpressionFragment != null) ? pExpressionFragment : (pExpressionFragment = new ExpressionFragmentElements());
	}
	
	public ParserRule getExpressionFragmentRule() {
		return getExpressionFragmentAccess().getRule();
	}

	//ExpressionGroup returns ExprGroup:
	//	{ExprGroup} isnot=("NOT " | "NOT\n")? "(" expr=FullExpression ")";
	public ExpressionGroupElements getExpressionGroupAccess() {
		return (pExpressionGroup != null) ? pExpressionGroup : (pExpressionGroup = new ExpressionGroupElements());
	}
	
	public ParserRule getExpressionGroupRule() {
		return getExpressionGroupAccess().getRule();
	}

	//XExpression returns XExpr:
	//	"$X" {XExpr} "{" xf=XFunction "," col=OperandGroup ("," prm=XExpressionParams)? "}";
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XExpression_ returns XExpr:
	//	"$X" {XExpr} "{" xf=XFunction "|" col=OperandGroup ("|" prm=XExpressionParams)? "}";
	public XExpression_Elements getXExpression_Access() {
		return (pXExpression_ != null) ? pXExpression_ : (pXExpression_ = new XExpression_Elements());
	}
	
	public ParserRule getXExpression_Rule() {
		return getXExpression_Access().getRule();
	}

	//XExpressionParams returns Prms:
	//	JRParameter ({Prms.entries+=current} ("," entries+=JRParameter)+)?;
	public XExpressionParamsElements getXExpressionParamsAccess() {
		return (pXExpressionParams != null) ? pXExpressionParams : (pXExpressionParams = new XExpressionParamsElements());
	}
	
	public ParserRule getXExpressionParamsRule() {
		return getXExpressionParamsAccess().getRule();
	}

	//JRParameter:
	//	jrprm=ID;
	public JRParameterElements getJRParameterAccess() {
		return (pJRParameter != null) ? pJRParameter : (pJRParameter = new JRParameterElements());
	}
	
	public ParserRule getJRParameterRule() {
		return getJRParameterAccess().getRule();
	}

	//Expression returns FullExpression:
	//	op1=Operand (isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | exists=ExistsOperator | between=Between | like=Like
	//	| comp=Comparison);
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Comparison:
	//	operator=(">" | ">=" | "<" | "<=" | "=" | "<>" | "!=" | "^=") subOperator=("ANY" | "ALL" | "SOME")? op2=Operand;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Like:
	//	opLike=("LIKE" | "NOT LIKE") op2=LikeOperand;
	public LikeElements getLikeAccess() {
		return (pLike != null) ? pLike : (pLike = new LikeElements());
	}
	
	public ParserRule getLikeRule() {
		return getLikeAccess().getRule();
	}

	//LikeOperand:
	//	op2=StringOperand | fop2=OperandFunction | fcast=OpFunctionCast | fparam=ParameterOperand;
	public LikeOperandElements getLikeOperandAccess() {
		return (pLikeOperand != null) ? pLikeOperand : (pLikeOperand = new LikeOperandElements());
	}
	
	public ParserRule getLikeOperandRule() {
		return getLikeOperandAccess().getRule();
	}

	//Between:
	//	opBetween=("BETWEEN" | "NOT BETWEEN") op2=OperandGroup "AND" op3=OperandGroup;
	public BetweenElements getBetweenAccess() {
		return (pBetween != null) ? pBetween : (pBetween = new BetweenElements());
	}
	
	public ParserRule getBetweenRule() {
		return getBetweenAccess().getRule();
	}

	//InOperator returns InOper:
	//	{InOper} op=("NOT IN" | "IN") (subquery=SubQueryOperand | opList=OperandListGroup);
	public InOperatorElements getInOperatorAccess() {
		return (pInOperator != null) ? pInOperator : (pInOperator = new InOperatorElements());
	}
	
	public ParserRule getInOperatorRule() {
		return getInOperatorAccess().getRule();
	}

	//ExistsOperator returns ExistsOper:
	//	{ExistsOper} op=("NOT EXISTS" | "EXISTS") (subquery=SubQueryOperand | opList=OperandListGroup);
	public ExistsOperatorElements getExistsOperatorAccess() {
		return (pExistsOperator != null) ? pExistsOperator : (pExistsOperator = new ExistsOperatorElements());
	}
	
	public ParserRule getExistsOperatorRule() {
		return getExistsOperatorAccess().getRule();
	}

	//OperandListGroup:
	//	"(" opGroup=OperandList ")";
	public OperandListGroupElements getOperandListGroupAccess() {
		return (pOperandListGroup != null) ? pOperandListGroup : (pOperandListGroup = new OperandListGroupElements());
	}
	
	public ParserRule getOperandListGroupRule() {
		return getOperandListGroupAccess().getRule();
	}

	//OperandList:
	//	ScalarOperand ({OpList.entries+=current} ("," entries+=ScalarOperand)+)?;
	public OperandListElements getOperandListAccess() {
		return (pOperandList != null) ? pOperandList : (pOperandList = new OperandListElements());
	}
	
	public ParserRule getOperandListRule() {
		return getOperandListAccess().getRule();
	}

	//OperandGroup returns Operands:
	//	Operand | "(" Operand ")";
	public OperandGroupElements getOperandGroupAccess() {
		return (pOperandGroup != null) ? pOperandGroup : (pOperandGroup = new OperandGroupElements());
	}
	
	public ParserRule getOperandGroupRule() {
		return getOperandGroupAccess().getRule();
	}

	//Operand returns Operands:
	//	op1=OperandFragment (({Plus.left=current} "+" | {Minus.left=current} "-" | {Concat.left=current} "||" |
	//	{Multiply.left=current} STAR | {Division.left=current} "/") right=OperandFragment)*;
	public OperandElements getOperandAccess() {
		return (pOperand != null) ? pOperand : (pOperand = new OperandElements());
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}

	//OperandFragment returns Operand:
	//	column=ColumnOperand | xop=XOperandFragment | subq=SubQueryOperand | fcast=OpFunctionCast | fext=FunctionExtract |
	//	func=OperandFunction | sqlcase=SQLCASE;
	public OperandFragmentElements getOperandFragmentAccess() {
		return (pOperandFragment != null) ? pOperandFragment : (pOperandFragment = new OperandFragmentElements());
	}
	
	public ParserRule getOperandFragmentRule() {
		return getOperandFragmentAccess().getRule();
	}

	//OperandFunction returns OpFunction:
	//	{OpFunction} fname=FNAME (star=STAR | args=OpFunctionArg)? ")" fan=FunctionAnalytical?;
	public OperandFunctionElements getOperandFunctionAccess() {
		return (pOperandFunction != null) ? pOperandFunction : (pOperandFunction = new OperandFunctionElements());
	}
	
	public ParserRule getOperandFunctionRule() {
		return getOperandFunctionAccess().getRule();
	}

	//FunctionExtract:
	//	"EXTRACT" "(" v=EXTRACT_VALUES "FROM" operand=OperandGroup ")";
	public FunctionExtractElements getFunctionExtractAccess() {
		return (pFunctionExtract != null) ? pFunctionExtract : (pFunctionExtract = new FunctionExtractElements());
	}
	
	public ParserRule getFunctionExtractRule() {
		return getFunctionExtractAccess().getRule();
	}

	//FunctionAnalytical:
	//	"OVER" "(" anClause=AnalyticClause ")";
	public FunctionAnalyticalElements getFunctionAnalyticalAccess() {
		return (pFunctionAnalytical != null) ? pFunctionAnalytical : (pFunctionAnalytical = new FunctionAnalyticalElements());
	}
	
	public ParserRule getFunctionAnalyticalRule() {
		return getFunctionAnalyticalAccess().getRule();
	}

	//AnalyticClause:
	//	{AnalyticClause} abc=QueryPartitionClause? (obc=OrderByClause winc=WindowingClause?)?;
	public AnalyticClauseElements getAnalyticClauseAccess() {
		return (pAnalyticClause != null) ? pAnalyticClause : (pAnalyticClause = new AnalyticClauseElements());
	}
	
	public ParserRule getAnalyticClauseRule() {
		return getAnalyticClauseAccess().getRule();
	}

	//WindowingClause:
	//	("ROWS" | "RANGE") (WindowingClauseBetween | WindowingClauseOperandPreceding);
	public WindowingClauseElements getWindowingClauseAccess() {
		return (pWindowingClause != null) ? pWindowingClause : (pWindowingClause = new WindowingClauseElements());
	}
	
	public ParserRule getWindowingClauseRule() {
		return getWindowingClauseAccess().getRule();
	}

	//WindowingClauseBetween:
	//	"BETWEEN" wcoP=WindowingClauseOperandPreceding "AND" wcoF=WindowingClauseOperandFollowing;
	public WindowingClauseBetweenElements getWindowingClauseBetweenAccess() {
		return (pWindowingClauseBetween != null) ? pWindowingClauseBetween : (pWindowingClauseBetween = new WindowingClauseBetweenElements());
	}
	
	public ParserRule getWindowingClauseBetweenRule() {
		return getWindowingClauseBetweenAccess().getRule();
	}

	//WindowingClauseOperandFollowing:
	//	{WindowingClauseOperandFollowing} ("UNBOUNDED FOLLOWING" | "CURRENT ROW" | exp=AnalyticExprArg ("PRECEDING" |
	//	"FOLLOWING"));
	public WindowingClauseOperandFollowingElements getWindowingClauseOperandFollowingAccess() {
		return (pWindowingClauseOperandFollowing != null) ? pWindowingClauseOperandFollowing : (pWindowingClauseOperandFollowing = new WindowingClauseOperandFollowingElements());
	}
	
	public ParserRule getWindowingClauseOperandFollowingRule() {
		return getWindowingClauseOperandFollowingAccess().getRule();
	}

	//WindowingClauseOperandPreceding:
	//	{WindowingClauseOperandPreceding} ("UNBOUNDED PRECEDING" | "CURRENT ROW" | expr=AnalyticExprArg ("PRECEDING" |
	//	"FOLLOWING"));
	public WindowingClauseOperandPrecedingElements getWindowingClauseOperandPrecedingAccess() {
		return (pWindowingClauseOperandPreceding != null) ? pWindowingClauseOperandPreceding : (pWindowingClauseOperandPreceding = new WindowingClauseOperandPrecedingElements());
	}
	
	public ParserRule getWindowingClauseOperandPrecedingRule() {
		return getWindowingClauseOperandPrecedingAccess().getRule();
	}

	//OrderByClause:
	//	("ORDER BY" | "ORDER SIBLINGS BY") args=OrderByClauseArgs;
	public OrderByClauseElements getOrderByClauseAccess() {
		return (pOrderByClause != null) ? pOrderByClause : (pOrderByClause = new OrderByClauseElements());
	}
	
	public ParserRule getOrderByClauseRule() {
		return getOrderByClauseAccess().getRule();
	}

	//OrderByClauseArgs:
	//	OrderByClauseArg ({OBCArgs.entries+=current} ("," entries+=OrderByClauseArg)+)?;
	public OrderByClauseArgsElements getOrderByClauseArgsAccess() {
		return (pOrderByClauseArgs != null) ? pOrderByClauseArgs : (pOrderByClauseArgs = new OrderByClauseArgsElements());
	}
	
	public ParserRule getOrderByClauseArgsRule() {
		return getOrderByClauseArgsAccess().getRule();
	}

	//OrderByClauseArg:
	//	col=AnalyticExprArg ("ASC" | "DESC")? ("NULLS" ("FIRST" | "LAST"))?;
	public OrderByClauseArgElements getOrderByClauseArgAccess() {
		return (pOrderByClauseArg != null) ? pOrderByClauseArg : (pOrderByClauseArg = new OrderByClauseArgElements());
	}
	
	public ParserRule getOrderByClauseArgRule() {
		return getOrderByClauseArgAccess().getRule();
	}

	//QueryPartitionClause:
	//	"PARTITION BY" (args=AnalyticExprArgs | "(" AnalyticExprArgs ")");
	public QueryPartitionClauseElements getQueryPartitionClauseAccess() {
		return (pQueryPartitionClause != null) ? pQueryPartitionClause : (pQueryPartitionClause = new QueryPartitionClauseElements());
	}
	
	public ParserRule getQueryPartitionClauseRule() {
		return getQueryPartitionClauseAccess().getRule();
	}

	//AnalyticExprArgs:
	//	AnalyticExprArg ({AExpArgs.entries+=current} ("," entries+=AnalyticExprArg)+)?;
	public AnalyticExprArgsElements getAnalyticExprArgsAccess() {
		return (pAnalyticExprArgs != null) ? pAnalyticExprArgs : (pAnalyticExprArgs = new AnalyticExprArgsElements());
	}
	
	public ParserRule getAnalyticExprArgsRule() {
		return getAnalyticExprArgsAccess().getRule();
	}

	//AnalyticExprArg:
	//	ce=Operand colAlias=DbObjectName?;
	public AnalyticExprArgElements getAnalyticExprArgAccess() {
		return (pAnalyticExprArg != null) ? pAnalyticExprArg : (pAnalyticExprArg = new AnalyticExprArgElements());
	}
	
	public ParserRule getAnalyticExprArgRule() {
		return getAnalyticExprArgAccess().getRule();
	}

	//OpFunctionArg:
	//	OpFunctionArgOperand ({OpFList.entries+=current} ("," entries+=OpFunctionArgOperand)+)?;
	public OpFunctionArgElements getOpFunctionArgAccess() {
		return (pOpFunctionArg != null) ? pOpFunctionArg : (pOpFunctionArg = new OpFunctionArgElements());
	}
	
	public ParserRule getOpFunctionArgRule() {
		return getOpFunctionArgAccess().getRule();
	}

	//OpFunctionArgOperand: / *fa=OpFunctionArgAgregate | fc=OpFunctionArgCast |* / op=(OpFunctionArgAgregate | Operand);
	public OpFunctionArgOperandElements getOpFunctionArgOperandAccess() {
		return (pOpFunctionArgOperand != null) ? pOpFunctionArgOperand : (pOpFunctionArgOperand = new OpFunctionArgOperandElements());
	}
	
	public ParserRule getOpFunctionArgOperandRule() {
		return getOpFunctionArgOperandAccess().getRule();
	}

	//OpFunctionCast:
	//	"CAST(" op=OperandGroup "AS" type=ID ("(" p=INT ("," p2=INT)? ")")? ")";
	public OpFunctionCastElements getOpFunctionCastAccess() {
		return (pOpFunctionCast != null) ? pOpFunctionCast : (pOpFunctionCast = new OpFunctionCastElements());
	}
	
	public ParserRule getOpFunctionCastRule() {
		return getOpFunctionCastAccess().getRule();
	}

	//OpFunctionArgAgregate:
	//	("ALL" | "DISTINCT") Operand;
	public OpFunctionArgAgregateElements getOpFunctionArgAgregateAccess() {
		return (pOpFunctionArgAgregate != null) ? pOpFunctionArgAgregate : (pOpFunctionArgAgregate = new OpFunctionArgAgregateElements());
	}
	
	public ParserRule getOpFunctionArgAgregateRule() {
		return getOpFunctionArgAgregateAccess().getRule();
	}

	//XOperandFragment returns Operand:
	//	param=ParameterOperand | eparam=ExclamationParameterOperand | scalar=ScalarOperand;
	public XOperandFragmentElements getXOperandFragmentAccess() {
		return (pXOperandFragment != null) ? pXOperandFragment : (pXOperandFragment = new XOperandFragmentElements());
	}
	
	public ParserRule getXOperandFragmentRule() {
		return getXOperandFragmentAccess().getRule();
	}

	//ParameterOperand returns POperand:
	//	prm=JRPARAM;
	public ParameterOperandElements getParameterOperandAccess() {
		return (pParameterOperand != null) ? pParameterOperand : (pParameterOperand = new ParameterOperandElements());
	}
	
	public ParserRule getParameterOperandRule() {
		return getParameterOperandAccess().getRule();
	}

	//ExclamationParameterOperand returns ExpOperand:
	//	prm=JRNPARAM;
	public ExclamationParameterOperandElements getExclamationParameterOperandAccess() {
		return (pExclamationParameterOperand != null) ? pExclamationParameterOperand : (pExclamationParameterOperand = new ExclamationParameterOperandElements());
	}
	
	public ParserRule getExclamationParameterOperandRule() {
		return getExclamationParameterOperandAccess().getRule();
	}

	//ColumnOperand:
	//	cfull=ColumnFull ora="(+)"?;
	public ColumnOperandElements getColumnOperandAccess() {
		return (pColumnOperand != null) ? pColumnOperand : (pColumnOperand = new ColumnOperandElements());
	}
	
	public ParserRule getColumnOperandRule() {
		return getColumnOperandAccess().getRule();
	}

	//SubQueryOperand:
	//	{SubQueryOperand} "(" sel=SelectQuery ")";
	public SubQueryOperandElements getSubQueryOperandAccess() {
		return (pSubQueryOperand != null) ? pSubQueryOperand : (pSubQueryOperand = new SubQueryOperandElements());
	}
	
	public ParserRule getSubQueryOperandRule() {
		return getSubQueryOperandAccess().getRule();
	}

	//ScalarOperand:
	//	soint=INT | sostr=StringOperand | sodbl=SIGNED_DOUBLE | sodate=DATE | sotime=TIME | sodt=TIMESTAMP;
	public ScalarOperandElements getScalarOperandAccess() {
		return (pScalarOperand != null) ? pScalarOperand : (pScalarOperand = new ScalarOperandElements());
	}
	
	public ParserRule getScalarOperandRule() {
		return getScalarOperandAccess().getRule();
	}

	//SQLCASE returns SQLCaseOperand:
	//	"CASE" expr=FullExpression? when=SQLCaseWhens "END";
	public SQLCASEElements getSQLCASEAccess() {
		return (pSQLCASE != null) ? pSQLCASE : (pSQLCASE = new SQLCASEElements());
	}
	
	public ParserRule getSQLCASERule() {
		return getSQLCASEAccess().getRule();
	}

	//SQLCaseWhens:
	//	SqlCaseWhen ({WhenList.entries+=current} entries+=SqlCaseWhen+)?;
	public SQLCaseWhensElements getSQLCaseWhensAccess() {
		return (pSQLCaseWhens != null) ? pSQLCaseWhens : (pSQLCaseWhens = new SQLCaseWhensElements());
	}
	
	public ParserRule getSQLCaseWhensRule() {
		return getSQLCaseWhensAccess().getRule();
	}

	//SqlCaseWhen:
	//	"WHEN" expr=FullExpression "THEN" texp=OperandGroup ("ELSE" eexp=Operand)?;
	public SqlCaseWhenElements getSqlCaseWhenAccess() {
		return (pSqlCaseWhen != null) ? pSqlCaseWhen : (pSqlCaseWhen = new SqlCaseWhenElements());
	}
	
	public ParserRule getSqlCaseWhenRule() {
		return getSqlCaseWhenAccess().getRule();
	}

	//enum EXTRACT_VALUES:
	//	ms="MICROSECOND" | s="SECOND" | m="MINUTE" | h="HOUR" | day="DAY" | week="WEEK" | month="MONTH" | quart="QUARTER" |
	//	year="YEAR" | micros="SECOND_MICROSECOND" | minMicro="MINUTE_MICROSECOND" | minSec="MINUTE_SECOND" |
	//	hms="HOUR_MICROSECOND" | hs="HOUR_SECOND" | hmin="HOUR_MINUTE" | dms="DAY_MICROSECOND" | ds="DAY_SECOND" |
	//	daymin="DAY_MINUTE" | dayh="DAY_HOUR" | yearMonth="YEAR_MONTH";
	public EXTRACT_VALUESElements getEXTRACT_VALUESAccess() {
		return (unknownRuleEXTRACT_VALUES != null) ? unknownRuleEXTRACT_VALUES : (unknownRuleEXTRACT_VALUES = new EXTRACT_VALUESElements());
	}
	
	public EnumRule getEXTRACT_VALUESRule() {
		return getEXTRACT_VALUESAccess().getRule();
	}

	//enum XFunction:
	//	xin="IN" | xnotin="NOTIN" | xeq="EQUAL" | xnoteq="NOTEQUAL" | xls="LESS" | xgt="GREATER" | xlsr="LESS]" |
	//	xgtl="[GREATER" | xbwn="BETWEEN" | xbwnc="[BETWEEN]" | xbwnl="[BETWEEN" | xbwnr="BETWEEN]";
	public XFunctionElements getXFunctionAccess() {
		return (unknownRuleXFunction != null) ? unknownRuleXFunction : (unknownRuleXFunction = new XFunctionElements());
	}
	
	public EnumRule getXFunctionRule() {
		return getXFunctionAccess().getRule();
	}

	//JoinType:
	//	"NATURAL"? ("INNER" | ("LEFT" | "RIGHT" | "FULL") "OUTER"? | "CROSS" | "STRAIGHT_JOIN")? "JOIN";
	public JoinTypeElements getJoinTypeAccess() {
		return (pJoinType != null) ? pJoinType : (pJoinType = new JoinTypeElements());
	}
	
	public ParserRule getJoinTypeRule() {
		return getJoinTypeAccess().getRule();
	}

	//DBID:
	//	ID | DBNAME | STRING;
	public DBIDElements getDBIDAccess() {
		return (pDBID != null) ? pDBID : (pDBID = new DBIDElements());
	}
	
	public ParserRule getDBIDRule() {
		return getDBIDAccess().getRule();
	}

	//StringOperand:
	//	STRING_;
	public StringOperandElements getStringOperandAccess() {
		return (pStringOperand != null) ? pStringOperand : (pStringOperand = new StringOperandElements());
	}
	
	public ParserRule getStringOperandRule() {
		return getStringOperandAccess().getRule();
	}

	//FNAME:
	//	ID "(";
	public FNAMEElements getFNAMEAccess() {
		return (pFNAME != null) ? pFNAME : (pFNAME = new FNAMEElements());
	}
	
	public ParserRule getFNAMERule() {
		return getFNAMEAccess().getRule();
	}

	//IntegerValue:
	//	integer=INT;
	public IntegerValueElements getIntegerValueAccess() {
		return (pIntegerValue != null) ? pIntegerValue : (pIntegerValue = new IntegerValueElements());
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//terminal JRPARAM:
	//	"$P{"->"}";
	public TerminalRule getJRPARAMRule() {
		return (tJRPARAM != null) ? tJRPARAM : (tJRPARAM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JRPARAM"));
	} 

	//terminal JRNPARAM:
	//	"$P!{"->"}";
	public TerminalRule getJRNPARAMRule() {
		return (tJRNPARAM != null) ? tJRNPARAM : (tJRNPARAM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JRNPARAM"));
	} 

	//terminal STAR:
	//	"*";
	public TerminalRule getSTARRule() {
		return (tSTAR != null) ? tSTAR : (tSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STAR"));
	} 

	//terminal UNSIGNED returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getUNSIGNEDRule() {
		return (tUNSIGNED != null) ? tUNSIGNED : (tUNSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED"));
	} 

	//terminal INT returns ecore::EInt:
	//	"-"? UNSIGNED;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal SIGNED_DOUBLE returns ecore::EBigDecimal:
	//	"-"? UNSIGNED ("." UNSIGNED)?;
	public TerminalRule getSIGNED_DOUBLERule() {
		return (tSIGNED_DOUBLE != null) ? tSIGNED_DOUBLE : (tSIGNED_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_DOUBLE"));
	} 

	//terminal TIMESTAMP:
	//	DATE " " TIME;
	public TerminalRule getTIMESTAMPRule() {
		return (tTIMESTAMP != null) ? tTIMESTAMP : (tTIMESTAMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIMESTAMP"));
	} 

	//terminal DATE:
	//	"\'" "0".."9" "0".."9" "0".."9" "0".."9" "-" "0".."1" "0".."9" "-" "0".."3" "0".."9" "\'";
	public TerminalRule getDATERule() {
		return (tDATE != null) ? tDATE : (tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE"));
	} 

	//terminal TIME:
	//	"\'" "0".."9" "0".."9" ":" "0".."9" "0".."9" ":" "0".."9" "0".."9" "." "0".."9" "0".."9" "0".."9" "\'";
	public TerminalRule getTIMERule() {
		return (tTIME != null) ? tTIME : (tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME"));
	} 

	//terminal STRING_:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRING_Rule() {
		return (tSTRING_ != null) ? tSTRING_ : (tSTRING_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal DBNAME:
	//	"`" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "`"))* "`" | "[" ("\\" ("b" | "t" | "n"
	//	| "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "]"))* "]";
	public TerminalRule getDBNAMERule() {
		return (tDBNAME != null) ? tDBNAME : (tDBNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DBNAME"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "À".."ÿ" | "Ā".."ſ" | "ƀ".."ɏ" | "А".."я" | "_" | "-" | "$" | "ぁ".."ゟ" | "゠".."ヿ" | "ㇰ".."ㇿ" |
	//	"一".."鿿" | "歴".."す" | "ア".."ン" | "豈".."﫿" | "㐀".."䶿" | "＿" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal SL_COMMENT:
	//	("--" | "#" | "//") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
