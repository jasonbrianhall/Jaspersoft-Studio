/*
* generated by Xtext
*/

package com.jaspersoft.studio.data.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SqlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuerySelectQueryParserRuleCall_0_0 = (RuleCall)cQueryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORDERBYKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrderByEntryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrderByEntryOrderByColumnsParserRuleCall_1_1_0 = (RuleCall)cOrderByEntryAssignment_1_1.eContents().get(0);
		
		//Model:
		//	query=SelectQuery ("ORDER BY" orderByEntry=OrderByColumns)?;
		public ParserRule getRule() { return rule; }

		//query=SelectQuery ("ORDER BY" orderByEntry=OrderByColumns)?
		public Group getGroup() { return cGroup; }

		//query=SelectQuery
		public Assignment getQueryAssignment_0() { return cQueryAssignment_0; }

		//SelectQuery
		public RuleCall getQuerySelectQueryParserRuleCall_0_0() { return cQuerySelectQueryParserRuleCall_0_0; }

		//("ORDER BY" orderByEntry=OrderByColumns)?
		public Group getGroup_1() { return cGroup_1; }

		//"ORDER BY"
		public Keyword getORDERBYKeyword_1_0() { return cORDERBYKeyword_1_0; }

		//orderByEntry=OrderByColumns
		public Assignment getOrderByEntryAssignment_1_1() { return cOrderByEntryAssignment_1_1; }

		//OrderByColumns
		public RuleCall getOrderByEntryOrderByColumnsParserRuleCall_1_1_0() { return cOrderByEntryOrderByColumnsParserRuleCall_1_1_0; }
	}

	public class SelectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpSelectSubSetParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//SelectQuery:
		//	Select op+=SelectSubSet*;
		public ParserRule getRule() { return rule; }

		//Select op+=SelectSubSet*
		public Group getGroup() { return cGroup; }

		//Select
		public RuleCall getSelectParserRuleCall_0() { return cSelectParserRuleCall_0; }

		//op+=SelectSubSet*
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//SelectSubSet
		public RuleCall getOpSelectSubSetParserRuleCall_1_0() { return cOpSelectSubSetParserRuleCall_1_0; }
	}

	public class SelectSubSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectSubSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpUNIONKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpINTERSECTKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpMINUSKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Keyword cOpEXCEPTKeyword_0_0_3 = (Keyword)cOpAlternatives_0_0.eContents().get(3);
		private final Assignment cAllAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAllALLKeyword_1_0 = (Keyword)cAllAssignment_1.eContents().get(0);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuerySelectParserRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		
		//SelectSubSet:
		//	op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT") all="ALL"? query=Select;
		public ParserRule getRule() { return rule; }

		//op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT") all="ALL"? query=Select
		public Group getGroup() { return cGroup; }

		//op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"UNION" | "INTERSECT" | "MINUS" | "EXCEPT"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"UNION"
		public Keyword getOpUNIONKeyword_0_0_0() { return cOpUNIONKeyword_0_0_0; }

		//"INTERSECT"
		public Keyword getOpINTERSECTKeyword_0_0_1() { return cOpINTERSECTKeyword_0_0_1; }

		//"MINUS"
		public Keyword getOpMINUSKeyword_0_0_2() { return cOpMINUSKeyword_0_0_2; }

		//"EXCEPT"
		public Keyword getOpEXCEPTKeyword_0_0_3() { return cOpEXCEPTKeyword_0_0_3; }

		//all="ALL"?
		public Assignment getAllAssignment_1() { return cAllAssignment_1; }

		//"ALL"
		public Keyword getAllALLKeyword_1_0() { return cAllALLKeyword_1_0; }

		//query=Select
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }

		//Select
		public RuleCall getQuerySelectParserRuleCall_2_0() { return cQuerySelectParserRuleCall_2_0; }
	}

	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSelectSELECTKeyword_0_0 = (Keyword)cSelectAssignment_0.eContents().get(0);
		private final Keyword cDISTINCTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColsColumnsParserRuleCall_2_0 = (RuleCall)cColsAssignment_2.eContents().get(0);
		private final Keyword cFROMKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTblAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTblTablesParserRuleCall_4_0 = (RuleCall)cTblAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWhereExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWhereExpressionFullExpressionParserRuleCall_5_1_0 = (RuleCall)cWhereExpressionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGROUPBYKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGroupByEntryAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGroupByEntryGroupByColumnsParserRuleCall_6_1_0 = (RuleCall)cGroupByEntryAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cHAVINGKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cHavingEntryAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cHavingEntryFullExpressionParserRuleCall_7_1_0 = (RuleCall)cHavingEntryAssignment_7_1.eContents().get(0);
		
		//Select:
		//	select="SELECT" "DISTINCT"? cols=Columns "FROM" tbl=Tables ("WHERE" whereExpression=FullExpression)? ("GROUP BY"
		//	groupByEntry=GroupByColumns)? ("HAVING" havingEntry=FullExpression)?;
		public ParserRule getRule() { return rule; }

		//select="SELECT" "DISTINCT"? cols=Columns "FROM" tbl=Tables ("WHERE" whereExpression=FullExpression)? ("GROUP BY"
		//groupByEntry=GroupByColumns)? ("HAVING" havingEntry=FullExpression)?
		public Group getGroup() { return cGroup; }

		//select="SELECT"
		public Assignment getSelectAssignment_0() { return cSelectAssignment_0; }

		//"SELECT"
		public Keyword getSelectSELECTKeyword_0_0() { return cSelectSELECTKeyword_0_0; }

		//"DISTINCT"?
		public Keyword getDISTINCTKeyword_1() { return cDISTINCTKeyword_1; }

		//cols=Columns
		public Assignment getColsAssignment_2() { return cColsAssignment_2; }

		//Columns
		public RuleCall getColsColumnsParserRuleCall_2_0() { return cColsColumnsParserRuleCall_2_0; }

		//"FROM"
		public Keyword getFROMKeyword_3() { return cFROMKeyword_3; }

		//tbl=Tables
		public Assignment getTblAssignment_4() { return cTblAssignment_4; }

		//Tables
		public RuleCall getTblTablesParserRuleCall_4_0() { return cTblTablesParserRuleCall_4_0; }

		//("WHERE" whereExpression=FullExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"WHERE"
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }

		//whereExpression=FullExpression
		public Assignment getWhereExpressionAssignment_5_1() { return cWhereExpressionAssignment_5_1; }

		//FullExpression
		public RuleCall getWhereExpressionFullExpressionParserRuleCall_5_1_0() { return cWhereExpressionFullExpressionParserRuleCall_5_1_0; }

		//("GROUP BY" groupByEntry=GroupByColumns)?
		public Group getGroup_6() { return cGroup_6; }

		//"GROUP BY"
		public Keyword getGROUPBYKeyword_6_0() { return cGROUPBYKeyword_6_0; }

		//groupByEntry=GroupByColumns
		public Assignment getGroupByEntryAssignment_6_1() { return cGroupByEntryAssignment_6_1; }

		//GroupByColumns
		public RuleCall getGroupByEntryGroupByColumnsParserRuleCall_6_1_0() { return cGroupByEntryGroupByColumnsParserRuleCall_6_1_0; }

		//("HAVING" havingEntry=FullExpression)?
		public Group getGroup_7() { return cGroup_7; }

		//"HAVING"
		public Keyword getHAVINGKeyword_7_0() { return cHAVINGKeyword_7_0; }

		//havingEntry=FullExpression
		public Assignment getHavingEntryAssignment_7_1() { return cHavingEntryAssignment_7_1; }

		//FullExpression
		public RuleCall getHavingEntryFullExpressionParserRuleCall_7_1_0() { return cHavingEntryFullExpressionParserRuleCall_7_1_0; }
	}

	public class ColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Columns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cColumnOrAliasParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesColumnOrAliasParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//Columns returns OrColumn:
		//	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
		public ParserRule getRule() { return rule; }

		//ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
		public Group getGroup() { return cGroup; }

		//ColumnOrAlias
		public RuleCall getColumnOrAliasParserRuleCall_0() { return cColumnOrAliasParserRuleCall_0; }

		//({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrColumn.entries+=current}
		public Action getOrColumnEntriesAction_1_0() { return cOrColumnEntriesAction_1_0; }

		//("," entries+=ColumnOrAlias)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=ColumnOrAlias
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ColumnOrAlias
		public RuleCall getEntriesColumnOrAliasParserRuleCall_1_1_1_0() { return cEntriesColumnOrAliasParserRuleCall_1_1_1_0; }
	}

	public class ColumnOrAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnOrAlias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCeOperandParserRuleCall_0_0_0 = (RuleCall)cCeAssignment_0_0.eContents().get(0);
		private final Assignment cAliasAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cAliasASKeyword_0_1_0 = (Keyword)cAliasAssignment_0_1.eContents().get(0);
		private final Assignment cColAliasAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cColAliasDbObjectNameParserRuleCall_0_2_0 = (RuleCall)cColAliasAssignment_0_2.eContents().get(0);
		private final Assignment cAllColsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAllColsSTARTerminalRuleCall_1_0 = (RuleCall)cAllColsAssignment_1.eContents().get(0);
		private final Assignment cDbAllColsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDbAllColsDbObjectNameAllParserRuleCall_2_0 = (RuleCall)cDbAllColsAssignment_2.eContents().get(0);
		
		//ColumnOrAlias:
		//	ce=Operand alias="AS"? colAlias=DbObjectName? | allCols=STAR | dbAllCols=DbObjectNameAll;
		public ParserRule getRule() { return rule; }

		//ce=Operand alias="AS"? colAlias=DbObjectName? | allCols=STAR | dbAllCols=DbObjectNameAll
		public Alternatives getAlternatives() { return cAlternatives; }

		//ce=Operand alias="AS"? colAlias=DbObjectName?
		public Group getGroup_0() { return cGroup_0; }

		//ce=Operand
		public Assignment getCeAssignment_0_0() { return cCeAssignment_0_0; }

		//Operand
		public RuleCall getCeOperandParserRuleCall_0_0_0() { return cCeOperandParserRuleCall_0_0_0; }

		//alias="AS"?
		public Assignment getAliasAssignment_0_1() { return cAliasAssignment_0_1; }

		//"AS"
		public Keyword getAliasASKeyword_0_1_0() { return cAliasASKeyword_0_1_0; }

		//colAlias=DbObjectName?
		public Assignment getColAliasAssignment_0_2() { return cColAliasAssignment_0_2; }

		//DbObjectName
		public RuleCall getColAliasDbObjectNameParserRuleCall_0_2_0() { return cColAliasDbObjectNameParserRuleCall_0_2_0; }

		//allCols=STAR
		public Assignment getAllColsAssignment_1() { return cAllColsAssignment_1; }

		//STAR
		public RuleCall getAllColsSTARTerminalRuleCall_1_0() { return cAllColsSTARTerminalRuleCall_1_0; }

		//dbAllCols=DbObjectNameAll
		public Assignment getDbAllColsAssignment_2() { return cDbAllColsAssignment_2; }

		//DbObjectNameAll
		public RuleCall getDbAllColsDbObjectNameAllParserRuleCall_2_0() { return cDbAllColsDbObjectNameAllParserRuleCall_2_0; }
	}

	public class ColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDbObjectNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cColEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesDbObjectNameParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//ColumnFull:
		//	DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?;
		public ParserRule getRule() { return rule; }

		//DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup() { return cGroup; }

		//DbObjectName
		public RuleCall getDbObjectNameParserRuleCall_0() { return cDbObjectNameParserRuleCall_0; }

		//({Col.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Col.entries+=current}
		public Action getColEntriesAction_1_0() { return cColEntriesAction_1_0; }

		//("." entries+=DbObjectName)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//entries+=DbObjectName
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//DbObjectName
		public RuleCall getEntriesDbObjectNameParserRuleCall_1_1_1_0() { return cEntriesDbObjectNameParserRuleCall_1_1_1_0; }
	}

	public class TablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFromTableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrTableEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesFromTableParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//Tables returns OrTable:
		//	FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?;
		public ParserRule getRule() { return rule; }

		//FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?
		public Group getGroup() { return cGroup; }

		//FromTable
		public RuleCall getFromTableParserRuleCall_0() { return cFromTableParserRuleCall_0; }

		//({OrTable.entries+=current} ("," entries+=FromTable)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrTable.entries+=current}
		public Action getOrTableEntriesAction_1_0() { return cOrTableEntriesAction_1_0; }

		//("," entries+=FromTable)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=FromTable
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//FromTable
		public RuleCall getEntriesFromTableParserRuleCall_1_1_1_0() { return cEntriesFromTableParserRuleCall_1_1_1_0; }
	}

	public class FromTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTableTableOrAliasParserRuleCall_0_0 = (RuleCall)cTableAssignment_0.eContents().get(0);
		private final Assignment cFjoinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFjoinFromTableJoinParserRuleCall_1_0 = (RuleCall)cFjoinAssignment_1.eContents().get(0);
		
		//FromTable:
		//	table=TableOrAlias fjoin+=FromTableJoin*;
		public ParserRule getRule() { return rule; }

		//table=TableOrAlias fjoin+=FromTableJoin*
		public Group getGroup() { return cGroup; }

		//table=TableOrAlias
		public Assignment getTableAssignment_0() { return cTableAssignment_0; }

		//TableOrAlias
		public RuleCall getTableTableOrAliasParserRuleCall_0_0() { return cTableTableOrAliasParserRuleCall_0_0; }

		//fjoin+=FromTableJoin*
		public Assignment getFjoinAssignment_1() { return cFjoinAssignment_1; }

		//FromTableJoin
		public RuleCall getFjoinFromTableJoinParserRuleCall_1_0() { return cFjoinFromTableJoinParserRuleCall_1_0; }
	}

	public class FromTableJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromTableJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJoinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJoinJoinTypeEnumRuleCall_0_0 = (RuleCall)cJoinAssignment_0.eContents().get(0);
		private final Assignment cOnTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOnTableTableOrAliasParserRuleCall_1_0 = (RuleCall)cOnTableAssignment_1.eContents().get(0);
		private final Keyword cONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJoinExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJoinExprFullExpressionParserRuleCall_3_0 = (RuleCall)cJoinExprAssignment_3.eContents().get(0);
		
		//FromTableJoin:
		//	join=JoinType onTable=TableOrAlias "ON" joinExpr=FullExpression;
		public ParserRule getRule() { return rule; }

		//join=JoinType onTable=TableOrAlias "ON" joinExpr=FullExpression
		public Group getGroup() { return cGroup; }

		//join=JoinType
		public Assignment getJoinAssignment_0() { return cJoinAssignment_0; }

		//JoinType
		public RuleCall getJoinJoinTypeEnumRuleCall_0_0() { return cJoinJoinTypeEnumRuleCall_0_0; }

		//onTable=TableOrAlias
		public Assignment getOnTableAssignment_1() { return cOnTableAssignment_1; }

		//TableOrAlias
		public RuleCall getOnTableTableOrAliasParserRuleCall_1_0() { return cOnTableTableOrAliasParserRuleCall_1_0; }

		//"ON"
		public Keyword getONKeyword_2() { return cONKeyword_2; }

		//joinExpr=FullExpression
		public Assignment getJoinExprAssignment_3() { return cJoinExprAssignment_3; }

		//FullExpression
		public RuleCall getJoinExprFullExpressionParserRuleCall_3_0() { return cJoinExprFullExpressionParserRuleCall_3_0; }
	}

	public class TableOrAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableOrAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTfullAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTfullTableFullParserRuleCall_0_0_0 = (RuleCall)cTfullAssignment_0_0.eContents().get(0);
		private final Assignment cSqAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cSqSubQueryOperandParserRuleCall_0_1_0 = (RuleCall)cSqAssignment_0_1.eContents().get(0);
		private final Assignment cAliasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAliasASKeyword_1_0 = (Keyword)cAliasAssignment_1.eContents().get(0);
		private final Assignment cTblAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTblAliasDbObjectNameParserRuleCall_2_0 = (RuleCall)cTblAliasAssignment_2.eContents().get(0);
		
		//TableOrAlias:
		//	(tfull=TableFull | sq=SubQueryOperand) alias="AS"? tblAlias=DbObjectName?;
		public ParserRule getRule() { return rule; }

		//(tfull=TableFull | sq=SubQueryOperand) alias="AS"? tblAlias=DbObjectName?
		public Group getGroup() { return cGroup; }

		//tfull=TableFull | sq=SubQueryOperand
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//tfull=TableFull
		public Assignment getTfullAssignment_0_0() { return cTfullAssignment_0_0; }

		//TableFull
		public RuleCall getTfullTableFullParserRuleCall_0_0_0() { return cTfullTableFullParserRuleCall_0_0_0; }

		//sq=SubQueryOperand
		public Assignment getSqAssignment_0_1() { return cSqAssignment_0_1; }

		//SubQueryOperand
		public RuleCall getSqSubQueryOperandParserRuleCall_0_1_0() { return cSqSubQueryOperandParserRuleCall_0_1_0; }

		//alias="AS"?
		public Assignment getAliasAssignment_1() { return cAliasAssignment_1; }

		//"AS"
		public Keyword getAliasASKeyword_1_0() { return cAliasASKeyword_1_0; }

		//tblAlias=DbObjectName?
		public Assignment getTblAliasAssignment_2() { return cTblAliasAssignment_2; }

		//DbObjectName
		public RuleCall getTblAliasDbObjectNameParserRuleCall_2_0() { return cTblAliasDbObjectNameParserRuleCall_2_0; }
	}

	public class TableFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDbObjectNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTblsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesDbObjectNameParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//TableFull:
		//	DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?;
		public ParserRule getRule() { return rule; }

		//DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup() { return cGroup; }

		//DbObjectName
		public RuleCall getDbObjectNameParserRuleCall_0() { return cDbObjectNameParserRuleCall_0; }

		//({tbls.entries+=current} ("." entries+=DbObjectName)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{tbls.entries+=current}
		public Action getTblsEntriesAction_1_0() { return cTblsEntriesAction_1_0; }

		//("." entries+=DbObjectName)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//entries+=DbObjectName
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//DbObjectName
		public RuleCall getEntriesDbObjectNameParserRuleCall_1_1_1_0() { return cEntriesDbObjectNameParserRuleCall_1_1_1_0; }
	}

	public class DbObjectNameAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DbObjectNameAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDbnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDbnameDBIDParserRuleCall_0_0 = (RuleCall)cDbnameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DbObjectNameAll:
		//	dbname=DBID "." STAR;
		public ParserRule getRule() { return rule; }

		//dbname=DBID "." STAR
		public Group getGroup() { return cGroup; }

		//dbname=DBID
		public Assignment getDbnameAssignment_0() { return cDbnameAssignment_0; }

		//DBID
		public RuleCall getDbnameDBIDParserRuleCall_0_0() { return cDbnameDBIDParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_2() { return cSTARTerminalRuleCall_2; }
	}

	public class DbObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DbObjectName");
		private final Assignment cDbnameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDbnameDBIDParserRuleCall_0 = (RuleCall)cDbnameAssignment.eContents().get(0);
		
		//DbObjectName:
		//	dbname=DBID;
		public ParserRule getRule() { return rule; }

		//dbname=DBID
		public Assignment getDbnameAssignment() { return cDbnameAssignment; }

		//DBID
		public RuleCall getDbnameDBIDParserRuleCall_0() { return cDbnameDBIDParserRuleCall_0; }
	}

	public class OrderByColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrderByColumnFullParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrOrderByColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesOrderByColumnFullParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OrderByColumns returns OrOrderByColumn:
		//	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
		public ParserRule getRule() { return rule; }

		//OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
		public Group getGroup() { return cGroup; }

		//OrderByColumnFull
		public RuleCall getOrderByColumnFullParserRuleCall_0() { return cOrderByColumnFullParserRuleCall_0; }

		//({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrOrderByColumn.entries+=current}
		public Action getOrOrderByColumnEntriesAction_1_0() { return cOrOrderByColumnEntriesAction_1_0; }

		//("," entries+=OrderByColumnFull)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=OrderByColumnFull
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//OrderByColumnFull
		public RuleCall getEntriesOrderByColumnFullParserRuleCall_1_1_1_0() { return cEntriesOrderByColumnFullParserRuleCall_1_1_1_0; }
	}

	public class OrderByColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByColumnFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColOrderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColOrderColumnFullParserRuleCall_0_0 = (RuleCall)cColOrderAssignment_0.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cDirectionAlternatives_1_0 = (Alternatives)cDirectionAssignment_1.eContents().get(0);
		private final Keyword cDirectionASCKeyword_1_0_0 = (Keyword)cDirectionAlternatives_1_0.eContents().get(0);
		private final Keyword cDirectionDESCKeyword_1_0_1 = (Keyword)cDirectionAlternatives_1_0.eContents().get(1);
		
		//OrderByColumnFull:
		//	colOrder=ColumnFull direction=("ASC" | "DESC")?;
		public ParserRule getRule() { return rule; }

		//colOrder=ColumnFull direction=("ASC" | "DESC")?
		public Group getGroup() { return cGroup; }

		//colOrder=ColumnFull
		public Assignment getColOrderAssignment_0() { return cColOrderAssignment_0; }

		//ColumnFull
		public RuleCall getColOrderColumnFullParserRuleCall_0_0() { return cColOrderColumnFullParserRuleCall_0_0; }

		//direction=("ASC" | "DESC")?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//"ASC" | "DESC"
		public Alternatives getDirectionAlternatives_1_0() { return cDirectionAlternatives_1_0; }

		//"ASC"
		public Keyword getDirectionASCKeyword_1_0_0() { return cDirectionASCKeyword_1_0_0; }

		//"DESC"
		public Keyword getDirectionDESCKeyword_1_0_1() { return cDirectionDESCKeyword_1_0_1; }
	}

	public class GroupByColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGroupByColumnFullParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrGroupByColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesGroupByColumnFullParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//GroupByColumns returns OrGroupByColumn:
		//	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
		public ParserRule getRule() { return rule; }

		//GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
		public Group getGroup() { return cGroup; }

		//GroupByColumnFull
		public RuleCall getGroupByColumnFullParserRuleCall_0() { return cGroupByColumnFullParserRuleCall_0; }

		//({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrGroupByColumn.entries+=current}
		public Action getOrGroupByColumnEntriesAction_1_0() { return cOrGroupByColumnEntriesAction_1_0; }

		//("," entries+=GroupByColumnFull)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=GroupByColumnFull
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//GroupByColumnFull
		public RuleCall getEntriesGroupByColumnFullParserRuleCall_1_1_1_0() { return cEntriesGroupByColumnFullParserRuleCall_1_1_1_0; }
	}

	public class GroupByColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByColumnFull");
		private final Assignment cColGrByAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cColGrByColumnFullParserRuleCall_0 = (RuleCall)cColGrByAssignment.eContents().get(0);
		
		//GroupByColumnFull:
		//	colGrBy=ColumnFull;
		public ParserRule getRule() { return rule; }

		//colGrBy=ColumnFull
		public Assignment getColGrByAssignment() { return cColGrByAssignment; }

		//ColumnFull
		public RuleCall getColGrByColumnFullParserRuleCall_0() { return cColGrByColumnFullParserRuleCall_0; }
	}

	public class FullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionFragmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExprEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEntriesExpressionFragmentSecondParserRuleCall_1_1_0 = (RuleCall)cEntriesAssignment_1_1.eContents().get(0);
		
		//FullExpression returns OrExpr:
		//	ExpressionFragment ({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?;
		public ParserRule getRule() { return rule; }

		//ExpressionFragment ({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?
		public Group getGroup() { return cGroup; }

		//ExpressionFragment
		public RuleCall getExpressionFragmentParserRuleCall_0() { return cExpressionFragmentParserRuleCall_0; }

		//({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpr.entries+=current}
		public Action getOrExprEntriesAction_1_0() { return cOrExprEntriesAction_1_0; }

		//entries+=ExpressionFragmentSecond+
		public Assignment getEntriesAssignment_1_1() { return cEntriesAssignment_1_1; }

		//ExpressionFragmentSecond
		public RuleCall getEntriesExpressionFragmentSecondParserRuleCall_1_1_0() { return cEntriesExpressionFragmentSecondParserRuleCall_1_1_0; }
	}

	public class ExpressionFragmentSecondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionFragmentSecond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCAlternatives_0_0 = (Alternatives)cCAssignment_0.eContents().get(0);
		private final Keyword cCANDKeyword_0_0_0 = (Keyword)cCAlternatives_0_0.eContents().get(0);
		private final Keyword cCORKeyword_0_0_1 = (Keyword)cCAlternatives_0_0.eContents().get(1);
		private final Assignment cEfragAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEfragExpressionFragmentParserRuleCall_1_0 = (RuleCall)cEfragAssignment_1.eContents().get(0);
		
		//ExpressionFragmentSecond returns FullExpression:
		//	c=("AND" | "OR") efrag=ExpressionFragment;
		public ParserRule getRule() { return rule; }

		//c=("AND" | "OR") efrag=ExpressionFragment
		public Group getGroup() { return cGroup; }

		//c=("AND" | "OR")
		public Assignment getCAssignment_0() { return cCAssignment_0; }

		//"AND" | "OR"
		public Alternatives getCAlternatives_0_0() { return cCAlternatives_0_0; }

		//"AND"
		public Keyword getCANDKeyword_0_0_0() { return cCANDKeyword_0_0_0; }

		//"OR"
		public Keyword getCORKeyword_0_0_1() { return cCORKeyword_0_0_1; }

		//efrag=ExpressionFragment
		public Assignment getEfragAssignment_1() { return cEfragAssignment_1; }

		//ExpressionFragment
		public RuleCall getEfragExpressionFragmentParserRuleCall_1_0() { return cEfragExpressionFragmentParserRuleCall_1_0; }
	}

	public class ExpressionFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpgroupAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpgroupExpressionGroupParserRuleCall_0_0 = (RuleCall)cExpgroupAssignment_0.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Assignment cXexpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cXexpAlternatives_2_0 = (Alternatives)cXexpAssignment_2.eContents().get(0);
		private final RuleCall cXexpXExpressionParserRuleCall_2_0_0 = (RuleCall)cXexpAlternatives_2_0.eContents().get(0);
		private final RuleCall cXexpXExpression_ParserRuleCall_2_0_1 = (RuleCall)cXexpAlternatives_2_0.eContents().get(1);
		
		//ExpressionFragment returns FullExpression:
		//	expgroup=ExpressionGroup | exp=Expression | xexp=(XExpression | XExpression_);
		public ParserRule getRule() { return rule; }

		//expgroup=ExpressionGroup | exp=Expression | xexp=(XExpression | XExpression_)
		public Alternatives getAlternatives() { return cAlternatives; }

		//expgroup=ExpressionGroup
		public Assignment getExpgroupAssignment_0() { return cExpgroupAssignment_0; }

		//ExpressionGroup
		public RuleCall getExpgroupExpressionGroupParserRuleCall_0_0() { return cExpgroupExpressionGroupParserRuleCall_0_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }

		//xexp=(XExpression | XExpression_)
		public Assignment getXexpAssignment_2() { return cXexpAssignment_2; }

		//XExpression | XExpression_
		public Alternatives getXexpAlternatives_2_0() { return cXexpAlternatives_2_0; }

		//XExpression
		public RuleCall getXexpXExpressionParserRuleCall_2_0_0() { return cXexpXExpressionParserRuleCall_2_0_0; }

		//XExpression_
		public RuleCall getXexpXExpression_ParserRuleCall_2_0_1() { return cXexpXExpression_ParserRuleCall_2_0_1; }
	}

	public class ExpressionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprFullExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExpressionGroup returns ExprGroup:
		//	{ExprGroup} "(" expr=FullExpression ")";
		public ParserRule getRule() { return rule; }

		//{ExprGroup} "(" expr=FullExpression ")"
		public Group getGroup() { return cGroup; }

		//{ExprGroup}
		public Action getExprGroupAction_0() { return cExprGroupAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=FullExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//FullExpression
		public RuleCall getExprFullExpressionParserRuleCall_2_0() { return cExprFullExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cXExprAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXfXFunctionEnumRuleCall_3_0 = (RuleCall)cXfAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColOperandParserRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPrmAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPrmXExpressionParamsParserRuleCall_6_1_0 = (RuleCall)cPrmAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XExpression returns XExpr:
		//	"$X" {XExpr} "{" xf=XFunction "," col=Operand ("," prm=XExpressionParams)? "}";
		public ParserRule getRule() { return rule; }

		//"$X" {XExpr} "{" xf=XFunction "," col=Operand ("," prm=XExpressionParams)? "}"
		public Group getGroup() { return cGroup; }

		//"$X"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//{XExpr}
		public Action getXExprAction_1() { return cXExprAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//xf=XFunction
		public Assignment getXfAssignment_3() { return cXfAssignment_3; }

		//XFunction
		public RuleCall getXfXFunctionEnumRuleCall_3_0() { return cXfXFunctionEnumRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//col=Operand
		public Assignment getColAssignment_5() { return cColAssignment_5; }

		//Operand
		public RuleCall getColOperandParserRuleCall_5_0() { return cColOperandParserRuleCall_5_0; }

		//("," prm=XExpressionParams)?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//prm=XExpressionParams
		public Assignment getPrmAssignment_6_1() { return cPrmAssignment_6_1; }

		//XExpressionParams
		public RuleCall getPrmXExpressionParamsParserRuleCall_6_1_0() { return cPrmXExpressionParamsParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class XExpression_Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression_");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cXExprAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXfXFunctionEnumRuleCall_3_0 = (RuleCall)cXfAssignment_3.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColOperandParserRuleCall_5_0 = (RuleCall)cColAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVerticalLineKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPrmAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPrmXExpressionParamsParserRuleCall_6_1_0 = (RuleCall)cPrmAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XExpression_ returns XExpr:
		//	"$X" {XExpr} "{" xf=XFunction "|" col=Operand ("|" prm=XExpressionParams)? "}";
		public ParserRule getRule() { return rule; }

		//"$X" {XExpr} "{" xf=XFunction "|" col=Operand ("|" prm=XExpressionParams)? "}"
		public Group getGroup() { return cGroup; }

		//"$X"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//{XExpr}
		public Action getXExprAction_1() { return cXExprAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//xf=XFunction
		public Assignment getXfAssignment_3() { return cXfAssignment_3; }

		//XFunction
		public RuleCall getXfXFunctionEnumRuleCall_3_0() { return cXfXFunctionEnumRuleCall_3_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }

		//col=Operand
		public Assignment getColAssignment_5() { return cColAssignment_5; }

		//Operand
		public RuleCall getColOperandParserRuleCall_5_0() { return cColOperandParserRuleCall_5_0; }

		//("|" prm=XExpressionParams)?
		public Group getGroup_6() { return cGroup_6; }

		//"|"
		public Keyword getVerticalLineKeyword_6_0() { return cVerticalLineKeyword_6_0; }

		//prm=XExpressionParams
		public Assignment getPrmAssignment_6_1() { return cPrmAssignment_6_1; }

		//XExpressionParams
		public RuleCall getPrmXExpressionParamsParserRuleCall_6_1_0() { return cPrmXExpressionParamsParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class XExpressionParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJRParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrmsEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesJRParameterParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//XExpressionParams returns Prms:
		//	JRParameter ({Prms.entries+=current} ("," entries+=JRParameter)+)?;
		public ParserRule getRule() { return rule; }

		//JRParameter ({Prms.entries+=current} ("," entries+=JRParameter)+)?
		public Group getGroup() { return cGroup; }

		//JRParameter
		public RuleCall getJRParameterParserRuleCall_0() { return cJRParameterParserRuleCall_0; }

		//({Prms.entries+=current} ("," entries+=JRParameter)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Prms.entries+=current}
		public Action getPrmsEntriesAction_1_0() { return cPrmsEntriesAction_1_0; }

		//("," entries+=JRParameter)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=JRParameter
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//JRParameter
		public RuleCall getEntriesJRParameterParserRuleCall_1_1_1_0() { return cEntriesJRParameterParserRuleCall_1_1_1_0; }
	}

	public class JRParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JRParameter");
		private final Assignment cJrprmAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJrprmIDTerminalRuleCall_0 = (RuleCall)cJrprmAssignment.eContents().get(0);
		
		//JRParameter:
		//	jrprm=ID;
		public ParserRule getRule() { return rule; }

		//jrprm=ID
		public Assignment getJrprmAssignment() { return cJrprmAssignment; }

		//ID
		public RuleCall getJrprmIDTerminalRuleCall_0() { return cJrprmIDTerminalRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1OperandParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsnullAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cIsnullAlternatives_1_0_0 = (Alternatives)cIsnullAssignment_1_0.eContents().get(0);
		private final Keyword cIsnullISNULLKeyword_1_0_0_0 = (Keyword)cIsnullAlternatives_1_0_0.eContents().get(0);
		private final Keyword cIsnullISNOTNULLKeyword_1_0_0_1 = (Keyword)cIsnullAlternatives_1_0_0.eContents().get(1);
		private final Assignment cInAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInInOperatorParserRuleCall_1_1_0 = (RuleCall)cInAssignment_1_1.eContents().get(0);
		private final Assignment cBetweenAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cBetweenBetweenParserRuleCall_1_2_0 = (RuleCall)cBetweenAssignment_1_2.eContents().get(0);
		private final Assignment cLikeAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cLikeLikeParserRuleCall_1_3_0 = (RuleCall)cLikeAssignment_1_3.eContents().get(0);
		private final Assignment cCompAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cCompComparisonParserRuleCall_1_4_0 = (RuleCall)cCompAssignment_1_4.eContents().get(0);
		
		//Expression returns FullExpression:
		//	op1=Operand (isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | between=Between | like=Like | comp=Comparison);
		public ParserRule getRule() { return rule; }

		//op1=Operand (isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | between=Between | like=Like | comp=Comparison)
		public Group getGroup() { return cGroup; }

		//op1=Operand
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }

		//Operand
		public RuleCall getOp1OperandParserRuleCall_0_0() { return cOp1OperandParserRuleCall_0_0; }

		//isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | between=Between | like=Like | comp=Comparison
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isnull=("IS NULL" | "IS NOT NULL")
		public Assignment getIsnullAssignment_1_0() { return cIsnullAssignment_1_0; }

		//"IS NULL" | "IS NOT NULL"
		public Alternatives getIsnullAlternatives_1_0_0() { return cIsnullAlternatives_1_0_0; }

		//"IS NULL"
		public Keyword getIsnullISNULLKeyword_1_0_0_0() { return cIsnullISNULLKeyword_1_0_0_0; }

		//"IS NOT NULL"
		public Keyword getIsnullISNOTNULLKeyword_1_0_0_1() { return cIsnullISNOTNULLKeyword_1_0_0_1; }

		//in=InOperator
		public Assignment getInAssignment_1_1() { return cInAssignment_1_1; }

		//InOperator
		public RuleCall getInInOperatorParserRuleCall_1_1_0() { return cInInOperatorParserRuleCall_1_1_0; }

		//between=Between
		public Assignment getBetweenAssignment_1_2() { return cBetweenAssignment_1_2; }

		//Between
		public RuleCall getBetweenBetweenParserRuleCall_1_2_0() { return cBetweenBetweenParserRuleCall_1_2_0; }

		//like=Like
		public Assignment getLikeAssignment_1_3() { return cLikeAssignment_1_3; }

		//Like
		public RuleCall getLikeLikeParserRuleCall_1_3_0() { return cLikeLikeParserRuleCall_1_3_0; }

		//comp=Comparison
		public Assignment getCompAssignment_1_4() { return cCompAssignment_1_4; }

		//Comparison
		public RuleCall getCompComparisonParserRuleCall_1_4_0() { return cCompComparisonParserRuleCall_1_4_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_0_0_2 = (Keyword)cOperatorAlternatives_0_0.eContents().get(2);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_0_0_3 = (Keyword)cOperatorAlternatives_0_0.eContents().get(3);
		private final Keyword cOperatorEqualsSignKeyword_0_0_4 = (Keyword)cOperatorAlternatives_0_0.eContents().get(4);
		private final Keyword cOperatorLessThanSignGreaterThanSignKeyword_0_0_5 = (Keyword)cOperatorAlternatives_0_0.eContents().get(5);
		private final Assignment cSubOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSubOperatorAlternatives_1_0 = (Alternatives)cSubOperatorAssignment_1.eContents().get(0);
		private final Keyword cSubOperatorANYKeyword_1_0_0 = (Keyword)cSubOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cSubOperatorALLKeyword_1_0_1 = (Keyword)cSubOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cSubOperatorSOMEKeyword_1_0_2 = (Keyword)cSubOperatorAlternatives_1_0.eContents().get(2);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2OperandParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//Comparison:
		//	operator=(">" | ">=" | "<" | "<=" | "=" | "<>") subOperator=("ANY" | "ALL" | "SOME")? op2=Operand;
		public ParserRule getRule() { return rule; }

		//operator=(">" | ">=" | "<" | "<=" | "=" | "<>") subOperator=("ANY" | "ALL" | "SOME")? op2=Operand
		public Group getGroup() { return cGroup; }

		//operator=(">" | ">=" | "<" | "<=" | "=" | "<>")
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//">" | ">=" | "<" | "<=" | "=" | "<>"
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_0_0_0() { return cOperatorGreaterThanSignKeyword_0_0_0; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_0_0_1() { return cOperatorGreaterThanSignEqualsSignKeyword_0_0_1; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_0_0_2() { return cOperatorLessThanSignKeyword_0_0_2; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_0_0_3() { return cOperatorLessThanSignEqualsSignKeyword_0_0_3; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_0_0_4() { return cOperatorEqualsSignKeyword_0_0_4; }

		//"<>"
		public Keyword getOperatorLessThanSignGreaterThanSignKeyword_0_0_5() { return cOperatorLessThanSignGreaterThanSignKeyword_0_0_5; }

		//subOperator=("ANY" | "ALL" | "SOME")?
		public Assignment getSubOperatorAssignment_1() { return cSubOperatorAssignment_1; }

		//"ANY" | "ALL" | "SOME"
		public Alternatives getSubOperatorAlternatives_1_0() { return cSubOperatorAlternatives_1_0; }

		//"ANY"
		public Keyword getSubOperatorANYKeyword_1_0_0() { return cSubOperatorANYKeyword_1_0_0; }

		//"ALL"
		public Keyword getSubOperatorALLKeyword_1_0_1() { return cSubOperatorALLKeyword_1_0_1; }

		//"SOME"
		public Keyword getSubOperatorSOMEKeyword_1_0_2() { return cSubOperatorSOMEKeyword_1_0_2; }

		//op2=Operand
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }

		//Operand
		public RuleCall getOp2OperandParserRuleCall_2_0() { return cOp2OperandParserRuleCall_2_0; }
	}

	public class LikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Like");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpLikeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpLikeAlternatives_0_0 = (Alternatives)cOpLikeAssignment_0.eContents().get(0);
		private final Keyword cOpLikeLIKEKeyword_0_0_0 = (Keyword)cOpLikeAlternatives_0_0.eContents().get(0);
		private final Keyword cOpLikeNOTLIKEKeyword_0_0_1 = (Keyword)cOpLikeAlternatives_0_0.eContents().get(1);
		private final Assignment cOp2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOp2LikeOperandParserRuleCall_1_0 = (RuleCall)cOp2Assignment_1.eContents().get(0);
		
		//Like:
		//	opLike=("LIKE" | "NOT LIKE") op2=LikeOperand;
		public ParserRule getRule() { return rule; }

		//opLike=("LIKE" | "NOT LIKE") op2=LikeOperand
		public Group getGroup() { return cGroup; }

		//opLike=("LIKE" | "NOT LIKE")
		public Assignment getOpLikeAssignment_0() { return cOpLikeAssignment_0; }

		//"LIKE" | "NOT LIKE"
		public Alternatives getOpLikeAlternatives_0_0() { return cOpLikeAlternatives_0_0; }

		//"LIKE"
		public Keyword getOpLikeLIKEKeyword_0_0_0() { return cOpLikeLIKEKeyword_0_0_0; }

		//"NOT LIKE"
		public Keyword getOpLikeNOTLIKEKeyword_0_0_1() { return cOpLikeNOTLIKEKeyword_0_0_1; }

		//op2=LikeOperand
		public Assignment getOp2Assignment_1() { return cOp2Assignment_1; }

		//LikeOperand
		public RuleCall getOp2LikeOperandParserRuleCall_1_0() { return cOp2LikeOperandParserRuleCall_1_0; }
	}

	public class LikeOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LikeOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOp2Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOp2StringOperandParserRuleCall_0_0 = (RuleCall)cOp2Assignment_0.eContents().get(0);
		private final Assignment cFop2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFop2OperandFunctionParserRuleCall_1_0 = (RuleCall)cFop2Assignment_1.eContents().get(0);
		
		//LikeOperand:
		//	op2=StringOperand | fop2=OperandFunction;
		public ParserRule getRule() { return rule; }

		//op2=StringOperand | fop2=OperandFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//op2=StringOperand
		public Assignment getOp2Assignment_0() { return cOp2Assignment_0; }

		//StringOperand
		public RuleCall getOp2StringOperandParserRuleCall_0_0() { return cOp2StringOperandParserRuleCall_0_0; }

		//fop2=OperandFunction
		public Assignment getFop2Assignment_1() { return cFop2Assignment_1; }

		//OperandFunction
		public RuleCall getFop2OperandFunctionParserRuleCall_1_0() { return cFop2OperandFunctionParserRuleCall_1_0; }
	}

	public class BetweenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Between");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpBetweenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpBetweenAlternatives_0_0 = (Alternatives)cOpBetweenAssignment_0.eContents().get(0);
		private final Keyword cOpBetweenBETWEENKeyword_0_0_0 = (Keyword)cOpBetweenAlternatives_0_0.eContents().get(0);
		private final Keyword cOpBetweenNOTBETWEENKeyword_0_0_1 = (Keyword)cOpBetweenAlternatives_0_0.eContents().get(1);
		private final Assignment cOp2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOp2OperandParserRuleCall_1_0 = (RuleCall)cOp2Assignment_1.eContents().get(0);
		private final Keyword cANDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOp3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOp3OperandParserRuleCall_3_0 = (RuleCall)cOp3Assignment_3.eContents().get(0);
		
		//Between:
		//	opBetween=("BETWEEN" | "NOT BETWEEN") op2=Operand "AND" op3=Operand;
		public ParserRule getRule() { return rule; }

		//opBetween=("BETWEEN" | "NOT BETWEEN") op2=Operand "AND" op3=Operand
		public Group getGroup() { return cGroup; }

		//opBetween=("BETWEEN" | "NOT BETWEEN")
		public Assignment getOpBetweenAssignment_0() { return cOpBetweenAssignment_0; }

		//"BETWEEN" | "NOT BETWEEN"
		public Alternatives getOpBetweenAlternatives_0_0() { return cOpBetweenAlternatives_0_0; }

		//"BETWEEN"
		public Keyword getOpBetweenBETWEENKeyword_0_0_0() { return cOpBetweenBETWEENKeyword_0_0_0; }

		//"NOT BETWEEN"
		public Keyword getOpBetweenNOTBETWEENKeyword_0_0_1() { return cOpBetweenNOTBETWEENKeyword_0_0_1; }

		//op2=Operand
		public Assignment getOp2Assignment_1() { return cOp2Assignment_1; }

		//Operand
		public RuleCall getOp2OperandParserRuleCall_1_0() { return cOp2OperandParserRuleCall_1_0; }

		//"AND"
		public Keyword getANDKeyword_2() { return cANDKeyword_2; }

		//op3=Operand
		public Assignment getOp3Assignment_3() { return cOp3Assignment_3; }

		//Operand
		public RuleCall getOp3OperandParserRuleCall_3_0() { return cOp3OperandParserRuleCall_3_0; }
	}

	public class InOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInOperAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpNOTINKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpINKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cSubqueryAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cSubquerySubQueryOperandParserRuleCall_3_0_0 = (RuleCall)cSubqueryAssignment_3_0.eContents().get(0);
		private final Assignment cOpListAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOpListOperandListParserRuleCall_3_1_0 = (RuleCall)cOpListAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InOperator returns InOper:
		//	{InOper} op=("NOT IN" | "IN") "(" (subquery=SubQueryOperand | opList=OperandList) ")";
		public ParserRule getRule() { return rule; }

		//{InOper} op=("NOT IN" | "IN") "(" (subquery=SubQueryOperand | opList=OperandList) ")"
		public Group getGroup() { return cGroup; }

		//{InOper}
		public Action getInOperAction_0() { return cInOperAction_0; }

		//op=("NOT IN" | "IN")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"NOT IN" | "IN"
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }

		//"NOT IN"
		public Keyword getOpNOTINKeyword_1_0_0() { return cOpNOTINKeyword_1_0_0; }

		//"IN"
		public Keyword getOpINKeyword_1_0_1() { return cOpINKeyword_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//subquery=SubQueryOperand | opList=OperandList
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//subquery=SubQueryOperand
		public Assignment getSubqueryAssignment_3_0() { return cSubqueryAssignment_3_0; }

		//SubQueryOperand
		public RuleCall getSubquerySubQueryOperandParserRuleCall_3_0_0() { return cSubquerySubQueryOperandParserRuleCall_3_0_0; }

		//opList=OperandList
		public Assignment getOpListAssignment_3_1() { return cOpListAssignment_3_1; }

		//OperandList
		public RuleCall getOpListOperandListParserRuleCall_3_1_0() { return cOpListOperandListParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OperandListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cScalarOperandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOpListEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesScalarOperandParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OperandList:
		//	ScalarOperand ({OpList.entries+=current} ("," entries+=ScalarOperand)+)?;
		public ParserRule getRule() { return rule; }

		//ScalarOperand ({OpList.entries+=current} ("," entries+=ScalarOperand)+)?
		public Group getGroup() { return cGroup; }

		//ScalarOperand
		public RuleCall getScalarOperandParserRuleCall_0() { return cScalarOperandParserRuleCall_0; }

		//({OpList.entries+=current} ("," entries+=ScalarOperand)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OpList.entries+=current}
		public Action getOpListEntriesAction_1_0() { return cOpListEntriesAction_1_0; }

		//("," entries+=ScalarOperand)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=ScalarOperand
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ScalarOperand
		public RuleCall getEntriesScalarOperandParserRuleCall_1_1_1_0() { return cEntriesScalarOperandParserRuleCall_1_1_1_0; }
	}

	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1OperandFragmentParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cStarLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final RuleCall cSTARTerminalRuleCall_1_0_2_1 = (RuleCall)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cDivLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cConcatLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandFragmentParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Operand returns Operands:
		//	op1=OperandFragment (({Plus.left=current} "+" | {Minus.left=current} "-" | {Star.left=current} STAR |
		//	{Div.left=current} "/" | {Concat.left=current} "||") right=OperandFragment)*;
		public ParserRule getRule() { return rule; }

		//op1=OperandFragment (({Plus.left=current} "+" | {Minus.left=current} "-" | {Star.left=current} STAR | {Div.left=current}
		//"/" | {Concat.left=current} "||") right=OperandFragment)*
		public Group getGroup() { return cGroup; }

		//op1=OperandFragment
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }

		//OperandFragment
		public RuleCall getOp1OperandFragmentParserRuleCall_0_0() { return cOp1OperandFragmentParserRuleCall_0_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-" | {Star.left=current} STAR | {Div.left=current} "/" |
		//{Concat.left=current} "||") right=OperandFragment)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-" | {Star.left=current} STAR | {Div.left=current} "/" |
		//{Concat.left=current} "||"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//{Star.left=current} STAR
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Star.left=current}
		public Action getStarLeftAction_1_0_2_0() { return cStarLeftAction_1_0_2_0; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_1_0_2_1() { return cSTARTerminalRuleCall_1_0_2_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_3_0() { return cDivLeftAction_1_0_3_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_3_1() { return cSolidusKeyword_1_0_3_1; }

		//{Concat.left=current} "||"
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{Concat.left=current}
		public Action getConcatLeftAction_1_0_4_0() { return cConcatLeftAction_1_0_4_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_4_1() { return cVerticalLineVerticalLineKeyword_1_0_4_1; }

		//right=OperandFragment
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OperandFragment
		public RuleCall getRightOperandFragmentParserRuleCall_1_1_0() { return cRightOperandFragmentParserRuleCall_1_1_0; }
	}

	public class OperandFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cColumnColumnOperandParserRuleCall_0_0 = (RuleCall)cColumnAssignment_0.eContents().get(0);
		private final Assignment cXopAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cXopXOperandFragmentParserRuleCall_1_0 = (RuleCall)cXopAssignment_1.eContents().get(0);
		private final Assignment cSubqAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSubqSubQueryOperandParserRuleCall_2_0 = (RuleCall)cSubqAssignment_2.eContents().get(0);
		private final Assignment cFuncAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFuncOperandFunctionParserRuleCall_3_0 = (RuleCall)cFuncAssignment_3.eContents().get(0);
		private final Assignment cSqlcaseAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSqlcaseSQLCASEParserRuleCall_4_0 = (RuleCall)cSqlcaseAssignment_4.eContents().get(0);
		
		//OperandFragment returns Operand: / *opGroup=OperandGroup |* / column=ColumnOperand | xop=XOperandFragment |
		//	subq=SubQueryOperand | func=OperandFunction | sqlcase=SQLCASE;
		public ParserRule getRule() { return rule; }

		/// *opGroup=OperandGroup |* / column=ColumnOperand | xop=XOperandFragment | subq=SubQueryOperand | func=OperandFunction |
		//sqlcase=SQLCASE
		public Alternatives getAlternatives() { return cAlternatives; }

		/// *opGroup=OperandGroup |* / column=ColumnOperand
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }

		//ColumnOperand
		public RuleCall getColumnColumnOperandParserRuleCall_0_0() { return cColumnColumnOperandParserRuleCall_0_0; }

		//xop=XOperandFragment
		public Assignment getXopAssignment_1() { return cXopAssignment_1; }

		//XOperandFragment
		public RuleCall getXopXOperandFragmentParserRuleCall_1_0() { return cXopXOperandFragmentParserRuleCall_1_0; }

		//subq=SubQueryOperand
		public Assignment getSubqAssignment_2() { return cSubqAssignment_2; }

		//SubQueryOperand
		public RuleCall getSubqSubQueryOperandParserRuleCall_2_0() { return cSubqSubQueryOperandParserRuleCall_2_0; }

		//func=OperandFunction
		public Assignment getFuncAssignment_3() { return cFuncAssignment_3; }

		//OperandFunction
		public RuleCall getFuncOperandFunctionParserRuleCall_3_0() { return cFuncOperandFunctionParserRuleCall_3_0; }

		//sqlcase=SQLCASE
		public Assignment getSqlcaseAssignment_4() { return cSqlcaseAssignment_4; }

		//SQLCASE
		public RuleCall getSqlcaseSQLCASEParserRuleCall_4_0() { return cSqlcaseSQLCASEParserRuleCall_4_0; }
	}

	public class OperandFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperandFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFnameFNAMEParserRuleCall_1_0 = (RuleCall)cFnameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTARTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgsOpFunctionArgParserRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////OperandGroup returns OpGroup:
		////	{OpGroup} '(' op=Operand ')';
		//OperandFunction returns OpFunction:
		//	{OpFunction} fname=FNAME (STAR | args=OpFunctionArg) ")";
		public ParserRule getRule() { return rule; }

		//{OpFunction} fname=FNAME (STAR | args=OpFunctionArg) ")"
		public Group getGroup() { return cGroup; }

		//{OpFunction}
		public Action getOpFunctionAction_0() { return cOpFunctionAction_0; }

		//fname=FNAME
		public Assignment getFnameAssignment_1() { return cFnameAssignment_1; }

		//FNAME
		public RuleCall getFnameFNAMEParserRuleCall_1_0() { return cFnameFNAMEParserRuleCall_1_0; }

		//STAR | args=OpFunctionArg
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_2_0() { return cSTARTerminalRuleCall_2_0; }

		//args=OpFunctionArg
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }

		//OpFunctionArg
		public RuleCall getArgsOpFunctionArgParserRuleCall_2_1_0() { return cArgsOpFunctionArgParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OpFunctionArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpFunctionArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOperandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOpFListEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesOperandParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OpFunctionArg:
		//	Operand ({OpFList.entries+=current} ("," entries+=Operand)+)?;
		public ParserRule getRule() { return rule; }

		//Operand ({OpFList.entries+=current} ("," entries+=Operand)+)?
		public Group getGroup() { return cGroup; }

		//Operand
		public RuleCall getOperandParserRuleCall_0() { return cOperandParserRuleCall_0; }

		//({OpFList.entries+=current} ("," entries+=Operand)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OpFList.entries+=current}
		public Action getOpFListEntriesAction_1_0() { return cOpFListEntriesAction_1_0; }

		//("," entries+=Operand)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=Operand
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//Operand
		public RuleCall getEntriesOperandParserRuleCall_1_1_1_0() { return cEntriesOperandParserRuleCall_1_1_1_0; }
	}

	public class XOperandFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOperandFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamParameterOperandParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cEparamAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEparamExclamationParameterOperandParserRuleCall_1_0 = (RuleCall)cEparamAssignment_1.eContents().get(0);
		private final Assignment cScalarAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cScalarScalarOperandParserRuleCall_2_0 = (RuleCall)cScalarAssignment_2.eContents().get(0);
		
		//XOperandFragment returns Operand:
		//	param=ParameterOperand | eparam=ExclamationParameterOperand | scalar=ScalarOperand;
		public ParserRule getRule() { return rule; }

		//param=ParameterOperand | eparam=ExclamationParameterOperand | scalar=ScalarOperand
		public Alternatives getAlternatives() { return cAlternatives; }

		//param=ParameterOperand
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//ParameterOperand
		public RuleCall getParamParameterOperandParserRuleCall_0_0() { return cParamParameterOperandParserRuleCall_0_0; }

		//eparam=ExclamationParameterOperand
		public Assignment getEparamAssignment_1() { return cEparamAssignment_1; }

		//ExclamationParameterOperand
		public RuleCall getEparamExclamationParameterOperandParserRuleCall_1_0() { return cEparamExclamationParameterOperandParserRuleCall_1_0; }

		//scalar=ScalarOperand
		public Assignment getScalarAssignment_2() { return cScalarAssignment_2; }

		//ScalarOperand
		public RuleCall getScalarScalarOperandParserRuleCall_2_0() { return cScalarScalarOperandParserRuleCall_2_0; }
	}

	public class ParameterOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterOperand");
		private final Assignment cPrmAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrmJRPARAMTerminalRuleCall_0 = (RuleCall)cPrmAssignment.eContents().get(0);
		
		//ParameterOperand returns POperand:
		//	prm=JRPARAM;
		public ParserRule getRule() { return rule; }

		//prm=JRPARAM
		public Assignment getPrmAssignment() { return cPrmAssignment; }

		//JRPARAM
		public RuleCall getPrmJRPARAMTerminalRuleCall_0() { return cPrmJRPARAMTerminalRuleCall_0; }
	}

	public class ExclamationParameterOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExclamationParameterOperand");
		private final Assignment cPrmAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrmJRNPARAMTerminalRuleCall_0 = (RuleCall)cPrmAssignment.eContents().get(0);
		
		//ExclamationParameterOperand returns ExpOperand:
		//	prm=JRNPARAM;
		public ParserRule getRule() { return rule; }

		//prm=JRNPARAM
		public Assignment getPrmAssignment() { return cPrmAssignment; }

		//JRNPARAM
		public RuleCall getPrmJRNPARAMTerminalRuleCall_0() { return cPrmJRNPARAMTerminalRuleCall_0; }
	}

	public class ColumnOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnOperand");
		private final Assignment cCfullAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCfullColumnFullParserRuleCall_0 = (RuleCall)cCfullAssignment.eContents().get(0);
		
		//ColumnOperand:
		//	cfull=ColumnFull;
		public ParserRule getRule() { return rule; }

		//cfull=ColumnFull
		public Assignment getCfullAssignment() { return cCfullAssignment; }

		//ColumnFull
		public RuleCall getCfullColumnFullParserRuleCall_0() { return cCfullColumnFullParserRuleCall_0; }
	}

	public class SubQueryOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubQueryOperand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubQueryOperandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelSelectQueryParserRuleCall_2_0 = (RuleCall)cSelAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubQueryOperand:
		//	{SubQueryOperand} "(" sel=SelectQuery ")";
		public ParserRule getRule() { return rule; }

		//{SubQueryOperand} "(" sel=SelectQuery ")"
		public Group getGroup() { return cGroup; }

		//{SubQueryOperand}
		public Action getSubQueryOperandAction_0() { return cSubQueryOperandAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//sel=SelectQuery
		public Assignment getSelAssignment_2() { return cSelAssignment_2; }

		//SelectQuery
		public RuleCall getSelSelectQueryParserRuleCall_2_0() { return cSelSelectQueryParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ScalarOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScalarOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSointAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSointINTTerminalRuleCall_0_0 = (RuleCall)cSointAssignment_0.eContents().get(0);
		private final Assignment cSostrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSostrStringOperandParserRuleCall_1_0 = (RuleCall)cSostrAssignment_1.eContents().get(0);
		private final Assignment cSodblAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSodblSIGNED_DOUBLETerminalRuleCall_2_0 = (RuleCall)cSodblAssignment_2.eContents().get(0);
		private final Assignment cSodateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSodateDATETerminalRuleCall_3_0 = (RuleCall)cSodateAssignment_3.eContents().get(0);
		private final Assignment cSotimeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSotimeTIMETerminalRuleCall_4_0 = (RuleCall)cSotimeAssignment_4.eContents().get(0);
		private final Assignment cSodtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cSodtTIMESTAMPTerminalRuleCall_5_0 = (RuleCall)cSodtAssignment_5.eContents().get(0);
		
		//ScalarOperand:
		//	soint=INT | sostr=StringOperand | sodbl=SIGNED_DOUBLE | sodate=DATE | sotime=TIME | sodt=TIMESTAMP;
		public ParserRule getRule() { return rule; }

		//soint=INT | sostr=StringOperand | sodbl=SIGNED_DOUBLE | sodate=DATE | sotime=TIME | sodt=TIMESTAMP
		public Alternatives getAlternatives() { return cAlternatives; }

		//soint=INT
		public Assignment getSointAssignment_0() { return cSointAssignment_0; }

		//INT
		public RuleCall getSointINTTerminalRuleCall_0_0() { return cSointINTTerminalRuleCall_0_0; }

		//sostr=StringOperand
		public Assignment getSostrAssignment_1() { return cSostrAssignment_1; }

		//StringOperand
		public RuleCall getSostrStringOperandParserRuleCall_1_0() { return cSostrStringOperandParserRuleCall_1_0; }

		//sodbl=SIGNED_DOUBLE
		public Assignment getSodblAssignment_2() { return cSodblAssignment_2; }

		//SIGNED_DOUBLE
		public RuleCall getSodblSIGNED_DOUBLETerminalRuleCall_2_0() { return cSodblSIGNED_DOUBLETerminalRuleCall_2_0; }

		//sodate=DATE
		public Assignment getSodateAssignment_3() { return cSodateAssignment_3; }

		//DATE
		public RuleCall getSodateDATETerminalRuleCall_3_0() { return cSodateDATETerminalRuleCall_3_0; }

		//sotime=TIME
		public Assignment getSotimeAssignment_4() { return cSotimeAssignment_4; }

		//TIME
		public RuleCall getSotimeTIMETerminalRuleCall_4_0() { return cSotimeTIMETerminalRuleCall_4_0; }

		//sodt=TIMESTAMP
		public Assignment getSodtAssignment_5() { return cSodtAssignment_5; }

		//TIMESTAMP
		public RuleCall getSodtTIMESTAMPTerminalRuleCall_5_0() { return cSodtTIMESTAMPTerminalRuleCall_5_0; }
	}

	public class SQLCASEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SQLCASE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprFullExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cWhenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhenSQLCaseWhensParserRuleCall_2_0 = (RuleCall)cWhenAssignment_2.eContents().get(0);
		private final Keyword cENDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SQLCASE returns SQLCaseOperand:
		//	"CASE" expr=FullExpression? when=SQLCaseWhens "END";
		public ParserRule getRule() { return rule; }

		//"CASE" expr=FullExpression? when=SQLCaseWhens "END"
		public Group getGroup() { return cGroup; }

		//"CASE"
		public Keyword getCASEKeyword_0() { return cCASEKeyword_0; }

		//expr=FullExpression?
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//FullExpression
		public RuleCall getExprFullExpressionParserRuleCall_1_0() { return cExprFullExpressionParserRuleCall_1_0; }

		//when=SQLCaseWhens
		public Assignment getWhenAssignment_2() { return cWhenAssignment_2; }

		//SQLCaseWhens
		public RuleCall getWhenSQLCaseWhensParserRuleCall_2_0() { return cWhenSQLCaseWhensParserRuleCall_2_0; }

		//"END"
		public Keyword getENDKeyword_3() { return cENDKeyword_3; }
	}

	public class SQLCaseWhensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SQLCaseWhens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSqlCaseWhenParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cWhenListEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEntriesSqlCaseWhenParserRuleCall_1_1_0 = (RuleCall)cEntriesAssignment_1_1.eContents().get(0);
		
		//SQLCaseWhens:
		//	SqlCaseWhen ({WhenList.entries+=current} entries+=SqlCaseWhen+)?;
		public ParserRule getRule() { return rule; }

		//SqlCaseWhen ({WhenList.entries+=current} entries+=SqlCaseWhen+)?
		public Group getGroup() { return cGroup; }

		//SqlCaseWhen
		public RuleCall getSqlCaseWhenParserRuleCall_0() { return cSqlCaseWhenParserRuleCall_0; }

		//({WhenList.entries+=current} entries+=SqlCaseWhen+)?
		public Group getGroup_1() { return cGroup_1; }

		//{WhenList.entries+=current}
		public Action getWhenListEntriesAction_1_0() { return cWhenListEntriesAction_1_0; }

		//entries+=SqlCaseWhen+
		public Assignment getEntriesAssignment_1_1() { return cEntriesAssignment_1_1; }

		//SqlCaseWhen
		public RuleCall getEntriesSqlCaseWhenParserRuleCall_1_1_0() { return cEntriesSqlCaseWhenParserRuleCall_1_1_0; }
	}

	public class SqlCaseWhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SqlCaseWhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprFullExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTexpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTexpOperandParserRuleCall_3_0 = (RuleCall)cTexpAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cELSEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEexpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEexpOperandParserRuleCall_4_1_0 = (RuleCall)cEexpAssignment_4_1.eContents().get(0);
		
		//SqlCaseWhen:
		//	"WHEN" expr=FullExpression "THEN" texp=Operand ("ELSE" eexp=Operand)?;
		public ParserRule getRule() { return rule; }

		//"WHEN" expr=FullExpression "THEN" texp=Operand ("ELSE" eexp=Operand)?
		public Group getGroup() { return cGroup; }

		//"WHEN"
		public Keyword getWHENKeyword_0() { return cWHENKeyword_0; }

		//expr=FullExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//FullExpression
		public RuleCall getExprFullExpressionParserRuleCall_1_0() { return cExprFullExpressionParserRuleCall_1_0; }

		//"THEN"
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }

		//texp=Operand
		public Assignment getTexpAssignment_3() { return cTexpAssignment_3; }

		//Operand
		public RuleCall getTexpOperandParserRuleCall_3_0() { return cTexpOperandParserRuleCall_3_0; }

		//("ELSE" eexp=Operand)?
		public Group getGroup_4() { return cGroup_4; }

		//"ELSE"
		public Keyword getELSEKeyword_4_0() { return cELSEKeyword_4_0; }

		//eexp=Operand
		public Assignment getEexpAssignment_4_1() { return cEexpAssignment_4_1; }

		//Operand
		public RuleCall getEexpOperandParserRuleCall_4_1_0() { return cEexpOperandParserRuleCall_4_1_0; }
	}

	public class DBIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DBID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDBNAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DBID:
		//	ID | DBNAME | STRING;
		public ParserRule getRule() { return rule; }

		//ID | DBNAME | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//DBNAME
		public RuleCall getDBNAMETerminalRuleCall_1() { return cDBNAMETerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class StringOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringOperand");
		private final RuleCall cSTRING_TerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringOperand:
		//	STRING_;
		public ParserRule getRule() { return rule; }

		//STRING_
		public RuleCall getSTRING_TerminalRuleCall() { return cSTRING_TerminalRuleCall; }
	}

	public class FNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FNAME:
		//	ID "(";
		public ParserRule getRule() { return rule; }

		//ID "("
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
	}
	
	
	public class XFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "XFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXinINKeyword_0_0 = (Keyword)cXinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXnotinEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXnotinNOTINKeyword_1_0 = (Keyword)cXnotinEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXeqEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXeqEQUALKeyword_2_0 = (Keyword)cXeqEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cXnoteqEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cXnoteqNOTEQUALKeyword_3_0 = (Keyword)cXnoteqEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cXlsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cXlsLESSKeyword_4_0 = (Keyword)cXlsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cXgtEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cXgtGREATERKeyword_5_0 = (Keyword)cXgtEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cXlsrEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cXlsrLESSKeyword_6_0 = (Keyword)cXlsrEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cXgtlEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cXgtlGREATERKeyword_7_0 = (Keyword)cXgtlEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cXbwnEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cXbwnBETWEENKeyword_8_0 = (Keyword)cXbwnEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cXbwncEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cXbwncBETWEENKeyword_9_0 = (Keyword)cXbwncEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cXbwnlEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cXbwnlBETWEENKeyword_10_0 = (Keyword)cXbwnlEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cXbwnrEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cXbwnrBETWEENKeyword_11_0 = (Keyword)cXbwnrEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum XFunction:
		//	xin="IN" | xnotin="NOTIN" | xeq="EQUAL" | xnoteq="NOTEQUAL" | xls="LESS" | xgt="GREATER" | xlsr="LESS]" |
		//	xgtl="[GREATER" | xbwn="BETWEEN" | xbwnc="[BETWEEN]" | xbwnl="[BETWEEN" | xbwnr="BETWEEN]";
		public EnumRule getRule() { return rule; }

		//xin="IN" | xnotin="NOTIN" | xeq="EQUAL" | xnoteq="NOTEQUAL" | xls="LESS" | xgt="GREATER" | xlsr="LESS]" |
		//xgtl="[GREATER" | xbwn="BETWEEN" | xbwnc="[BETWEEN]" | xbwnl="[BETWEEN" | xbwnr="BETWEEN]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//xin="IN"
		public EnumLiteralDeclaration getXinEnumLiteralDeclaration_0() { return cXinEnumLiteralDeclaration_0; }

		//"IN"
		public Keyword getXinINKeyword_0_0() { return cXinINKeyword_0_0; }

		//xnotin="NOTIN"
		public EnumLiteralDeclaration getXnotinEnumLiteralDeclaration_1() { return cXnotinEnumLiteralDeclaration_1; }

		//"NOTIN"
		public Keyword getXnotinNOTINKeyword_1_0() { return cXnotinNOTINKeyword_1_0; }

		//xeq="EQUAL"
		public EnumLiteralDeclaration getXeqEnumLiteralDeclaration_2() { return cXeqEnumLiteralDeclaration_2; }

		//"EQUAL"
		public Keyword getXeqEQUALKeyword_2_0() { return cXeqEQUALKeyword_2_0; }

		//xnoteq="NOTEQUAL"
		public EnumLiteralDeclaration getXnoteqEnumLiteralDeclaration_3() { return cXnoteqEnumLiteralDeclaration_3; }

		//"NOTEQUAL"
		public Keyword getXnoteqNOTEQUALKeyword_3_0() { return cXnoteqNOTEQUALKeyword_3_0; }

		//xls="LESS"
		public EnumLiteralDeclaration getXlsEnumLiteralDeclaration_4() { return cXlsEnumLiteralDeclaration_4; }

		//"LESS"
		public Keyword getXlsLESSKeyword_4_0() { return cXlsLESSKeyword_4_0; }

		//xgt="GREATER"
		public EnumLiteralDeclaration getXgtEnumLiteralDeclaration_5() { return cXgtEnumLiteralDeclaration_5; }

		//"GREATER"
		public Keyword getXgtGREATERKeyword_5_0() { return cXgtGREATERKeyword_5_0; }

		//xlsr="LESS]"
		public EnumLiteralDeclaration getXlsrEnumLiteralDeclaration_6() { return cXlsrEnumLiteralDeclaration_6; }

		//"LESS]"
		public Keyword getXlsrLESSKeyword_6_0() { return cXlsrLESSKeyword_6_0; }

		//xgtl="[GREATER"
		public EnumLiteralDeclaration getXgtlEnumLiteralDeclaration_7() { return cXgtlEnumLiteralDeclaration_7; }

		//"[GREATER"
		public Keyword getXgtlGREATERKeyword_7_0() { return cXgtlGREATERKeyword_7_0; }

		//xbwn="BETWEEN"
		public EnumLiteralDeclaration getXbwnEnumLiteralDeclaration_8() { return cXbwnEnumLiteralDeclaration_8; }

		//"BETWEEN"
		public Keyword getXbwnBETWEENKeyword_8_0() { return cXbwnBETWEENKeyword_8_0; }

		//xbwnc="[BETWEEN]"
		public EnumLiteralDeclaration getXbwncEnumLiteralDeclaration_9() { return cXbwncEnumLiteralDeclaration_9; }

		//"[BETWEEN]"
		public Keyword getXbwncBETWEENKeyword_9_0() { return cXbwncBETWEENKeyword_9_0; }

		//xbwnl="[BETWEEN"
		public EnumLiteralDeclaration getXbwnlEnumLiteralDeclaration_10() { return cXbwnlEnumLiteralDeclaration_10; }

		//"[BETWEEN"
		public Keyword getXbwnlBETWEENKeyword_10_0() { return cXbwnlBETWEENKeyword_10_0; }

		//xbwnr="BETWEEN]"
		public EnumLiteralDeclaration getXbwnrEnumLiteralDeclaration_11() { return cXbwnrEnumLiteralDeclaration_11; }

		//"BETWEEN]"
		public Keyword getXbwnrBETWEENKeyword_11_0() { return cXbwnrBETWEENKeyword_11_0; }
	}

	public class JoinTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JoinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInnerJoinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInnerJoinINNERJOINKeyword_0_0 = (Keyword)cInnerJoinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLeftOuterJoinEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLeftOuterJoinLEFTOUTERJOINKeyword_1_0 = (Keyword)cLeftOuterJoinEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRightOuterJoinEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRightOuterJoinRIGHTOUTERJOINKeyword_2_0 = (Keyword)cRightOuterJoinEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFullOuterJoinEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFullOuterJoinFULLOUTERJOINKeyword_3_0 = (Keyword)cFullOuterJoinEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCrossJoinEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCrossJoinCROSSJOINKeyword_4_0 = (Keyword)cCrossJoinEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum JoinType:
		//	innerJoin="INNER JOIN" | leftOuterJoin="LEFT OUTER JOIN" | rightOuterJoin="RIGHT OUTER JOIN" |
		//	fullOuterJoin="FULL OUTER JOIN" | crossJoin="CROSS JOIN";
		public EnumRule getRule() { return rule; }

		//innerJoin="INNER JOIN" | leftOuterJoin="LEFT OUTER JOIN" | rightOuterJoin="RIGHT OUTER JOIN" |
		//fullOuterJoin="FULL OUTER JOIN" | crossJoin="CROSS JOIN"
		public Alternatives getAlternatives() { return cAlternatives; }

		//innerJoin="INNER JOIN"
		public EnumLiteralDeclaration getInnerJoinEnumLiteralDeclaration_0() { return cInnerJoinEnumLiteralDeclaration_0; }

		//"INNER JOIN"
		public Keyword getInnerJoinINNERJOINKeyword_0_0() { return cInnerJoinINNERJOINKeyword_0_0; }

		//leftOuterJoin="LEFT OUTER JOIN"
		public EnumLiteralDeclaration getLeftOuterJoinEnumLiteralDeclaration_1() { return cLeftOuterJoinEnumLiteralDeclaration_1; }

		//"LEFT OUTER JOIN"
		public Keyword getLeftOuterJoinLEFTOUTERJOINKeyword_1_0() { return cLeftOuterJoinLEFTOUTERJOINKeyword_1_0; }

		//rightOuterJoin="RIGHT OUTER JOIN"
		public EnumLiteralDeclaration getRightOuterJoinEnumLiteralDeclaration_2() { return cRightOuterJoinEnumLiteralDeclaration_2; }

		//"RIGHT OUTER JOIN"
		public Keyword getRightOuterJoinRIGHTOUTERJOINKeyword_2_0() { return cRightOuterJoinRIGHTOUTERJOINKeyword_2_0; }

		//fullOuterJoin="FULL OUTER JOIN"
		public EnumLiteralDeclaration getFullOuterJoinEnumLiteralDeclaration_3() { return cFullOuterJoinEnumLiteralDeclaration_3; }

		//"FULL OUTER JOIN"
		public Keyword getFullOuterJoinFULLOUTERJOINKeyword_3_0() { return cFullOuterJoinFULLOUTERJOINKeyword_3_0; }

		//crossJoin="CROSS JOIN"
		public EnumLiteralDeclaration getCrossJoinEnumLiteralDeclaration_4() { return cCrossJoinEnumLiteralDeclaration_4; }

		//"CROSS JOIN"
		public Keyword getCrossJoinCROSSJOINKeyword_4_0() { return cCrossJoinCROSSJOINKeyword_4_0; }
	}
	
	private ModelElements pModel;
	private SelectQueryElements pSelectQuery;
	private SelectSubSetElements pSelectSubSet;
	private SelectElements pSelect;
	private ColumnsElements pColumns;
	private ColumnOrAliasElements pColumnOrAlias;
	private ColumnFullElements pColumnFull;
	private TablesElements pTables;
	private FromTableElements pFromTable;
	private FromTableJoinElements pFromTableJoin;
	private TableOrAliasElements pTableOrAlias;
	private TableFullElements pTableFull;
	private DbObjectNameAllElements pDbObjectNameAll;
	private DbObjectNameElements pDbObjectName;
	private OrderByColumnsElements pOrderByColumns;
	private OrderByColumnFullElements pOrderByColumnFull;
	private GroupByColumnsElements pGroupByColumns;
	private GroupByColumnFullElements pGroupByColumnFull;
	private FullExpressionElements pFullExpression;
	private ExpressionFragmentSecondElements pExpressionFragmentSecond;
	private ExpressionFragmentElements pExpressionFragment;
	private ExpressionGroupElements pExpressionGroup;
	private XExpressionElements pXExpression;
	private XExpression_Elements pXExpression_;
	private XExpressionParamsElements pXExpressionParams;
	private JRParameterElements pJRParameter;
	private ExpressionElements pExpression;
	private ComparisonElements pComparison;
	private LikeElements pLike;
	private LikeOperandElements pLikeOperand;
	private BetweenElements pBetween;
	private InOperatorElements pInOperator;
	private OperandListElements pOperandList;
	private OperandElements pOperand;
	private OperandFragmentElements pOperandFragment;
	private OperandFunctionElements pOperandFunction;
	private OpFunctionArgElements pOpFunctionArg;
	private XOperandFragmentElements pXOperandFragment;
	private ParameterOperandElements pParameterOperand;
	private ExclamationParameterOperandElements pExclamationParameterOperand;
	private ColumnOperandElements pColumnOperand;
	private SubQueryOperandElements pSubQueryOperand;
	private ScalarOperandElements pScalarOperand;
	private SQLCASEElements pSQLCASE;
	private SQLCaseWhensElements pSQLCaseWhens;
	private SqlCaseWhenElements pSqlCaseWhen;
	private XFunctionElements unknownRuleXFunction;
	private JoinTypeElements unknownRuleJoinType;
	private DBIDElements pDBID;
	private StringOperandElements pStringOperand;
	private FNAMEElements pFNAME;
	private TerminalRule tJRPARAM;
	private TerminalRule tJRNPARAM;
	private TerminalRule tSTAR;
	private TerminalRule tINT;
	private TerminalRule tTIMESTAMP;
	private TerminalRule tDATE;
	private TerminalRule tTIME;
	private TerminalRule tSIGNED_DOUBLE;
	private TerminalRule tSTRING_;
	private TerminalRule tSTRING;
	private TerminalRule tDBNAME;
	private TerminalRule tID;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.jaspersoft.studio.data.Sql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	query=SelectQuery ("ORDER BY" orderByEntry=OrderByColumns)?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//SelectQuery:
	//	Select op+=SelectSubSet*;
	public SelectQueryElements getSelectQueryAccess() {
		return (pSelectQuery != null) ? pSelectQuery : (pSelectQuery = new SelectQueryElements());
	}
	
	public ParserRule getSelectQueryRule() {
		return getSelectQueryAccess().getRule();
	}

	//SelectSubSet:
	//	op=("UNION" | "INTERSECT" | "MINUS" | "EXCEPT") all="ALL"? query=Select;
	public SelectSubSetElements getSelectSubSetAccess() {
		return (pSelectSubSet != null) ? pSelectSubSet : (pSelectSubSet = new SelectSubSetElements());
	}
	
	public ParserRule getSelectSubSetRule() {
		return getSelectSubSetAccess().getRule();
	}

	//Select:
	//	select="SELECT" "DISTINCT"? cols=Columns "FROM" tbl=Tables ("WHERE" whereExpression=FullExpression)? ("GROUP BY"
	//	groupByEntry=GroupByColumns)? ("HAVING" havingEntry=FullExpression)?;
	public SelectElements getSelectAccess() {
		return (pSelect != null) ? pSelect : (pSelect = new SelectElements());
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}

	//Columns returns OrColumn:
	//	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
	public ColumnsElements getColumnsAccess() {
		return (pColumns != null) ? pColumns : (pColumns = new ColumnsElements());
	}
	
	public ParserRule getColumnsRule() {
		return getColumnsAccess().getRule();
	}

	//ColumnOrAlias:
	//	ce=Operand alias="AS"? colAlias=DbObjectName? | allCols=STAR | dbAllCols=DbObjectNameAll;
	public ColumnOrAliasElements getColumnOrAliasAccess() {
		return (pColumnOrAlias != null) ? pColumnOrAlias : (pColumnOrAlias = new ColumnOrAliasElements());
	}
	
	public ParserRule getColumnOrAliasRule() {
		return getColumnOrAliasAccess().getRule();
	}

	//ColumnFull:
	//	DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?;
	public ColumnFullElements getColumnFullAccess() {
		return (pColumnFull != null) ? pColumnFull : (pColumnFull = new ColumnFullElements());
	}
	
	public ParserRule getColumnFullRule() {
		return getColumnFullAccess().getRule();
	}

	//Tables returns OrTable:
	//	FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?;
	public TablesElements getTablesAccess() {
		return (pTables != null) ? pTables : (pTables = new TablesElements());
	}
	
	public ParserRule getTablesRule() {
		return getTablesAccess().getRule();
	}

	//FromTable:
	//	table=TableOrAlias fjoin+=FromTableJoin*;
	public FromTableElements getFromTableAccess() {
		return (pFromTable != null) ? pFromTable : (pFromTable = new FromTableElements());
	}
	
	public ParserRule getFromTableRule() {
		return getFromTableAccess().getRule();
	}

	//FromTableJoin:
	//	join=JoinType onTable=TableOrAlias "ON" joinExpr=FullExpression;
	public FromTableJoinElements getFromTableJoinAccess() {
		return (pFromTableJoin != null) ? pFromTableJoin : (pFromTableJoin = new FromTableJoinElements());
	}
	
	public ParserRule getFromTableJoinRule() {
		return getFromTableJoinAccess().getRule();
	}

	//TableOrAlias:
	//	(tfull=TableFull | sq=SubQueryOperand) alias="AS"? tblAlias=DbObjectName?;
	public TableOrAliasElements getTableOrAliasAccess() {
		return (pTableOrAlias != null) ? pTableOrAlias : (pTableOrAlias = new TableOrAliasElements());
	}
	
	public ParserRule getTableOrAliasRule() {
		return getTableOrAliasAccess().getRule();
	}

	//TableFull:
	//	DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?;
	public TableFullElements getTableFullAccess() {
		return (pTableFull != null) ? pTableFull : (pTableFull = new TableFullElements());
	}
	
	public ParserRule getTableFullRule() {
		return getTableFullAccess().getRule();
	}

	//DbObjectNameAll:
	//	dbname=DBID "." STAR;
	public DbObjectNameAllElements getDbObjectNameAllAccess() {
		return (pDbObjectNameAll != null) ? pDbObjectNameAll : (pDbObjectNameAll = new DbObjectNameAllElements());
	}
	
	public ParserRule getDbObjectNameAllRule() {
		return getDbObjectNameAllAccess().getRule();
	}

	//DbObjectName:
	//	dbname=DBID;
	public DbObjectNameElements getDbObjectNameAccess() {
		return (pDbObjectName != null) ? pDbObjectName : (pDbObjectName = new DbObjectNameElements());
	}
	
	public ParserRule getDbObjectNameRule() {
		return getDbObjectNameAccess().getRule();
	}

	//OrderByColumns returns OrOrderByColumn:
	//	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
	public OrderByColumnsElements getOrderByColumnsAccess() {
		return (pOrderByColumns != null) ? pOrderByColumns : (pOrderByColumns = new OrderByColumnsElements());
	}
	
	public ParserRule getOrderByColumnsRule() {
		return getOrderByColumnsAccess().getRule();
	}

	//OrderByColumnFull:
	//	colOrder=ColumnFull direction=("ASC" | "DESC")?;
	public OrderByColumnFullElements getOrderByColumnFullAccess() {
		return (pOrderByColumnFull != null) ? pOrderByColumnFull : (pOrderByColumnFull = new OrderByColumnFullElements());
	}
	
	public ParserRule getOrderByColumnFullRule() {
		return getOrderByColumnFullAccess().getRule();
	}

	//GroupByColumns returns OrGroupByColumn:
	//	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
	public GroupByColumnsElements getGroupByColumnsAccess() {
		return (pGroupByColumns != null) ? pGroupByColumns : (pGroupByColumns = new GroupByColumnsElements());
	}
	
	public ParserRule getGroupByColumnsRule() {
		return getGroupByColumnsAccess().getRule();
	}

	//GroupByColumnFull:
	//	colGrBy=ColumnFull;
	public GroupByColumnFullElements getGroupByColumnFullAccess() {
		return (pGroupByColumnFull != null) ? pGroupByColumnFull : (pGroupByColumnFull = new GroupByColumnFullElements());
	}
	
	public ParserRule getGroupByColumnFullRule() {
		return getGroupByColumnFullAccess().getRule();
	}

	//FullExpression returns OrExpr:
	//	ExpressionFragment ({OrExpr.entries+=current} entries+=ExpressionFragmentSecond+)?;
	public FullExpressionElements getFullExpressionAccess() {
		return (pFullExpression != null) ? pFullExpression : (pFullExpression = new FullExpressionElements());
	}
	
	public ParserRule getFullExpressionRule() {
		return getFullExpressionAccess().getRule();
	}

	//ExpressionFragmentSecond returns FullExpression:
	//	c=("AND" | "OR") efrag=ExpressionFragment;
	public ExpressionFragmentSecondElements getExpressionFragmentSecondAccess() {
		return (pExpressionFragmentSecond != null) ? pExpressionFragmentSecond : (pExpressionFragmentSecond = new ExpressionFragmentSecondElements());
	}
	
	public ParserRule getExpressionFragmentSecondRule() {
		return getExpressionFragmentSecondAccess().getRule();
	}

	//ExpressionFragment returns FullExpression:
	//	expgroup=ExpressionGroup | exp=Expression | xexp=(XExpression | XExpression_);
	public ExpressionFragmentElements getExpressionFragmentAccess() {
		return (pExpressionFragment != null) ? pExpressionFragment : (pExpressionFragment = new ExpressionFragmentElements());
	}
	
	public ParserRule getExpressionFragmentRule() {
		return getExpressionFragmentAccess().getRule();
	}

	//ExpressionGroup returns ExprGroup:
	//	{ExprGroup} "(" expr=FullExpression ")";
	public ExpressionGroupElements getExpressionGroupAccess() {
		return (pExpressionGroup != null) ? pExpressionGroup : (pExpressionGroup = new ExpressionGroupElements());
	}
	
	public ParserRule getExpressionGroupRule() {
		return getExpressionGroupAccess().getRule();
	}

	//XExpression returns XExpr:
	//	"$X" {XExpr} "{" xf=XFunction "," col=Operand ("," prm=XExpressionParams)? "}";
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XExpression_ returns XExpr:
	//	"$X" {XExpr} "{" xf=XFunction "|" col=Operand ("|" prm=XExpressionParams)? "}";
	public XExpression_Elements getXExpression_Access() {
		return (pXExpression_ != null) ? pXExpression_ : (pXExpression_ = new XExpression_Elements());
	}
	
	public ParserRule getXExpression_Rule() {
		return getXExpression_Access().getRule();
	}

	//XExpressionParams returns Prms:
	//	JRParameter ({Prms.entries+=current} ("," entries+=JRParameter)+)?;
	public XExpressionParamsElements getXExpressionParamsAccess() {
		return (pXExpressionParams != null) ? pXExpressionParams : (pXExpressionParams = new XExpressionParamsElements());
	}
	
	public ParserRule getXExpressionParamsRule() {
		return getXExpressionParamsAccess().getRule();
	}

	//JRParameter:
	//	jrprm=ID;
	public JRParameterElements getJRParameterAccess() {
		return (pJRParameter != null) ? pJRParameter : (pJRParameter = new JRParameterElements());
	}
	
	public ParserRule getJRParameterRule() {
		return getJRParameterAccess().getRule();
	}

	//Expression returns FullExpression:
	//	op1=Operand (isnull=("IS NULL" | "IS NOT NULL") | in=InOperator | between=Between | like=Like | comp=Comparison);
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Comparison:
	//	operator=(">" | ">=" | "<" | "<=" | "=" | "<>") subOperator=("ANY" | "ALL" | "SOME")? op2=Operand;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Like:
	//	opLike=("LIKE" | "NOT LIKE") op2=LikeOperand;
	public LikeElements getLikeAccess() {
		return (pLike != null) ? pLike : (pLike = new LikeElements());
	}
	
	public ParserRule getLikeRule() {
		return getLikeAccess().getRule();
	}

	//LikeOperand:
	//	op2=StringOperand | fop2=OperandFunction;
	public LikeOperandElements getLikeOperandAccess() {
		return (pLikeOperand != null) ? pLikeOperand : (pLikeOperand = new LikeOperandElements());
	}
	
	public ParserRule getLikeOperandRule() {
		return getLikeOperandAccess().getRule();
	}

	//Between:
	//	opBetween=("BETWEEN" | "NOT BETWEEN") op2=Operand "AND" op3=Operand;
	public BetweenElements getBetweenAccess() {
		return (pBetween != null) ? pBetween : (pBetween = new BetweenElements());
	}
	
	public ParserRule getBetweenRule() {
		return getBetweenAccess().getRule();
	}

	//InOperator returns InOper:
	//	{InOper} op=("NOT IN" | "IN") "(" (subquery=SubQueryOperand | opList=OperandList) ")";
	public InOperatorElements getInOperatorAccess() {
		return (pInOperator != null) ? pInOperator : (pInOperator = new InOperatorElements());
	}
	
	public ParserRule getInOperatorRule() {
		return getInOperatorAccess().getRule();
	}

	//OperandList:
	//	ScalarOperand ({OpList.entries+=current} ("," entries+=ScalarOperand)+)?;
	public OperandListElements getOperandListAccess() {
		return (pOperandList != null) ? pOperandList : (pOperandList = new OperandListElements());
	}
	
	public ParserRule getOperandListRule() {
		return getOperandListAccess().getRule();
	}

	//Operand returns Operands:
	//	op1=OperandFragment (({Plus.left=current} "+" | {Minus.left=current} "-" | {Star.left=current} STAR |
	//	{Div.left=current} "/" | {Concat.left=current} "||") right=OperandFragment)*;
	public OperandElements getOperandAccess() {
		return (pOperand != null) ? pOperand : (pOperand = new OperandElements());
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}

	//OperandFragment returns Operand: / *opGroup=OperandGroup |* / column=ColumnOperand | xop=XOperandFragment |
	//	subq=SubQueryOperand | func=OperandFunction | sqlcase=SQLCASE;
	public OperandFragmentElements getOperandFragmentAccess() {
		return (pOperandFragment != null) ? pOperandFragment : (pOperandFragment = new OperandFragmentElements());
	}
	
	public ParserRule getOperandFragmentRule() {
		return getOperandFragmentAccess().getRule();
	}

	////OperandGroup returns OpGroup:
	////	{OpGroup} '(' op=Operand ')';
	//OperandFunction returns OpFunction:
	//	{OpFunction} fname=FNAME (STAR | args=OpFunctionArg) ")";
	public OperandFunctionElements getOperandFunctionAccess() {
		return (pOperandFunction != null) ? pOperandFunction : (pOperandFunction = new OperandFunctionElements());
	}
	
	public ParserRule getOperandFunctionRule() {
		return getOperandFunctionAccess().getRule();
	}

	//OpFunctionArg:
	//	Operand ({OpFList.entries+=current} ("," entries+=Operand)+)?;
	public OpFunctionArgElements getOpFunctionArgAccess() {
		return (pOpFunctionArg != null) ? pOpFunctionArg : (pOpFunctionArg = new OpFunctionArgElements());
	}
	
	public ParserRule getOpFunctionArgRule() {
		return getOpFunctionArgAccess().getRule();
	}

	//XOperandFragment returns Operand:
	//	param=ParameterOperand | eparam=ExclamationParameterOperand | scalar=ScalarOperand;
	public XOperandFragmentElements getXOperandFragmentAccess() {
		return (pXOperandFragment != null) ? pXOperandFragment : (pXOperandFragment = new XOperandFragmentElements());
	}
	
	public ParserRule getXOperandFragmentRule() {
		return getXOperandFragmentAccess().getRule();
	}

	//ParameterOperand returns POperand:
	//	prm=JRPARAM;
	public ParameterOperandElements getParameterOperandAccess() {
		return (pParameterOperand != null) ? pParameterOperand : (pParameterOperand = new ParameterOperandElements());
	}
	
	public ParserRule getParameterOperandRule() {
		return getParameterOperandAccess().getRule();
	}

	//ExclamationParameterOperand returns ExpOperand:
	//	prm=JRNPARAM;
	public ExclamationParameterOperandElements getExclamationParameterOperandAccess() {
		return (pExclamationParameterOperand != null) ? pExclamationParameterOperand : (pExclamationParameterOperand = new ExclamationParameterOperandElements());
	}
	
	public ParserRule getExclamationParameterOperandRule() {
		return getExclamationParameterOperandAccess().getRule();
	}

	//ColumnOperand:
	//	cfull=ColumnFull;
	public ColumnOperandElements getColumnOperandAccess() {
		return (pColumnOperand != null) ? pColumnOperand : (pColumnOperand = new ColumnOperandElements());
	}
	
	public ParserRule getColumnOperandRule() {
		return getColumnOperandAccess().getRule();
	}

	//SubQueryOperand:
	//	{SubQueryOperand} "(" sel=SelectQuery ")";
	public SubQueryOperandElements getSubQueryOperandAccess() {
		return (pSubQueryOperand != null) ? pSubQueryOperand : (pSubQueryOperand = new SubQueryOperandElements());
	}
	
	public ParserRule getSubQueryOperandRule() {
		return getSubQueryOperandAccess().getRule();
	}

	//ScalarOperand:
	//	soint=INT | sostr=StringOperand | sodbl=SIGNED_DOUBLE | sodate=DATE | sotime=TIME | sodt=TIMESTAMP;
	public ScalarOperandElements getScalarOperandAccess() {
		return (pScalarOperand != null) ? pScalarOperand : (pScalarOperand = new ScalarOperandElements());
	}
	
	public ParserRule getScalarOperandRule() {
		return getScalarOperandAccess().getRule();
	}

	//SQLCASE returns SQLCaseOperand:
	//	"CASE" expr=FullExpression? when=SQLCaseWhens "END";
	public SQLCASEElements getSQLCASEAccess() {
		return (pSQLCASE != null) ? pSQLCASE : (pSQLCASE = new SQLCASEElements());
	}
	
	public ParserRule getSQLCASERule() {
		return getSQLCASEAccess().getRule();
	}

	//SQLCaseWhens:
	//	SqlCaseWhen ({WhenList.entries+=current} entries+=SqlCaseWhen+)?;
	public SQLCaseWhensElements getSQLCaseWhensAccess() {
		return (pSQLCaseWhens != null) ? pSQLCaseWhens : (pSQLCaseWhens = new SQLCaseWhensElements());
	}
	
	public ParserRule getSQLCaseWhensRule() {
		return getSQLCaseWhensAccess().getRule();
	}

	//SqlCaseWhen:
	//	"WHEN" expr=FullExpression "THEN" texp=Operand ("ELSE" eexp=Operand)?;
	public SqlCaseWhenElements getSqlCaseWhenAccess() {
		return (pSqlCaseWhen != null) ? pSqlCaseWhen : (pSqlCaseWhen = new SqlCaseWhenElements());
	}
	
	public ParserRule getSqlCaseWhenRule() {
		return getSqlCaseWhenAccess().getRule();
	}

	//enum XFunction:
	//	xin="IN" | xnotin="NOTIN" | xeq="EQUAL" | xnoteq="NOTEQUAL" | xls="LESS" | xgt="GREATER" | xlsr="LESS]" |
	//	xgtl="[GREATER" | xbwn="BETWEEN" | xbwnc="[BETWEEN]" | xbwnl="[BETWEEN" | xbwnr="BETWEEN]";
	public XFunctionElements getXFunctionAccess() {
		return (unknownRuleXFunction != null) ? unknownRuleXFunction : (unknownRuleXFunction = new XFunctionElements());
	}
	
	public EnumRule getXFunctionRule() {
		return getXFunctionAccess().getRule();
	}

	//enum JoinType:
	//	innerJoin="INNER JOIN" | leftOuterJoin="LEFT OUTER JOIN" | rightOuterJoin="RIGHT OUTER JOIN" |
	//	fullOuterJoin="FULL OUTER JOIN" | crossJoin="CROSS JOIN";
	public JoinTypeElements getJoinTypeAccess() {
		return (unknownRuleJoinType != null) ? unknownRuleJoinType : (unknownRuleJoinType = new JoinTypeElements());
	}
	
	public EnumRule getJoinTypeRule() {
		return getJoinTypeAccess().getRule();
	}

	//DBID:
	//	ID | DBNAME | STRING;
	public DBIDElements getDBIDAccess() {
		return (pDBID != null) ? pDBID : (pDBID = new DBIDElements());
	}
	
	public ParserRule getDBIDRule() {
		return getDBIDAccess().getRule();
	}

	//StringOperand:
	//	STRING_;
	public StringOperandElements getStringOperandAccess() {
		return (pStringOperand != null) ? pStringOperand : (pStringOperand = new StringOperandElements());
	}
	
	public ParserRule getStringOperandRule() {
		return getStringOperandAccess().getRule();
	}

	//FNAME:
	//	ID "(";
	public FNAMEElements getFNAMEAccess() {
		return (pFNAME != null) ? pFNAME : (pFNAME = new FNAMEElements());
	}
	
	public ParserRule getFNAMERule() {
		return getFNAMEAccess().getRule();
	}

	//terminal JRPARAM:
	//	"$P{"->"}";
	public TerminalRule getJRPARAMRule() {
		return (tJRPARAM != null) ? tJRPARAM : (tJRPARAM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JRPARAM"));
	} 

	//terminal JRNPARAM:
	//	"$P!{"->"}";
	public TerminalRule getJRNPARAMRule() {
		return (tJRNPARAM != null) ? tJRNPARAM : (tJRNPARAM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JRNPARAM"));
	} 

	//terminal STAR:
	//	"*";
	public TerminalRule getSTARRule() {
		return (tSTAR != null) ? tSTAR : (tSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STAR"));
	} 

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal TIMESTAMP returns ecore::EDate:
	//	DATE " " TIME;
	public TerminalRule getTIMESTAMPRule() {
		return (tTIMESTAMP != null) ? tTIMESTAMP : (tTIMESTAMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIMESTAMP"));
	} 

	//terminal DATE returns ecore::EDate:
	//	"\'" "0".."9" "0".."9" "0".."9" "0".."9" "-" "0".."1" "0".."9" "-" "0".."3" "0".."9" "\'";
	public TerminalRule getDATERule() {
		return (tDATE != null) ? tDATE : (tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE"));
	} 

	//terminal TIME returns ecore::EDate:
	//	"\'" "0".."9" "0".."9" ":" "0".."9" "0".."9" ":" "0".."1" "0".."9" "." "0".."9" "0".."9" "0".."9" "\'";
	public TerminalRule getTIMERule() {
		return (tTIME != null) ? tTIME : (tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME"));
	} 

	//terminal SIGNED_DOUBLE returns ecore::EBigDecimal:
	//	"-"? "0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getSIGNED_DOUBLERule() {
		return (tSIGNED_DOUBLE != null) ? tSIGNED_DOUBLE : (tSIGNED_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_DOUBLE"));
	} 

	//terminal STRING_:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRING_Rule() {
		return (tSTRING_ != null) ? tSTRING_ : (tSTRING_ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal DBNAME:
	//	"`" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "`"))* "`" | "[" ("\\" ("b" | "t" | "n"
	//	| "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "]"))* "]";
	public TerminalRule getDBNAMERule() {
		return (tDBNAME != null) ? tDBNAME : (tDBNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DBNAME"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal SL_COMMENT:
	//	("--" | "#" | "//") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
