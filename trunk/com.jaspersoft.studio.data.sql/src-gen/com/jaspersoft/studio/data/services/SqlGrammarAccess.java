/*
* generated by Xtext
*/

package com.jaspersoft.studio.data.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SqlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColColumnsParserRuleCall_1_0 = (RuleCall)cColAssignment_1.eContents().get(0);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTblAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTblTablesParserRuleCall_3_0 = (RuleCall)cTblAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHEREKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhereEntryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhereEntryWhereEntryParserRuleCall_4_1_0 = (RuleCall)cWhereEntryAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGROUPBYKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGroupByEntryAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGroupByEntryGroupByColumnsParserRuleCall_5_1_0 = (RuleCall)cGroupByEntryAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHAVINGKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cHavingEntryAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cHavingEntryHavingEntryParserRuleCall_6_1_0 = (RuleCall)cHavingEntryAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cORDERBYKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOrderByEntryAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOrderByEntryOrderByColumnsParserRuleCall_7_1_0 = (RuleCall)cOrderByEntryAssignment_7_1.eContents().get(0);
		
		//Model:
		//	"SELECT" col=Columns? "FROM" tbl=Tables ("WHERE" whereEntry=WhereEntry)? ("GROUP BY" groupByEntry=GroupByColumns)?
		//	("HAVING" havingEntry=HavingEntry)? ("ORDER BY" orderByEntry=OrderByColumns)?;
		public ParserRule getRule() { return rule; }

		//"SELECT" col=Columns? "FROM" tbl=Tables ("WHERE" whereEntry=WhereEntry)? ("GROUP BY" groupByEntry=GroupByColumns)?
		//("HAVING" havingEntry=HavingEntry)? ("ORDER BY" orderByEntry=OrderByColumns)?
		public Group getGroup() { return cGroup; }

		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }

		//col=Columns?
		public Assignment getColAssignment_1() { return cColAssignment_1; }

		//Columns
		public RuleCall getColColumnsParserRuleCall_1_0() { return cColColumnsParserRuleCall_1_0; }

		//"FROM"
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }

		//tbl=Tables
		public Assignment getTblAssignment_3() { return cTblAssignment_3; }

		//Tables
		public RuleCall getTblTablesParserRuleCall_3_0() { return cTblTablesParserRuleCall_3_0; }

		//("WHERE" whereEntry=WhereEntry)?
		public Group getGroup_4() { return cGroup_4; }

		//"WHERE"
		public Keyword getWHEREKeyword_4_0() { return cWHEREKeyword_4_0; }

		//whereEntry=WhereEntry
		public Assignment getWhereEntryAssignment_4_1() { return cWhereEntryAssignment_4_1; }

		//WhereEntry
		public RuleCall getWhereEntryWhereEntryParserRuleCall_4_1_0() { return cWhereEntryWhereEntryParserRuleCall_4_1_0; }

		//("GROUP BY" groupByEntry=GroupByColumns)?
		public Group getGroup_5() { return cGroup_5; }

		//"GROUP BY"
		public Keyword getGROUPBYKeyword_5_0() { return cGROUPBYKeyword_5_0; }

		//groupByEntry=GroupByColumns
		public Assignment getGroupByEntryAssignment_5_1() { return cGroupByEntryAssignment_5_1; }

		//GroupByColumns
		public RuleCall getGroupByEntryGroupByColumnsParserRuleCall_5_1_0() { return cGroupByEntryGroupByColumnsParserRuleCall_5_1_0; }

		//("HAVING" havingEntry=HavingEntry)?
		public Group getGroup_6() { return cGroup_6; }

		//"HAVING"
		public Keyword getHAVINGKeyword_6_0() { return cHAVINGKeyword_6_0; }

		//havingEntry=HavingEntry
		public Assignment getHavingEntryAssignment_6_1() { return cHavingEntryAssignment_6_1; }

		//HavingEntry
		public RuleCall getHavingEntryHavingEntryParserRuleCall_6_1_0() { return cHavingEntryHavingEntryParserRuleCall_6_1_0; }

		//("ORDER BY" orderByEntry=OrderByColumns)?
		public Group getGroup_7() { return cGroup_7; }

		//"ORDER BY"
		public Keyword getORDERBYKeyword_7_0() { return cORDERBYKeyword_7_0; }

		//orderByEntry=OrderByColumns
		public Assignment getOrderByEntryAssignment_7_1() { return cOrderByEntryAssignment_7_1; }

		//OrderByColumns
		public RuleCall getOrderByEntryOrderByColumnsParserRuleCall_7_1_0() { return cOrderByEntryOrderByColumnsParserRuleCall_7_1_0; }
	}

	public class OrderByColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrderByColumnFullParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrOrderByColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesOrderByColumnFullParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//OrderByColumns:
		//	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
		public ParserRule getRule() { return rule; }

		//OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
		public Group getGroup() { return cGroup; }

		//OrderByColumnFull
		public RuleCall getOrderByColumnFullParserRuleCall_0() { return cOrderByColumnFullParserRuleCall_0; }

		//({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrOrderByColumn.entries+=current}
		public Action getOrOrderByColumnEntriesAction_1_0() { return cOrOrderByColumnEntriesAction_1_0; }

		//("," entries+=OrderByColumnFull)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=OrderByColumnFull
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//OrderByColumnFull
		public RuleCall getEntriesOrderByColumnFullParserRuleCall_1_1_1_0() { return cEntriesOrderByColumnFullParserRuleCall_1_1_1_0; }
	}

	public class OrderByColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderByColumnFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cColOrderAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cColOrderColumnParserRuleCall_0_0 = (RuleCall)cColOrderAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTableFullParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColOrderAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColOrderColumnParserRuleCall_1_2_0 = (RuleCall)cColOrderAssignment_1_2.eContents().get(0);
		
		//OrderByColumnFull:
		//	colOrder=Column | TableFull "." colOrder=Column;
		public ParserRule getRule() { return rule; }

		//colOrder=Column | TableFull "." colOrder=Column
		public Alternatives getAlternatives() { return cAlternatives; }

		//colOrder=Column
		public Assignment getColOrderAssignment_0() { return cColOrderAssignment_0; }

		//Column
		public RuleCall getColOrderColumnParserRuleCall_0_0() { return cColOrderColumnParserRuleCall_0_0; }

		//TableFull "." colOrder=Column
		public Group getGroup_1() { return cGroup_1; }

		//TableFull
		public RuleCall getTableFullParserRuleCall_1_0() { return cTableFullParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//colOrder=Column
		public Assignment getColOrderAssignment_1_2() { return cColOrderAssignment_1_2; }

		//Column
		public RuleCall getColOrderColumnParserRuleCall_1_2_0() { return cColOrderColumnParserRuleCall_1_2_0; }
	}

	public class GroupByColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGroupByColumnFullParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrGroupByColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesGroupByColumnFullParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//GroupByColumns:
		//	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
		public ParserRule getRule() { return rule; }

		//GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
		public Group getGroup() { return cGroup; }

		//GroupByColumnFull
		public RuleCall getGroupByColumnFullParserRuleCall_0() { return cGroupByColumnFullParserRuleCall_0; }

		//({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrGroupByColumn.entries+=current}
		public Action getOrGroupByColumnEntriesAction_1_0() { return cOrGroupByColumnEntriesAction_1_0; }

		//("," entries+=GroupByColumnFull)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=GroupByColumnFull
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//GroupByColumnFull
		public RuleCall getEntriesGroupByColumnFullParserRuleCall_1_1_1_0() { return cEntriesGroupByColumnFullParserRuleCall_1_1_1_0; }
	}

	public class GroupByColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByColumnFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGroupByColumnAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGroupByColumnColumnParserRuleCall_0_0 = (RuleCall)cGroupByColumnAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTableFullParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cGroupByColumnAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cGroupByColumnColumnParserRuleCall_1_2_0 = (RuleCall)cGroupByColumnAssignment_1_2.eContents().get(0);
		
		//GroupByColumnFull:
		//	groupByColumn=Column | TableFull "." groupByColumn=Column;
		public ParserRule getRule() { return rule; }

		//groupByColumn=Column | TableFull "." groupByColumn=Column
		public Alternatives getAlternatives() { return cAlternatives; }

		//groupByColumn=Column
		public Assignment getGroupByColumnAssignment_0() { return cGroupByColumnAssignment_0; }

		//Column
		public RuleCall getGroupByColumnColumnParserRuleCall_0_0() { return cGroupByColumnColumnParserRuleCall_0_0; }

		//TableFull "." groupByColumn=Column
		public Group getGroup_1() { return cGroup_1; }

		//TableFull
		public RuleCall getTableFullParserRuleCall_1_0() { return cTableFullParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//groupByColumn=Column
		public Assignment getGroupByColumnAssignment_1_2() { return cGroupByColumnAssignment_1_2; }

		//Column
		public RuleCall getGroupByColumnColumnParserRuleCall_1_2_0() { return cGroupByColumnColumnParserRuleCall_1_2_0; }
	}

	public class ColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Columns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cColumnOrAliasParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrColumnEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesColumnOrAliasParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//Columns:
		//	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
		public ParserRule getRule() { return rule; }

		//ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
		public Group getGroup() { return cGroup; }

		//ColumnOrAlias
		public RuleCall getColumnOrAliasParserRuleCall_0() { return cColumnOrAliasParserRuleCall_0; }

		//({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrColumn.entries+=current}
		public Action getOrColumnEntriesAction_1_0() { return cOrColumnEntriesAction_1_0; }

		//("," entries+=ColumnOrAlias)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=ColumnOrAlias
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ColumnOrAlias
		public RuleCall getEntriesColumnOrAliasParserRuleCall_1_1_1_0() { return cEntriesColumnOrAliasParserRuleCall_1_1_1_0; }
	}

	public class ColumnOrAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnOrAlias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnFullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cColumnFullParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cASKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColAliasAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColAliasColumnAliasParserRuleCall_1_2_0 = (RuleCall)cColAliasAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cColumnFullParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cColAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColAliasColumnAliasParserRuleCall_2_1_0 = (RuleCall)cColAliasAssignment_2_1.eContents().get(0);
		
		//ColumnOrAlias:
		//	ColumnFull | ColumnFull "AS" colAlias=ColumnAlias | ColumnFull colAlias=ColumnAlias;
		public ParserRule getRule() { return rule; }

		//ColumnFull | ColumnFull "AS" colAlias=ColumnAlias | ColumnFull colAlias=ColumnAlias
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColumnFull
		public RuleCall getColumnFullParserRuleCall_0() { return cColumnFullParserRuleCall_0; }

		//ColumnFull "AS" colAlias=ColumnAlias
		public Group getGroup_1() { return cGroup_1; }

		//ColumnFull
		public RuleCall getColumnFullParserRuleCall_1_0() { return cColumnFullParserRuleCall_1_0; }

		//"AS"
		public Keyword getASKeyword_1_1() { return cASKeyword_1_1; }

		//colAlias=ColumnAlias
		public Assignment getColAliasAssignment_1_2() { return cColAliasAssignment_1_2; }

		//ColumnAlias
		public RuleCall getColAliasColumnAliasParserRuleCall_1_2_0() { return cColAliasColumnAliasParserRuleCall_1_2_0; }

		//ColumnFull colAlias=ColumnAlias
		public Group getGroup_2() { return cGroup_2; }

		//ColumnFull
		public RuleCall getColumnFullParserRuleCall_2_0() { return cColumnFullParserRuleCall_2_0; }

		//colAlias=ColumnAlias
		public Assignment getColAliasAssignment_2_1() { return cColAliasAssignment_2_1; }

		//ColumnAlias
		public RuleCall getColAliasColumnAliasParserRuleCall_2_1_0() { return cColAliasColumnAliasParserRuleCall_2_1_0; }
	}

	public class ColumnFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cColNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cColNameColumnParserRuleCall_0_0 = (RuleCall)cColNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTableFullParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColNameColumnParserRuleCall_1_2_0 = (RuleCall)cColNameAssignment_1_2.eContents().get(0);
		
		//ColumnFull:
		//	colName=Column | TableFull "." colName=Column;
		public ParserRule getRule() { return rule; }

		//colName=Column | TableFull "." colName=Column
		public Alternatives getAlternatives() { return cAlternatives; }

		//colName=Column
		public Assignment getColNameAssignment_0() { return cColNameAssignment_0; }

		//Column
		public RuleCall getColNameColumnParserRuleCall_0_0() { return cColNameColumnParserRuleCall_0_0; }

		//TableFull "." colName=Column
		public Group getGroup_1() { return cGroup_1; }

		//TableFull
		public RuleCall getTableFullParserRuleCall_1_0() { return cTableFullParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//colName=Column
		public Assignment getColNameAssignment_1_2() { return cColNameAssignment_1_2; }

		//Column
		public RuleCall getColNameColumnParserRuleCall_1_2_0() { return cColNameColumnParserRuleCall_1_2_0; }
	}

	public class ColumnAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnAlias");
		private final Assignment cColAliasAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cColAliasIDTerminalRuleCall_0 = (RuleCall)cColAliasAssignment.eContents().get(0);
		
		//ColumnAlias:
		//	colAlias=ID;
		public ParserRule getRule() { return rule; }

		//colAlias=ID
		public Assignment getColAliasAssignment() { return cColAliasAssignment; }

		//ID
		public RuleCall getColAliasIDTerminalRuleCall_0() { return cColAliasIDTerminalRuleCall_0; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Assignment cColNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cColNameIDTerminalRuleCall_0 = (RuleCall)cColNameAssignment.eContents().get(0);
		
		//Column:
		//	colName=ID;
		public ParserRule getRule() { return rule; }

		//colName=ID
		public Assignment getColNameAssignment() { return cColNameAssignment; }

		//ID
		public RuleCall getColNameIDTerminalRuleCall_0() { return cColNameIDTerminalRuleCall_0; }
	}

	public class TablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTableOrAliasParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrTableEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesTableOrAliasParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//Tables:
		//	TableOrAlias ({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?;
		public ParserRule getRule() { return rule; }

		//TableOrAlias ({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?
		public Group getGroup() { return cGroup; }

		//TableOrAlias
		public RuleCall getTableOrAliasParserRuleCall_0() { return cTableOrAliasParserRuleCall_0; }

		//({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrTable.entries+=current}
		public Action getOrTableEntriesAction_1_0() { return cOrTableEntriesAction_1_0; }

		//("," entries+=TableOrAlias)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//entries+=TableOrAlias
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//TableOrAlias
		public RuleCall getEntriesTableOrAliasParserRuleCall_1_1_1_0() { return cEntriesTableOrAliasParserRuleCall_1_1_1_0; }
	}

	public class TableOrAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableOrAlias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTableFullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTableFullParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cASKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTblAliasAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTblAliasTableAliasParserRuleCall_1_2_0 = (RuleCall)cTblAliasAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cTableFullParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cTblAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTblAliasTableAliasParserRuleCall_2_1_0 = (RuleCall)cTblAliasAssignment_2_1.eContents().get(0);
		
		//TableOrAlias:
		//	TableFull | TableFull "AS" tblAlias=TableAlias | TableFull tblAlias=TableAlias;
		public ParserRule getRule() { return rule; }

		//TableFull | TableFull "AS" tblAlias=TableAlias | TableFull tblAlias=TableAlias
		public Alternatives getAlternatives() { return cAlternatives; }

		//TableFull
		public RuleCall getTableFullParserRuleCall_0() { return cTableFullParserRuleCall_0; }

		//TableFull "AS" tblAlias=TableAlias
		public Group getGroup_1() { return cGroup_1; }

		//TableFull
		public RuleCall getTableFullParserRuleCall_1_0() { return cTableFullParserRuleCall_1_0; }

		//"AS"
		public Keyword getASKeyword_1_1() { return cASKeyword_1_1; }

		//tblAlias=TableAlias
		public Assignment getTblAliasAssignment_1_2() { return cTblAliasAssignment_1_2; }

		//TableAlias
		public RuleCall getTblAliasTableAliasParserRuleCall_1_2_0() { return cTblAliasTableAliasParserRuleCall_1_2_0; }

		//TableFull tblAlias=TableAlias
		public Group getGroup_2() { return cGroup_2; }

		//TableFull
		public RuleCall getTableFullParserRuleCall_2_0() { return cTableFullParserRuleCall_2_0; }

		//tblAlias=TableAlias
		public Assignment getTblAliasAssignment_2_1() { return cTblAliasAssignment_2_1; }

		//TableAlias
		public RuleCall getTblAliasTableAliasParserRuleCall_2_1_0() { return cTblAliasTableAliasParserRuleCall_2_1_0; }
	}

	public class TableFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSchemaParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTblAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTblTableParserRuleCall_0_2_0 = (RuleCall)cTblAssignment_0_2.eContents().get(0);
		private final Assignment cTblAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTblTableParserRuleCall_1_0 = (RuleCall)cTblAssignment_1.eContents().get(0);
		
		//TableFull:
		//	Schema "." tbl=Table | tbl=Table;
		public ParserRule getRule() { return rule; }

		//Schema "." tbl=Table | tbl=Table
		public Alternatives getAlternatives() { return cAlternatives; }

		//Schema "." tbl=Table
		public Group getGroup_0() { return cGroup_0; }

		//Schema
		public RuleCall getSchemaParserRuleCall_0_0() { return cSchemaParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//tbl=Table
		public Assignment getTblAssignment_0_2() { return cTblAssignment_0_2; }

		//Table
		public RuleCall getTblTableParserRuleCall_0_2_0() { return cTblTableParserRuleCall_0_2_0; }

		//tbl=Table
		public Assignment getTblAssignment_1() { return cTblAssignment_1; }

		//Table
		public RuleCall getTblTableParserRuleCall_1_0() { return cTblTableParserRuleCall_1_0; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Assignment cTblAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTblIDTerminalRuleCall_0 = (RuleCall)cTblAssignment.eContents().get(0);
		
		//Table:
		//	tbl=ID;
		public ParserRule getRule() { return rule; }

		//tbl=ID
		public Assignment getTblAssignment() { return cTblAssignment; }

		//ID
		public RuleCall getTblIDTerminalRuleCall_0() { return cTblIDTerminalRuleCall_0; }
	}

	public class TableAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableAlias");
		private final Assignment cTblAliasAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTblAliasIDTerminalRuleCall_0 = (RuleCall)cTblAliasAssignment.eContents().get(0);
		
		//TableAlias:
		//	tblAlias=ID;
		public ParserRule getRule() { return rule; }

		//tblAlias=ID
		public Assignment getTblAliasAssignment() { return cTblAliasAssignment; }

		//ID
		public RuleCall getTblAliasIDTerminalRuleCall_0() { return cTblAliasIDTerminalRuleCall_0; }
	}

	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Schema");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDatabaseParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSchemAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSchemIDTerminalRuleCall_0_2_0 = (RuleCall)cSchemAssignment_0_2.eContents().get(0);
		private final Assignment cSchemAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSchemIDTerminalRuleCall_1_0 = (RuleCall)cSchemAssignment_1.eContents().get(0);
		
		//Schema:
		//	Database "." schem=ID | schem=ID;
		public ParserRule getRule() { return rule; }

		//Database "." schem=ID | schem=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//Database "." schem=ID
		public Group getGroup_0() { return cGroup_0; }

		//Database
		public RuleCall getDatabaseParserRuleCall_0_0() { return cDatabaseParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//schem=ID
		public Assignment getSchemAssignment_0_2() { return cSchemAssignment_0_2; }

		//ID
		public RuleCall getSchemIDTerminalRuleCall_0_2_0() { return cSchemIDTerminalRuleCall_0_2_0; }

		//schem=ID
		public Assignment getSchemAssignment_1() { return cSchemAssignment_1; }

		//ID
		public RuleCall getSchemIDTerminalRuleCall_1_0() { return cSchemIDTerminalRuleCall_1_0; }
	}

	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Database");
		private final Assignment cDbNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDbNameIDTerminalRuleCall_0 = (RuleCall)cDbNameAssignment.eContents().get(0);
		
		//Database:
		//	dbName=ID;
		public ParserRule getRule() { return rule; }

		//dbName=ID
		public Assignment getDbNameAssignment() { return cDbNameAssignment; }

		//ID
		public RuleCall getDbNameIDTerminalRuleCall_0() { return cDbNameIDTerminalRuleCall_0; }
	}

	public class WhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndWhereEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrWhereEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cORKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesAndWhereEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//WhereEntry:
		//	AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?;
		public ParserRule getRule() { return rule; }

		//AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?
		public Group getGroup() { return cGroup; }

		//AndWhereEntry
		public RuleCall getAndWhereEntryParserRuleCall_0() { return cAndWhereEntryParserRuleCall_0; }

		//({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrWhereEntry.entries+=current}
		public Action getOrWhereEntryEntriesAction_1_0() { return cOrWhereEntryEntriesAction_1_0; }

		//("OR" entries+=AndWhereEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"OR"
		public Keyword getORKeyword_1_1_0() { return cORKeyword_1_1_0; }

		//entries+=AndWhereEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//AndWhereEntry
		public RuleCall getEntriesAndWhereEntryParserRuleCall_1_1_1_0() { return cEntriesAndWhereEntryParserRuleCall_1_1_1_0; }
	}

	public class AndWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcreteWhereEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndWhereEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cANDKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesConcreteWhereEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//AndWhereEntry returns WhereEntry:
		//	ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?;
		public ParserRule getRule() { return rule; }

		//ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?
		public Group getGroup() { return cGroup; }

		//ConcreteWhereEntry
		public RuleCall getConcreteWhereEntryParserRuleCall_0() { return cConcreteWhereEntryParserRuleCall_0; }

		//({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AndWhereEntry.entries+=current}
		public Action getAndWhereEntryEntriesAction_1_0() { return cAndWhereEntryEntriesAction_1_0; }

		//("AND" entries+=ConcreteWhereEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"AND"
		public Keyword getANDKeyword_1_1_0() { return cANDKeyword_1_1_0; }

		//entries+=ConcreteWhereEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ConcreteWhereEntry
		public RuleCall getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0() { return cEntriesConcreteWhereEntryParserRuleCall_1_1_1_0; }
	}

	public class ConcreteWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteWhereEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParWhereEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionWhereEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteWhereEntry returns WhereEntry:
		//	ParWhereEntry | ExpressionWhereEntry;
		public ParserRule getRule() { return rule; }

		//ParWhereEntry | ExpressionWhereEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParWhereEntry
		public RuleCall getParWhereEntryParserRuleCall_0() { return cParWhereEntryParserRuleCall_0; }

		//ExpressionWhereEntry
		public RuleCall getExpressionWhereEntryParserRuleCall_1() { return cExpressionWhereEntryParserRuleCall_1; }
	}

	public class ParWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWhereEntryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParWhereEntry returns WhereEntry:
		//	"(" WhereEntry ")";
		public ParserRule getRule() { return rule; }

		//"(" WhereEntry ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//WhereEntry
		public RuleCall getWhereEntryParserRuleCall_1() { return cWhereEntryParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class HavingEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HavingEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndHavingEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrHavingEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cORKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesAndHavingEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//HavingEntry:
		//	AndHavingEntry ({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?;
		public ParserRule getRule() { return rule; }

		//AndHavingEntry ({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?
		public Group getGroup() { return cGroup; }

		//AndHavingEntry
		public RuleCall getAndHavingEntryParserRuleCall_0() { return cAndHavingEntryParserRuleCall_0; }

		//({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrHavingEntry.entries+=current}
		public Action getOrHavingEntryEntriesAction_1_0() { return cOrHavingEntryEntriesAction_1_0; }

		//("OR" entries+=AndHavingEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"OR"
		public Keyword getORKeyword_1_1_0() { return cORKeyword_1_1_0; }

		//entries+=AndHavingEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//AndHavingEntry
		public RuleCall getEntriesAndHavingEntryParserRuleCall_1_1_1_0() { return cEntriesAndHavingEntryParserRuleCall_1_1_1_0; }
	}

	public class AndHavingEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndHavingEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcreteHavingEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndHavingEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cANDKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesConcreteHavingEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//AndHavingEntry returns HavingEntry:
		//	ConcreteHavingEntry ({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?;
		public ParserRule getRule() { return rule; }

		//ConcreteHavingEntry ({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?
		public Group getGroup() { return cGroup; }

		//ConcreteHavingEntry
		public RuleCall getConcreteHavingEntryParserRuleCall_0() { return cConcreteHavingEntryParserRuleCall_0; }

		//({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AndHavingEntry.entries+=current}
		public Action getAndHavingEntryEntriesAction_1_0() { return cAndHavingEntryEntriesAction_1_0; }

		//("AND" entries+=ConcreteHavingEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"AND"
		public Keyword getANDKeyword_1_1_0() { return cANDKeyword_1_1_0; }

		//entries+=ConcreteHavingEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ConcreteHavingEntry
		public RuleCall getEntriesConcreteHavingEntryParserRuleCall_1_1_1_0() { return cEntriesConcreteHavingEntryParserRuleCall_1_1_1_0; }
	}

	public class ConcreteHavingEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteHavingEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParHavingEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionWhereEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteHavingEntry returns HavingEntry:
		//	ParHavingEntry | ExpressionWhereEntry;
		public ParserRule getRule() { return rule; }

		//ParHavingEntry | ExpressionWhereEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParHavingEntry
		public RuleCall getParHavingEntryParserRuleCall_0() { return cParHavingEntryParserRuleCall_0; }

		//ExpressionWhereEntry
		public RuleCall getExpressionWhereEntryParserRuleCall_1() { return cExpressionWhereEntryParserRuleCall_1; }
	}

	public class ParHavingEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParHavingEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cHavingEntryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParHavingEntry returns HavingEntry:
		//	"(" HavingEntry ")";
		public ParserRule getRule() { return rule; }

		//"(" HavingEntry ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//HavingEntry
		public RuleCall getHavingEntryParserRuleCall_1() { return cHavingEntryParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExpressionWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionWhereEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleExpressionWhereEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiExpressionWhereEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionWhereEntry:
		//	SingleExpressionWhereEntry | MultiExpressionWhereEntry;
		public ParserRule getRule() { return rule; }

		//SingleExpressionWhereEntry | MultiExpressionWhereEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//SingleExpressionWhereEntry
		public RuleCall getSingleExpressionWhereEntryParserRuleCall_0() { return cSingleExpressionWhereEntryParserRuleCall_0; }

		//MultiExpressionWhereEntry
		public RuleCall getMultiExpressionWhereEntryParserRuleCall_1() { return cMultiExpressionWhereEntryParserRuleCall_1; }
	}

	public class SingleExpressionWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleExpressionWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//SingleExpressionWhereEntry:
		//	name=ID operator=Operator rhs=Expression;
		public ParserRule getRule() { return rule; }

		//name=ID operator=Operator rhs=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//rhs=Expression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_2_0() { return cRhsExpressionParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDoubleExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReplacableValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Expression:
		//	DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
		//	ReplacableValue;
		public ParserRule getRule() { return rule; }

		//DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
		//ReplacableValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//DoubleExpression
		public RuleCall getDoubleExpressionParserRuleCall_0() { return cDoubleExpressionParserRuleCall_0; }

		//LongExpression
		public RuleCall getLongExpressionParserRuleCall_1() { return cLongExpressionParserRuleCall_1; }

		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_2() { return cStringExpressionParserRuleCall_2; }

		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_3() { return cNullExpressionParserRuleCall_3; }

		//DateExpression
		public RuleCall getDateExpressionParserRuleCall_4() { return cDateExpressionParserRuleCall_4; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5() { return cBooleanExpressionParserRuleCall_5; }

		//ReplacableValue
		public RuleCall getReplacableValueParserRuleCall_6() { return cReplacableValueParserRuleCall_6; }
	}

	public class ReplacableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplacableValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueQuestionMarkKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//ReplacableValue:
		//	value="?";
		public ParserRule getRule() { return rule; }

		//value="?"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"?"
		public Keyword getValueQuestionMarkKeyword_0() { return cValueQuestionMarkKeyword_0; }
	}

	public class DoubleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSIGNED_DOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleExpression:
		//	value=SIGNED_DOUBLE;
		public ParserRule getRule() { return rule; }

		//value=SIGNED_DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SIGNED_DOUBLE
		public RuleCall getValueSIGNED_DOUBLETerminalRuleCall_0() { return cValueSIGNED_DOUBLETerminalRuleCall_0; }
	}

	public class LongExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSINGED_LONGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongExpression:
		//	value=SINGED_LONG;
		public ParserRule getRule() { return rule; }

		//value=SINGED_LONG
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SINGED_LONG
		public RuleCall getValueSINGED_LONGTerminalRuleCall_0() { return cValueSINGED_LONGTerminalRuleCall_0; }
	}

	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringExpression:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNullKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//NullExpression:
		//	value="null";
		public ParserRule getRule() { return rule; }

		//value="null"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"null"
		public Keyword getValueNullKeyword_0() { return cValueNullKeyword_0; }
	}

	public class DateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDATETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DateExpression:
		//	value=DATE;
		public ParserRule getRule() { return rule; }

		//value=DATE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DATE
		public RuleCall getValueDATETerminalRuleCall_0() { return cValueDATETerminalRuleCall_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTrueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueAssignment_0.eContents().get(0);
		private final Assignment cTrueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTrueFalseKeyword_1_0 = (Keyword)cTrueAssignment_1.eContents().get(0);
		
		//BooleanExpression:
		//	true="true" | true="false";
		public ParserRule getRule() { return rule; }

		//true="true" | true="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//true="true"
		public Assignment getTrueAssignment_0() { return cTrueAssignment_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//true="false"
		public Assignment getTrueAssignment_1() { return cTrueAssignment_1; }

		//"false"
		public Keyword getTrueFalseKeyword_1_0() { return cTrueFalseKeyword_1_0; }
	}

	public class MultiExpressionWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiExpressionWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorArrayOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsArrayExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//MultiExpressionWhereEntry:
		//	name=ID operator=ArrayOperator rhs=ArrayExpression;
		public ParserRule getRule() { return rule; }

		//name=ID operator=ArrayOperator rhs=ArrayExpression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//operator=ArrayOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//ArrayOperator
		public RuleCall getOperatorArrayOperatorEnumRuleCall_1_0() { return cOperatorArrayOperatorEnumRuleCall_1_0; }

		//rhs=ArrayExpression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//ArrayExpression
		public RuleCall getRhsArrayExpressionParserRuleCall_2_0() { return cRhsArrayExpressionParserRuleCall_2_0; }
	}

	public class ArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDoubleArrayExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongArrayExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringArrayExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullArrayExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateArrayExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanArrayExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ArrayExpression:
		//	DoubleArrayExpression | LongArrayExpression | StringArrayExpression | NullArrayExpression | DateArrayExpression |
		//	BooleanArrayExpression;
		public ParserRule getRule() { return rule; }

		//DoubleArrayExpression | LongArrayExpression | StringArrayExpression | NullArrayExpression | DateArrayExpression |
		//BooleanArrayExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//DoubleArrayExpression
		public RuleCall getDoubleArrayExpressionParserRuleCall_0() { return cDoubleArrayExpressionParserRuleCall_0; }

		//LongArrayExpression
		public RuleCall getLongArrayExpressionParserRuleCall_1() { return cLongArrayExpressionParserRuleCall_1; }

		//StringArrayExpression
		public RuleCall getStringArrayExpressionParserRuleCall_2() { return cStringArrayExpressionParserRuleCall_2; }

		//NullArrayExpression
		public RuleCall getNullArrayExpressionParserRuleCall_3() { return cNullArrayExpressionParserRuleCall_3; }

		//DateArrayExpression
		public RuleCall getDateArrayExpressionParserRuleCall_4() { return cDateArrayExpressionParserRuleCall_4; }

		//BooleanArrayExpression
		public RuleCall getBooleanArrayExpressionParserRuleCall_5() { return cBooleanArrayExpressionParserRuleCall_5; }
	}

	public class DoubleArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesSIGNED_DOUBLETerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesSIGNED_DOUBLETerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DoubleArrayExpression:
		//	"[" values+=SIGNED_DOUBLE ("," values+=SIGNED_DOUBLE)* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=SIGNED_DOUBLE ("," values+=SIGNED_DOUBLE)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=SIGNED_DOUBLE
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//SIGNED_DOUBLE
		public RuleCall getValuesSIGNED_DOUBLETerminalRuleCall_1_0() { return cValuesSIGNED_DOUBLETerminalRuleCall_1_0; }

		//("," values+=SIGNED_DOUBLE)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=SIGNED_DOUBLE
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//SIGNED_DOUBLE
		public RuleCall getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0() { return cValuesSIGNED_DOUBLETerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class LongArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesSINGED_LONGTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesSINGED_LONGTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LongArrayExpression:
		//	"[" values+=SINGED_LONG ("," values+=SINGED_LONG)* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=SINGED_LONG ("," values+=SINGED_LONG)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=SINGED_LONG
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//SINGED_LONG
		public RuleCall getValuesSINGED_LONGTerminalRuleCall_1_0() { return cValuesSINGED_LONGTerminalRuleCall_1_0; }

		//("," values+=SINGED_LONG)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=SINGED_LONG
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//SINGED_LONG
		public RuleCall getValuesSINGED_LONGTerminalRuleCall_2_1_0() { return cValuesSINGED_LONGTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class StringArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StringArrayExpression:
		//	"[" values+=STRING ("," values+=STRING)* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=STRING ("," values+=STRING)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=STRING
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_0() { return cValuesSTRINGTerminalRuleCall_1_0; }

		//("," values+=STRING)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=STRING
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_1_0() { return cValuesSTRINGTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class NullArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValuesNullKeyword_1_0 = (Keyword)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cValuesNullKeyword_2_1_0 = (Keyword)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NullArrayExpression:
		//	"[" values+="null" ("," values+="null")* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+="null" ("," values+="null")* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+="null"
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//"null"
		public Keyword getValuesNullKeyword_1_0() { return cValuesNullKeyword_1_0; }

		//("," values+="null")*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+="null"
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//"null"
		public Keyword getValuesNullKeyword_2_1_0() { return cValuesNullKeyword_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class DateArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesDATETerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesDATETerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DateArrayExpression:
		//	"[" values+=DATE ("," values+=DATE)* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=DATE ("," values+=DATE)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=DATE
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//DATE
		public RuleCall getValuesDATETerminalRuleCall_1_0() { return cValuesDATETerminalRuleCall_1_0; }

		//("," values+=DATE)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=DATE
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//DATE
		public RuleCall getValuesDATETerminalRuleCall_2_1_0() { return cValuesDATETerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class BooleanArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesBOOLTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesBOOLTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BooleanArrayExpression:
		//	"[" values+=BOOL ("," values+=BOOL)* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=BOOL ("," values+=BOOL)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=BOOL
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//BOOL
		public RuleCall getValuesBOOLTerminalRuleCall_1_0() { return cValuesBOOLTerminalRuleCall_1_0; }

		//("," values+=BOOL)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=BOOL
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//BOOL
		public RuleCall getValuesBOOLTerminalRuleCall_2_1_0() { return cValuesBOOLTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	
	public class ArrayOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSql_inEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSql_inInKeyword_0_0 = (Keyword)cSql_inEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSql_notInEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSql_notInNotInKeyword_1_0 = (Keyword)cSql_notInEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ArrayOperator:
		//	sql_in="in" | sql_notIn="not in";
		public EnumRule getRule() { return rule; }

		//sql_in="in" | sql_notIn="not in"
		public Alternatives getAlternatives() { return cAlternatives; }

		//sql_in="in"
		public EnumLiteralDeclaration getSql_inEnumLiteralDeclaration_0() { return cSql_inEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getSql_inInKeyword_0_0() { return cSql_inInKeyword_0_0; }

		//sql_notIn="not in"
		public EnumLiteralDeclaration getSql_notInEnumLiteralDeclaration_1() { return cSql_notInEnumLiteralDeclaration_1; }

		//"not in"
		public Keyword getSql_notInNotInKeyword_1_0() { return cSql_notInNotInKeyword_1_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThenEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThenLessThanSignKeyword_0_0 = (Keyword)cLessThenEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThenGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLikeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLikeLikeKeyword_6_0 = (Keyword)cLikeEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNotLikeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNotLikeNotLikeKeyword_7_0 = (Keyword)cNotLikeEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNotInEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNotInNotInKeyword_8_0 = (Keyword)cNotInEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cInInKeyword_9_0 = (Keyword)cInEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Operator:
		//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | like |
		//	notLike="not like" | notIn="not in" | in;
		public EnumRule getRule() { return rule; }

		//lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | like |
		//notLike="not like" | notIn="not in" | in
		public Alternatives getAlternatives() { return cAlternatives; }

		//lessThen="<"
		public EnumLiteralDeclaration getLessThenEnumLiteralDeclaration_0() { return cLessThenEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThenLessThanSignKeyword_0_0() { return cLessThenLessThanSignKeyword_0_0; }

		//greaterThen=">"
		public EnumLiteralDeclaration getGreaterThenEnumLiteralDeclaration_1() { return cGreaterThenEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterThenGreaterThanSignKeyword_1_0() { return cGreaterThenGreaterThanSignKeyword_1_0; }

		//lessEqual="<="
		public EnumLiteralDeclaration getLessEqualEnumLiteralDeclaration_2() { return cLessEqualEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLessEqualLessThanSignEqualsSignKeyword_2_0() { return cLessEqualLessThanSignEqualsSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }

		//"="
		public Keyword getEqualEqualsSignKeyword_4_0() { return cEqualEqualsSignKeyword_4_0; }

		//notEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_5() { return cNotEqualEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualExclamationMarkEqualsSignKeyword_5_0; }

		//like
		public EnumLiteralDeclaration getLikeEnumLiteralDeclaration_6() { return cLikeEnumLiteralDeclaration_6; }

		//"like"
		public Keyword getLikeLikeKeyword_6_0() { return cLikeLikeKeyword_6_0; }

		//notLike="not like"
		public EnumLiteralDeclaration getNotLikeEnumLiteralDeclaration_7() { return cNotLikeEnumLiteralDeclaration_7; }

		//"not like"
		public Keyword getNotLikeNotLikeKeyword_7_0() { return cNotLikeNotLikeKeyword_7_0; }

		//notIn="not in"
		public EnumLiteralDeclaration getNotInEnumLiteralDeclaration_8() { return cNotInEnumLiteralDeclaration_8; }

		//"not in"
		public Keyword getNotInNotInKeyword_8_0() { return cNotInNotInKeyword_8_0; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_9() { return cInEnumLiteralDeclaration_9; }

		//"in"
		public Keyword getInInKeyword_9_0() { return cInInKeyword_9_0; }
	}
	
	private ModelElements pModel;
	private OrderByColumnsElements pOrderByColumns;
	private OrderByColumnFullElements pOrderByColumnFull;
	private GroupByColumnsElements pGroupByColumns;
	private GroupByColumnFullElements pGroupByColumnFull;
	private ColumnsElements pColumns;
	private ColumnOrAliasElements pColumnOrAlias;
	private ColumnFullElements pColumnFull;
	private ColumnAliasElements pColumnAlias;
	private ColumnElements pColumn;
	private TablesElements pTables;
	private TableOrAliasElements pTableOrAlias;
	private TableFullElements pTableFull;
	private TableElements pTable;
	private TableAliasElements pTableAlias;
	private SchemaElements pSchema;
	private DatabaseElements pDatabase;
	private WhereEntryElements pWhereEntry;
	private AndWhereEntryElements pAndWhereEntry;
	private ConcreteWhereEntryElements pConcreteWhereEntry;
	private ParWhereEntryElements pParWhereEntry;
	private HavingEntryElements pHavingEntry;
	private AndHavingEntryElements pAndHavingEntry;
	private ConcreteHavingEntryElements pConcreteHavingEntry;
	private ParHavingEntryElements pParHavingEntry;
	private ExpressionWhereEntryElements pExpressionWhereEntry;
	private SingleExpressionWhereEntryElements pSingleExpressionWhereEntry;
	private ExpressionElements pExpression;
	private ReplacableValueElements pReplacableValue;
	private DoubleExpressionElements pDoubleExpression;
	private LongExpressionElements pLongExpression;
	private StringExpressionElements pStringExpression;
	private NullExpressionElements pNullExpression;
	private DateExpressionElements pDateExpression;
	private BooleanExpressionElements pBooleanExpression;
	private MultiExpressionWhereEntryElements pMultiExpressionWhereEntry;
	private ArrayExpressionElements pArrayExpression;
	private DoubleArrayExpressionElements pDoubleArrayExpression;
	private LongArrayExpressionElements pLongArrayExpression;
	private StringArrayExpressionElements pStringArrayExpression;
	private NullArrayExpressionElements pNullArrayExpression;
	private DateArrayExpressionElements pDateArrayExpression;
	private BooleanArrayExpressionElements pBooleanArrayExpression;
	private ArrayOperatorElements unknownRuleArrayOperator;
	private OperatorElements unknownRuleOperator;
	private TerminalRule tBOOL;
	private TerminalRule tSINGED_LONG;
	private TerminalRule tDATE;
	private TerminalRule tSIGNED_DOUBLE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.jaspersoft.studio.data.Sql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"SELECT" col=Columns? "FROM" tbl=Tables ("WHERE" whereEntry=WhereEntry)? ("GROUP BY" groupByEntry=GroupByColumns)?
	//	("HAVING" havingEntry=HavingEntry)? ("ORDER BY" orderByEntry=OrderByColumns)?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//OrderByColumns:
	//	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;
	public OrderByColumnsElements getOrderByColumnsAccess() {
		return (pOrderByColumns != null) ? pOrderByColumns : (pOrderByColumns = new OrderByColumnsElements());
	}
	
	public ParserRule getOrderByColumnsRule() {
		return getOrderByColumnsAccess().getRule();
	}

	//OrderByColumnFull:
	//	colOrder=Column | TableFull "." colOrder=Column;
	public OrderByColumnFullElements getOrderByColumnFullAccess() {
		return (pOrderByColumnFull != null) ? pOrderByColumnFull : (pOrderByColumnFull = new OrderByColumnFullElements());
	}
	
	public ParserRule getOrderByColumnFullRule() {
		return getOrderByColumnFullAccess().getRule();
	}

	//GroupByColumns:
	//	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;
	public GroupByColumnsElements getGroupByColumnsAccess() {
		return (pGroupByColumns != null) ? pGroupByColumns : (pGroupByColumns = new GroupByColumnsElements());
	}
	
	public ParserRule getGroupByColumnsRule() {
		return getGroupByColumnsAccess().getRule();
	}

	//GroupByColumnFull:
	//	groupByColumn=Column | TableFull "." groupByColumn=Column;
	public GroupByColumnFullElements getGroupByColumnFullAccess() {
		return (pGroupByColumnFull != null) ? pGroupByColumnFull : (pGroupByColumnFull = new GroupByColumnFullElements());
	}
	
	public ParserRule getGroupByColumnFullRule() {
		return getGroupByColumnFullAccess().getRule();
	}

	//Columns:
	//	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;
	public ColumnsElements getColumnsAccess() {
		return (pColumns != null) ? pColumns : (pColumns = new ColumnsElements());
	}
	
	public ParserRule getColumnsRule() {
		return getColumnsAccess().getRule();
	}

	//ColumnOrAlias:
	//	ColumnFull | ColumnFull "AS" colAlias=ColumnAlias | ColumnFull colAlias=ColumnAlias;
	public ColumnOrAliasElements getColumnOrAliasAccess() {
		return (pColumnOrAlias != null) ? pColumnOrAlias : (pColumnOrAlias = new ColumnOrAliasElements());
	}
	
	public ParserRule getColumnOrAliasRule() {
		return getColumnOrAliasAccess().getRule();
	}

	//ColumnFull:
	//	colName=Column | TableFull "." colName=Column;
	public ColumnFullElements getColumnFullAccess() {
		return (pColumnFull != null) ? pColumnFull : (pColumnFull = new ColumnFullElements());
	}
	
	public ParserRule getColumnFullRule() {
		return getColumnFullAccess().getRule();
	}

	//ColumnAlias:
	//	colAlias=ID;
	public ColumnAliasElements getColumnAliasAccess() {
		return (pColumnAlias != null) ? pColumnAlias : (pColumnAlias = new ColumnAliasElements());
	}
	
	public ParserRule getColumnAliasRule() {
		return getColumnAliasAccess().getRule();
	}

	//Column:
	//	colName=ID;
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//Tables:
	//	TableOrAlias ({OrTable.entries+=current} ("," entries+=TableOrAlias)+)?;
	public TablesElements getTablesAccess() {
		return (pTables != null) ? pTables : (pTables = new TablesElements());
	}
	
	public ParserRule getTablesRule() {
		return getTablesAccess().getRule();
	}

	//TableOrAlias:
	//	TableFull | TableFull "AS" tblAlias=TableAlias | TableFull tblAlias=TableAlias;
	public TableOrAliasElements getTableOrAliasAccess() {
		return (pTableOrAlias != null) ? pTableOrAlias : (pTableOrAlias = new TableOrAliasElements());
	}
	
	public ParserRule getTableOrAliasRule() {
		return getTableOrAliasAccess().getRule();
	}

	//TableFull:
	//	Schema "." tbl=Table | tbl=Table;
	public TableFullElements getTableFullAccess() {
		return (pTableFull != null) ? pTableFull : (pTableFull = new TableFullElements());
	}
	
	public ParserRule getTableFullRule() {
		return getTableFullAccess().getRule();
	}

	//Table:
	//	tbl=ID;
	public TableElements getTableAccess() {
		return (pTable != null) ? pTable : (pTable = new TableElements());
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//TableAlias:
	//	tblAlias=ID;
	public TableAliasElements getTableAliasAccess() {
		return (pTableAlias != null) ? pTableAlias : (pTableAlias = new TableAliasElements());
	}
	
	public ParserRule getTableAliasRule() {
		return getTableAliasAccess().getRule();
	}

	//Schema:
	//	Database "." schem=ID | schem=ID;
	public SchemaElements getSchemaAccess() {
		return (pSchema != null) ? pSchema : (pSchema = new SchemaElements());
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}

	//Database:
	//	dbName=ID;
	public DatabaseElements getDatabaseAccess() {
		return (pDatabase != null) ? pDatabase : (pDatabase = new DatabaseElements());
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}

	//WhereEntry:
	//	AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?;
	public WhereEntryElements getWhereEntryAccess() {
		return (pWhereEntry != null) ? pWhereEntry : (pWhereEntry = new WhereEntryElements());
	}
	
	public ParserRule getWhereEntryRule() {
		return getWhereEntryAccess().getRule();
	}

	//AndWhereEntry returns WhereEntry:
	//	ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?;
	public AndWhereEntryElements getAndWhereEntryAccess() {
		return (pAndWhereEntry != null) ? pAndWhereEntry : (pAndWhereEntry = new AndWhereEntryElements());
	}
	
	public ParserRule getAndWhereEntryRule() {
		return getAndWhereEntryAccess().getRule();
	}

	//ConcreteWhereEntry returns WhereEntry:
	//	ParWhereEntry | ExpressionWhereEntry;
	public ConcreteWhereEntryElements getConcreteWhereEntryAccess() {
		return (pConcreteWhereEntry != null) ? pConcreteWhereEntry : (pConcreteWhereEntry = new ConcreteWhereEntryElements());
	}
	
	public ParserRule getConcreteWhereEntryRule() {
		return getConcreteWhereEntryAccess().getRule();
	}

	//ParWhereEntry returns WhereEntry:
	//	"(" WhereEntry ")";
	public ParWhereEntryElements getParWhereEntryAccess() {
		return (pParWhereEntry != null) ? pParWhereEntry : (pParWhereEntry = new ParWhereEntryElements());
	}
	
	public ParserRule getParWhereEntryRule() {
		return getParWhereEntryAccess().getRule();
	}

	//HavingEntry:
	//	AndHavingEntry ({OrHavingEntry.entries+=current} ("OR" entries+=AndHavingEntry)+)?;
	public HavingEntryElements getHavingEntryAccess() {
		return (pHavingEntry != null) ? pHavingEntry : (pHavingEntry = new HavingEntryElements());
	}
	
	public ParserRule getHavingEntryRule() {
		return getHavingEntryAccess().getRule();
	}

	//AndHavingEntry returns HavingEntry:
	//	ConcreteHavingEntry ({AndHavingEntry.entries+=current} ("AND" entries+=ConcreteHavingEntry)+)?;
	public AndHavingEntryElements getAndHavingEntryAccess() {
		return (pAndHavingEntry != null) ? pAndHavingEntry : (pAndHavingEntry = new AndHavingEntryElements());
	}
	
	public ParserRule getAndHavingEntryRule() {
		return getAndHavingEntryAccess().getRule();
	}

	//ConcreteHavingEntry returns HavingEntry:
	//	ParHavingEntry | ExpressionWhereEntry;
	public ConcreteHavingEntryElements getConcreteHavingEntryAccess() {
		return (pConcreteHavingEntry != null) ? pConcreteHavingEntry : (pConcreteHavingEntry = new ConcreteHavingEntryElements());
	}
	
	public ParserRule getConcreteHavingEntryRule() {
		return getConcreteHavingEntryAccess().getRule();
	}

	//ParHavingEntry returns HavingEntry:
	//	"(" HavingEntry ")";
	public ParHavingEntryElements getParHavingEntryAccess() {
		return (pParHavingEntry != null) ? pParHavingEntry : (pParHavingEntry = new ParHavingEntryElements());
	}
	
	public ParserRule getParHavingEntryRule() {
		return getParHavingEntryAccess().getRule();
	}

	//ExpressionWhereEntry:
	//	SingleExpressionWhereEntry | MultiExpressionWhereEntry;
	public ExpressionWhereEntryElements getExpressionWhereEntryAccess() {
		return (pExpressionWhereEntry != null) ? pExpressionWhereEntry : (pExpressionWhereEntry = new ExpressionWhereEntryElements());
	}
	
	public ParserRule getExpressionWhereEntryRule() {
		return getExpressionWhereEntryAccess().getRule();
	}

	//SingleExpressionWhereEntry:
	//	name=ID operator=Operator rhs=Expression;
	public SingleExpressionWhereEntryElements getSingleExpressionWhereEntryAccess() {
		return (pSingleExpressionWhereEntry != null) ? pSingleExpressionWhereEntry : (pSingleExpressionWhereEntry = new SingleExpressionWhereEntryElements());
	}
	
	public ParserRule getSingleExpressionWhereEntryRule() {
		return getSingleExpressionWhereEntryAccess().getRule();
	}

	//Expression:
	//	DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
	//	ReplacableValue;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ReplacableValue:
	//	value="?";
	public ReplacableValueElements getReplacableValueAccess() {
		return (pReplacableValue != null) ? pReplacableValue : (pReplacableValue = new ReplacableValueElements());
	}
	
	public ParserRule getReplacableValueRule() {
		return getReplacableValueAccess().getRule();
	}

	//DoubleExpression:
	//	value=SIGNED_DOUBLE;
	public DoubleExpressionElements getDoubleExpressionAccess() {
		return (pDoubleExpression != null) ? pDoubleExpression : (pDoubleExpression = new DoubleExpressionElements());
	}
	
	public ParserRule getDoubleExpressionRule() {
		return getDoubleExpressionAccess().getRule();
	}

	//LongExpression:
	//	value=SINGED_LONG;
	public LongExpressionElements getLongExpressionAccess() {
		return (pLongExpression != null) ? pLongExpression : (pLongExpression = new LongExpressionElements());
	}
	
	public ParserRule getLongExpressionRule() {
		return getLongExpressionAccess().getRule();
	}

	//StringExpression:
	//	value=STRING;
	public StringExpressionElements getStringExpressionAccess() {
		return (pStringExpression != null) ? pStringExpression : (pStringExpression = new StringExpressionElements());
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}

	//NullExpression:
	//	value="null";
	public NullExpressionElements getNullExpressionAccess() {
		return (pNullExpression != null) ? pNullExpression : (pNullExpression = new NullExpressionElements());
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}

	//DateExpression:
	//	value=DATE;
	public DateExpressionElements getDateExpressionAccess() {
		return (pDateExpression != null) ? pDateExpression : (pDateExpression = new DateExpressionElements());
	}
	
	public ParserRule getDateExpressionRule() {
		return getDateExpressionAccess().getRule();
	}

	//BooleanExpression:
	//	true="true" | true="false";
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//MultiExpressionWhereEntry:
	//	name=ID operator=ArrayOperator rhs=ArrayExpression;
	public MultiExpressionWhereEntryElements getMultiExpressionWhereEntryAccess() {
		return (pMultiExpressionWhereEntry != null) ? pMultiExpressionWhereEntry : (pMultiExpressionWhereEntry = new MultiExpressionWhereEntryElements());
	}
	
	public ParserRule getMultiExpressionWhereEntryRule() {
		return getMultiExpressionWhereEntryAccess().getRule();
	}

	//ArrayExpression:
	//	DoubleArrayExpression | LongArrayExpression | StringArrayExpression | NullArrayExpression | DateArrayExpression |
	//	BooleanArrayExpression;
	public ArrayExpressionElements getArrayExpressionAccess() {
		return (pArrayExpression != null) ? pArrayExpression : (pArrayExpression = new ArrayExpressionElements());
	}
	
	public ParserRule getArrayExpressionRule() {
		return getArrayExpressionAccess().getRule();
	}

	//DoubleArrayExpression:
	//	"[" values+=SIGNED_DOUBLE ("," values+=SIGNED_DOUBLE)* "]";
	public DoubleArrayExpressionElements getDoubleArrayExpressionAccess() {
		return (pDoubleArrayExpression != null) ? pDoubleArrayExpression : (pDoubleArrayExpression = new DoubleArrayExpressionElements());
	}
	
	public ParserRule getDoubleArrayExpressionRule() {
		return getDoubleArrayExpressionAccess().getRule();
	}

	//LongArrayExpression:
	//	"[" values+=SINGED_LONG ("," values+=SINGED_LONG)* "]";
	public LongArrayExpressionElements getLongArrayExpressionAccess() {
		return (pLongArrayExpression != null) ? pLongArrayExpression : (pLongArrayExpression = new LongArrayExpressionElements());
	}
	
	public ParserRule getLongArrayExpressionRule() {
		return getLongArrayExpressionAccess().getRule();
	}

	//StringArrayExpression:
	//	"[" values+=STRING ("," values+=STRING)* "]";
	public StringArrayExpressionElements getStringArrayExpressionAccess() {
		return (pStringArrayExpression != null) ? pStringArrayExpression : (pStringArrayExpression = new StringArrayExpressionElements());
	}
	
	public ParserRule getStringArrayExpressionRule() {
		return getStringArrayExpressionAccess().getRule();
	}

	//NullArrayExpression:
	//	"[" values+="null" ("," values+="null")* "]";
	public NullArrayExpressionElements getNullArrayExpressionAccess() {
		return (pNullArrayExpression != null) ? pNullArrayExpression : (pNullArrayExpression = new NullArrayExpressionElements());
	}
	
	public ParserRule getNullArrayExpressionRule() {
		return getNullArrayExpressionAccess().getRule();
	}

	//DateArrayExpression:
	//	"[" values+=DATE ("," values+=DATE)* "]";
	public DateArrayExpressionElements getDateArrayExpressionAccess() {
		return (pDateArrayExpression != null) ? pDateArrayExpression : (pDateArrayExpression = new DateArrayExpressionElements());
	}
	
	public ParserRule getDateArrayExpressionRule() {
		return getDateArrayExpressionAccess().getRule();
	}

	//BooleanArrayExpression:
	//	"[" values+=BOOL ("," values+=BOOL)* "]";
	public BooleanArrayExpressionElements getBooleanArrayExpressionAccess() {
		return (pBooleanArrayExpression != null) ? pBooleanArrayExpression : (pBooleanArrayExpression = new BooleanArrayExpressionElements());
	}
	
	public ParserRule getBooleanArrayExpressionRule() {
		return getBooleanArrayExpressionAccess().getRule();
	}

	//enum ArrayOperator:
	//	sql_in="in" | sql_notIn="not in";
	public ArrayOperatorElements getArrayOperatorAccess() {
		return (unknownRuleArrayOperator != null) ? unknownRuleArrayOperator : (unknownRuleArrayOperator = new ArrayOperatorElements());
	}
	
	public EnumRule getArrayOperatorRule() {
		return getArrayOperatorAccess().getRule();
	}

	//enum Operator:
	//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | like |
	//	notLike="not like" | notIn="not in" | in;
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false" | "TRUE" | "FALSE";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal SINGED_LONG returns ecore::ELong:
	//	"-"? "0".."9"+;
	public TerminalRule getSINGED_LONGRule() {
		return (tSINGED_LONG != null) ? tSINGED_LONG : (tSINGED_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGED_LONG"));
	} 

	//terminal DATE returns ecore::EDate:
	//	"0".."9" "0".."9" "0".."9" "0".."9" "-" "0".."1" "0".."9" "-" "0".."3" "0".."9";
	public TerminalRule getDATERule() {
		return (tDATE != null) ? tDATE : (tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE"));
	} 

	//terminal SIGNED_DOUBLE returns ecore::EDouble:
	//	"-"? "0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getSIGNED_DOUBLERule() {
		return (tSIGNED_DOUBLE != null) ? tSIGNED_DOUBLE : (tSIGNED_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_DOUBLE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
