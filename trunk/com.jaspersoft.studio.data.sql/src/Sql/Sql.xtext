grammar com.jaspersoft.studio.data.Sql with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sql "http://www.com.jaspersoft.studio.data.Sql"

Model:
	Select ({OrSelect.entries+=current} ("UNION" entries+=Select)+)?
	('ORDER BY' orderByEntry=OrderByColumns)?;

Select:
	select='SELECT' ('DISTINCT')? cols=Columns
	'FROM' tbl=Tables
	('WHERE' whereExpression=FullExpression)?
	('GROUP BY' groupByEntry=GroupByColumns)?
	('HAVING' havingEntry=FullExpression)?;

Columns returns Columns:
	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;

ColumnOrAlias:
	(ColumnFull ('AS')? (colAlias=DbObjectName)?) | allCols=STAR;

ColumnFull returns ColumnFull:
	DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?;

Tables returns Tables:
	FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?;

FromTable:
	table=TableOrAlias (join=JoinType onTable=TableOrAlias 'ON' joinExpr=FullExpression)?;

TableOrAlias:
	TableFull ('AS')? (tblAlias=DbObjectName)?;

TableFull:
	DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?;

DbObjectName:
	dbname=ID;

OrderByColumns returns OrderByColumns:
	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;

OrderByColumnFull:
	colOrder=ColumnFull ('ASC' | 'DESC')?;

GroupByColumns returns GroupByColumns:
	ColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=ColumnFull)+)?;

FullExpression returns FullExpression:
	ExpressionFragment ({fexpr.entries+=current} (('AND' | 'OR') entries+=ExpressionFragment)+)?;

ExpressionFragment returns FullExpression:
	ExpressionGroup | Expression | XExpression;

ExpressionGroup returns FullExpression:
	{exprGroup} '(' expr=FullExpression ')';

XExpression returns FullExpression:
	{xexpr} '$X{' ID (',' ID)* '}';

Expression returns FullExpression:
	op1=Operand (('IS NULL' | 'IS NOT NULL') | in=InOperator | between=Between | like=Like | comp=Comparison);

Comparison:
	('>' | '>=' | '<' | '<=' | '=' | '<>') op2=Operand;

Like:
	('LIKE' | 'NOT LIKE') StringOperand;

Between:
	'BETWEEN' op1=Operand 'AND' op2=Operand;

InOperator:
	{inop} ('NOT IN (' | 'IN (') (subquery=SubQueryOperand | ({xop.entries+=current} (',' entries+=XOperandFragment)+)?)
	')';

Operand returns Operand:
	OperandFragment ({operands.entries+=current} (('+' | '-' | STAR | '/' | '||') entries+=OperandFragment)+)?;

OperandFragment returns Operand:
	OperandGroup | ColumnOperand | XOperandFragment | SubQueryOperand;

OperandGroup returns Operand:
	{opGroup} '(' op=Operand ')';

XOperandFragment returns Operand:
	ParameterOperand | ExclamationParameterOperand | scalar=ScalarOperand;

ParameterOperand returns Operand:
	{poperand} '$P{' ID '}';

ExclamationParameterOperand returns Operand:
	{expoperand} '$P!{' ID '}';

ColumnOperand returns Operand:
	ColumnFull;

SubQueryOperand returns Operand:
	{subquery} '(' sel=Select ')';

ScalarOperand:
	INT | StringOperand | SIGNED_DOUBLE | DATE | TIME | TIMESTAMP;

StringOperand:
	STRING;

enum JoinType:
	innerJoin='INNER JOIN' | leftOuterJoin='LEFT OUTER JOIN' | rightOuterJoin='RIGHT OUTER JOIN' |
	fullOuterJoin='FULL OUTER JOIN' | crossJoin='CROSS JOIN';

terminal STAR:
	"*";

terminal INT returns ecore::EInt:
	'-'? ('0'..'9')+;

terminal TIMESTAMP returns ecore::EDate:
	DATE ' ' TIME;

terminal DATE returns ecore::EDate:
	"'" '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' ('0'..'1') '0'..'9' '-' '0'..'3' '0'..'9' "'";

terminal TIME returns ecore::EDate:
	"'" '0'..'9' '0'..'9' ':' '0'..'9' '0'..'9' ':' '0'..'1' '0'..'9' '.' '0'..'9' '0'..'9' '0'..'9' "'";

terminal SIGNED_DOUBLE returns ecore::EDouble:
	'-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

terminal SL_COMMENT:
	('--' | '#' | '//') !('\n' | '\r')* ('\r'? '\n')?;

 