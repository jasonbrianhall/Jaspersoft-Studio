grammar com.jaspersoft.studio.data.Sql with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sql "http://www.com.jaspersoft.studio.data.Sql"

Model:
	query=SelectQuery
	('ORDER BY' orderByEntry=OrderByColumns)?;

SelectQuery returns SelectQuery:
	Select (op+=SelectSubSet)*;

SelectSubSet:
	op=('UNION' | 'INTERSECT' | 'MINUS' | 'EXCEPT') all=('ALL')? query=Select;

Select:
	select='SELECT' ('DISTINCT')? cols=Columns 'FROM' tbl=Tables ('WHERE' whereExpression=FullExpression)? ('GROUP BY'
	groupByEntry=GroupByColumns)? ('HAVING' havingEntry=FullExpression)?;

Columns returns OrColumn:
	ColumnOrAlias ({OrColumn.entries+=current} ("," entries+=ColumnOrAlias)+)?;

ColumnOrAlias:
	(ce=Operand alias=('AS')? (colAlias=DbObjectName)?) | allCols=STAR;

ColumnFull returns ColumnFull:
	DbObjectName ({Col.entries+=current} ("." entries+=DbObjectName)+)?;

Tables returns OrTable:
	FromTable ({OrTable.entries+=current} ("," entries+=FromTable)+)?;

FromTable:
	table=TableOrAlias (fjoin+=FromTableJoin)*;

FromTableJoin:
	join=JoinType onTable=TableOrAlias 'ON' joinExpr=FullExpression;

TableOrAlias:
	(tfull=TableFull | sq=SubQueryOperand) alias=('AS')? (tblAlias=DbObjectName)?;

TableFull:
	DbObjectName ({tbls.entries+=current} ("." entries+=DbObjectName)+)?;

DbObjectName:
	dbname=DBID;

OrderByColumns returns OrOrderByColumn:
	OrderByColumnFull ({OrOrderByColumn.entries+=current} ("," entries+=OrderByColumnFull)+)?;

OrderByColumnFull:
	colOrder=ColumnFull direction=('ASC' | 'DESC')?;

GroupByColumns returns OrGroupByColumn:
	GroupByColumnFull ({OrGroupByColumn.entries+=current} ("," entries+=GroupByColumnFull)+)?;

GroupByColumnFull:
	colGrBy=ColumnFull;

FullExpression returns OrExpr:
	ExpressionFragment ({OrExpr.entries+=current} (entries+=ExpressionFragmentSecond)+)?;

ExpressionFragmentSecond returns FullExpression:
	c=('AND' | 'OR') efrag=ExpressionFragment;

ExpressionFragment returns FullExpression:
	expgroup=ExpressionGroup | exp=Expression | xexp=XExpression;

ExpressionGroup returns ExprGroup:
	{ExprGroup} '(' expr=FullExpression ')';

XExpression returns XExpr:
	'$X' {XExpr} '{' xf=XFunction "," col=ColumnOperand ("," prm=XExpressionParams)? '}';

XExpressionParams returns Prms:
	JRParameter ({Prms.entries+=current} ("," entries+=JRParameter)+)?;

JRParameter:
	jrprm=ID;

enum XFunction:
	xin='IN' | xnotin='NOTIN' | xeq='EQUAL' | xnoteq='NOTEQUAL' | xls='LESS' | xgt='GREATER'
	| xlsr='LESS]' | xgtl='[GREATER' | xbwn='BETWEEN' | xbwnc='[BETWEEN]' | xbwnl='[BETWEEN'
	| xbwnr='BETWEEN]';

Expression returns FullExpression:
	op1=Operand (isnull=('IS NULL' | 'IS NOT NULL') | in=InOperator | between=Between | like=Like | comp=Comparison);

Comparison:
	operator=('>' | '>=' | '<' | '<=' | '=' | '<>') subOperator=('ANY' | 'ALL' | 'SOME')? op2=Operand;

Like:
	opLike=('LIKE' | 'NOT LIKE') op2=StringOperand;

Between:
	opBetween=('BETWEEN' | 'NOT BETWEEN') op2=Operand 'AND' op3=Operand;

InOperator returns InOper:
	{InOper} op=('NOT IN' | 'IN') '(' (subquery=SubQueryOperand | opList=OperandList) ')';

OperandList:
	XOperandFragment ({OpList.entries+=current} ("," entries+=XOperandFragment)+)?;

Operand returns Operands:
	OperandFragment ({Operands.entries+=current} (('+' | '-' | STAR | '/' | '||') entries+=OperandFragment)+)?;

OperandFragment returns Operand:
/*opGroup=OperandGroup |*/ column=ColumnOperand | xop=XOperandFragment | subq=SubQueryOperand | func=OperandFunction;

OperandGroup returns OpGroup:
	{OpGroup} '(' op=Operand ')';

OperandFunction returns OperandFunction:
	fname=ID args=OperandFunctionArguments;

OperandFunctionArguments returns OperandFunctionArguments:
	{OperandFunctionArguments} '(' arg=OperandFunctionArgs ')';

OperandFunctionArgs:
	OperandFragment ({ArgList.entries+=current} ("," entries+=OperandFragment)+)?;

XOperandFragment returns Operand:
	param=ParameterOperand | eparam=ExclamationParameterOperand | scalar=ScalarOperand;

ParameterOperand returns POperand:
	'$P' {POperand} '{' prm=ID '}';

ExclamationParameterOperand returns ExpOperand:
	'$P!' {ExpOperand} '{' prm=ID '}';

ColumnOperand returns ColumnOperand:
	cfull=ColumnFull;

SubQueryOperand returns SubQueryOperand:
	{SubQueryOperand} '(' sel=SelectQuery ')';

ScalarOperand returns ScalarOperand:
	soint=SIGNED_INT | sostr=StringOperand | sodbl=SIGNED_DOUBLE | sodate=DATE | sotime=TIME | sodt=TIMESTAMP;

StringOperand:
	STRING;

enum JoinType:
	innerJoin='INNER JOIN' | leftOuterJoin='LEFT OUTER JOIN' | rightOuterJoin='RIGHT OUTER JOIN' |
	fullOuterJoin='FULL OUTER JOIN' | crossJoin='CROSS JOIN';

terminal DBID:
	(('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*)
	| ('\'' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '\'')
	| ('"' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '"')
	| ('`' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '`')
	| ('[' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* ']');

terminal STAR:
	"*";

terminal SIGNED_INT returns ecore::EIntegerObject:
	'-'? ('0'..'9')+;

terminal TIMESTAMP returns ecore::EDate:
	DATE ' ' TIME;

terminal DATE returns ecore::EDate:
	"'" '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' ('0'..'1') '0'..'9' '-' '0'..'3' '0'..'9' "'";

terminal TIME returns ecore::EDate:
	"'" '0'..'9' '0'..'9' ':' '0'..'9' '0'..'9' ':' '0'..'1' '0'..'9' '.' '0'..'9' '0'..'9' '0'..'9' "'";

terminal SIGNED_DOUBLE returns ecore::EBigDecimal:
	'-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

terminal SL_COMMENT:
	('--' | '#' | '//') !('\n' | '\r')* ('\r'? '\n')?;

 