/*
 * generated by Xtext
 */
parser grammar InternalSqlParser;

options {
	tokenVocab=InternalSqlLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package com.jaspersoft.studio.data.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.jaspersoft.studio.data.services.SqlGrammarAccess;

}

@members {
 
 	private SqlGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("X", "'\u0024X'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("AS", "'AS'");
		tokenNameToValue.put("IN", "'IN'");
		tokenNameToValue.put("ON", "'ON'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("CircumflexAccentEqualsSign", "'^='");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("LeftParenthesisPlusSignRightParenthesis", "'(+)'");
		tokenNameToValue.put("ALL", "'ALL'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("ANY", "'ANY'");
		tokenNameToValue.put("ASC", "'ASC'");
		tokenNameToValue.put("DAY", "'DAY'");
		tokenNameToValue.put("END", "'END'");
		tokenNameToValue.put("FOR", "'FOR'");
		tokenNameToValue.put("ROW", "'ROW'");
		tokenNameToValue.put("TOP", "'TOP'");
		tokenNameToValue.put("XML", "'XML'");
		tokenNameToValue.put("CASE", "'CASE'");
		tokenNameToValue.put("DESC", "'DESC'");
		tokenNameToValue.put("ELSE", "'ELSE'");
		tokenNameToValue.put("FROM", "'FROM'");
		tokenNameToValue.put("FULL", "'FULL'");
		tokenNameToValue.put("HOUR", "'HOUR'");
		tokenNameToValue.put("JOIN", "'JOIN'");
		tokenNameToValue.put("LAST", "'LAST'");
		tokenNameToValue.put("LEFT", "'LEFT'");
		tokenNameToValue.put("LESS", "'LESS'");
		tokenNameToValue.put("LIKE", "'LIKE'");
		tokenNameToValue.put("NOT", "'NOT\n'");
		tokenNameToValue.put("NOT_1", "'NOT '");
		tokenNameToValue.put("ONLY", "'ONLY'");
		tokenNameToValue.put("OVER", "'OVER'");
		tokenNameToValue.put("ROWS", "'ROWS'");
		tokenNameToValue.put("SOME", "'SOME'");
		tokenNameToValue.put("THEN", "'THEN'");
		tokenNameToValue.put("WEEK", "'WEEK'");
		tokenNameToValue.put("WHEN", "'WHEN'");
		tokenNameToValue.put("YEAR", "'YEAR'");
		tokenNameToValue.put("CAST", "'CAST('");
		tokenNameToValue.put("CROSS", "'CROSS'");
		tokenNameToValue.put("EQUAL", "'EQUAL'");
		tokenNameToValue.put("FIRST", "'FIRST'");
		tokenNameToValue.put("INNER", "'INNER'");
		tokenNameToValue.put("LESS_1", "'LESS]'");
		tokenNameToValue.put("LIMIT", "'LIMIT'");
		tokenNameToValue.put("MINUS", "'MINUS'");
		tokenNameToValue.put("MONTH", "'MONTH'");
		tokenNameToValue.put("NOTIN", "'NOTIN'");
		tokenNameToValue.put("NULLS", "'NULLS'");
		tokenNameToValue.put("OUTER", "'OUTER'");
		tokenNameToValue.put("PIVOT", "'PIVOT'");
		tokenNameToValue.put("RANGE", "'RANGE'");
		tokenNameToValue.put("RIGHT", "'RIGHT'");
		tokenNameToValue.put("UNION", "'UNION'");
		tokenNameToValue.put("USING", "'USING'");
		tokenNameToValue.put("WHERE", "'WHERE'");
		tokenNameToValue.put("EXCEPT", "'EXCEPT'");
		tokenNameToValue.put("EXISTS", "'EXISTS'");
		tokenNameToValue.put("HAVING", "'HAVING'");
		tokenNameToValue.put("MINUTE", "'MINUTE'");
		tokenNameToValue.put("NOTIN_1", "'NOT IN'");
		tokenNameToValue.put("OFFSET", "'OFFSET'");
		tokenNameToValue.put("SECOND", "'SECOND'");
		tokenNameToValue.put("SELECT", "'SELECT'");
		tokenNameToValue.put("BETWEEN", "'BETWEEN'");
		tokenNameToValue.put("EXCLUDE", "'EXCLUDE'");
		tokenNameToValue.put("EXTRACT", "'EXTRACT'");
		tokenNameToValue.put("GREATER", "'GREATER'");
		tokenNameToValue.put("INCLUDE", "'INCLUDE'");
		tokenNameToValue.put("ISNULL", "'IS NULL'");
		tokenNameToValue.put("NATURAL", "'NATURAL'");
		tokenNameToValue.put("PERCENT", "'PERCENT'");
		tokenNameToValue.put("QUARTER", "'QUARTER'");
		tokenNameToValue.put("UNPIVOT", "'UNPIVOT'");
		tokenNameToValue.put("BETWEEN_1", "'BETWEEN]'");
		tokenNameToValue.put("DAY_HOUR", "'DAY_HOUR'");
		tokenNameToValue.put("DISTINCT", "'DISTINCT'");
		tokenNameToValue.put("GROUPBY", "'GROUP BY'");
		tokenNameToValue.put("NOTLIKE", "'NOT LIKE'");
		tokenNameToValue.put("NOTEQUAL", "'NOTEQUAL'");
		tokenNameToValue.put("ORDERBY", "'ORDER BY'");
		tokenNameToValue.put("BETWEEN_2", "'[BETWEEN'");
		tokenNameToValue.put("GREATER_1", "'[GREATER'");
		tokenNameToValue.put("KW_FOLLOWING", "'FOLLOWING'");
		tokenNameToValue.put("INTERSECT", "'INTERSECT'");
		tokenNameToValue.put("PRECEDING", "'PRECEDING'");
		tokenNameToValue.put("WITHTIES", "'WITH TIES'");
		tokenNameToValue.put("BETWEEN_3", "'[BETWEEN]'");
		tokenNameToValue.put("DAY_MINUTE", "'DAY_MINUTE'");
		tokenNameToValue.put("DAY_SECOND", "'DAY_SECOND'");
		tokenNameToValue.put("NOTEXISTS", "'NOT EXISTS'");
		tokenNameToValue.put("YEAR_MONTH", "'YEAR_MONTH'");
		tokenNameToValue.put("CURRENTROW", "'CURRENT ROW'");
		tokenNameToValue.put("FETCHFIRST", "'FETCH FIRST'");
		tokenNameToValue.put("HOUR_MINUTE", "'HOUR_MINUTE'");
		tokenNameToValue.put("HOUR_SECOND", "'HOUR_SECOND'");
		tokenNameToValue.put("ISNOTNULL", "'IS NOT NULL'");
		tokenNameToValue.put("MICROSECOND", "'MICROSECOND'");
		tokenNameToValue.put("NOTBETWEEN", "'NOT BETWEEN'");
		tokenNameToValue.put("PARTITIONBY", "'PARTITION BY'");
		tokenNameToValue.put("MINUTE_SECOND", "'MINUTE_SECOND'");
		tokenNameToValue.put("STRAIGHT_JOIN", "'STRAIGHT_JOIN'");
		tokenNameToValue.put("DAY_MICROSECOND", "'DAY_MICROSECOND'");
		tokenNameToValue.put("HOUR_MICROSECOND", "'HOUR_MICROSECOND'");
		tokenNameToValue.put("ORDERSIBLINGSBY", "'ORDER SIBLINGS BY'");
		tokenNameToValue.put("MINUTE_MICROSECOND", "'MINUTE_MICROSECOND'");
		tokenNameToValue.put("SECOND_MICROSECOND", "'SECOND_MICROSECOND'");
		tokenNameToValue.put("UNBOUNDEDFOLLOWING", "'UNBOUNDED FOLLOWING'");
		tokenNameToValue.put("UNBOUNDEDPRECEDING", "'UNBOUNDED PRECEDING'");
 	}
 	
    public void setGrammarAccess(SqlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModelAccess().getQueryAssignment()); }
(rule__Model__QueryAssignment)
{ after(grammarAccess.getModelAccess().getQueryAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFetchFirst
entryRuleFetchFirst 
:
{ before(grammarAccess.getFetchFirstRule()); }
	 ruleFetchFirst
{ after(grammarAccess.getFetchFirstRule()); } 
	 EOF 
;

// Rule FetchFirst
ruleFetchFirst 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFetchFirstAccess().getGroup()); }
(rule__FetchFirst__Group__0)
{ after(grammarAccess.getFetchFirstAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOffset
entryRuleOffset 
:
{ before(grammarAccess.getOffsetRule()); }
	 ruleOffset
{ after(grammarAccess.getOffsetRule()); } 
	 EOF 
;

// Rule Offset
ruleOffset 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOffsetAccess().getOffsetAssignment()); }
(rule__Offset__OffsetAssignment)
{ after(grammarAccess.getOffsetAccess().getOffsetAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLimit
entryRuleLimit 
:
{ before(grammarAccess.getLimitRule()); }
	 ruleLimit
{ after(grammarAccess.getLimitRule()); } 
	 EOF 
;

// Rule Limit
ruleLimit 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLimitAccess().getAlternatives()); }
(rule__Limit__Alternatives)
{ after(grammarAccess.getLimitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectQuery
entryRuleSelectQuery 
:
{ before(grammarAccess.getSelectQueryRule()); }
	 ruleSelectQuery
{ after(grammarAccess.getSelectQueryRule()); } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectQueryAccess().getGroup()); }
(rule__SelectQuery__Group__0)
{ after(grammarAccess.getSelectQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectSubSet
entryRuleSelectSubSet 
:
{ before(grammarAccess.getSelectSubSetRule()); }
	 ruleSelectSubSet
{ after(grammarAccess.getSelectSubSetRule()); } 
	 EOF 
;

// Rule SelectSubSet
ruleSelectSubSet 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectSubSetAccess().getGroup()); }
(rule__SelectSubSet__Group__0)
{ after(grammarAccess.getSelectSubSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelect
entryRuleSelect 
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectAccess().getGroup()); }
(rule__Select__Group__0)
{ after(grammarAccess.getSelectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumns
entryRuleColumns 
:
{ before(grammarAccess.getColumnsRule()); }
	 ruleColumns
{ after(grammarAccess.getColumnsRule()); } 
	 EOF 
;

// Rule Columns
ruleColumns 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnsAccess().getGroup()); }
(rule__Columns__Group__0)
{ after(grammarAccess.getColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnOrAlias
entryRuleColumnOrAlias 
:
{ before(grammarAccess.getColumnOrAliasRule()); }
	 ruleColumnOrAlias
{ after(grammarAccess.getColumnOrAliasRule()); } 
	 EOF 
;

// Rule ColumnOrAlias
ruleColumnOrAlias 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
(rule__ColumnOrAlias__Alternatives)
{ after(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnFull
entryRuleColumnFull 
:
{ before(grammarAccess.getColumnFullRule()); }
	 ruleColumnFull
{ after(grammarAccess.getColumnFullRule()); } 
	 EOF 
;

// Rule ColumnFull
ruleColumnFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnFullAccess().getGroup()); }
(rule__ColumnFull__Group__0)
{ after(grammarAccess.getColumnFullAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTables
entryRuleTables 
:
{ before(grammarAccess.getTablesRule()); }
	 ruleTables
{ after(grammarAccess.getTablesRule()); } 
	 EOF 
;

// Rule Tables
ruleTables 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTablesAccess().getGroup()); }
(rule__Tables__Group__0)
{ after(grammarAccess.getTablesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromTable
entryRuleFromTable 
:
{ before(grammarAccess.getFromTableRule()); }
	 ruleFromTable
{ after(grammarAccess.getFromTableRule()); } 
	 EOF 
;

// Rule FromTable
ruleFromTable 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromTableAccess().getGroup()); }
(rule__FromTable__Group__0)
{ after(grammarAccess.getFromTableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromTableJoin
entryRuleFromTableJoin 
:
{ before(grammarAccess.getFromTableJoinRule()); }
	 ruleFromTableJoin
{ after(grammarAccess.getFromTableJoinRule()); } 
	 EOF 
;

// Rule FromTableJoin
ruleFromTableJoin 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromTableJoinAccess().getGroup()); }
(rule__FromTableJoin__Group__0)
{ after(grammarAccess.getFromTableJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoinCondition
entryRuleJoinCondition 
:
{ before(grammarAccess.getJoinConditionRule()); }
	 ruleJoinCondition
{ after(grammarAccess.getJoinConditionRule()); } 
	 EOF 
;

// Rule JoinCondition
ruleJoinCondition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJoinConditionAccess().getGroup()); }
(rule__JoinCondition__Group__0)
{ after(grammarAccess.getJoinConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUsingCols
entryRuleUsingCols 
:
{ before(grammarAccess.getUsingColsRule()); }
	 ruleUsingCols
{ after(grammarAccess.getUsingColsRule()); } 
	 EOF 
;

// Rule UsingCols
ruleUsingCols 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUsingColsAccess().getGroup()); }
(rule__UsingCols__Group__0)
{ after(grammarAccess.getUsingColsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableOrAlias
entryRuleTableOrAlias 
:
{ before(grammarAccess.getTableOrAliasRule()); }
	 ruleTableOrAlias
{ after(grammarAccess.getTableOrAliasRule()); } 
	 EOF 
;

// Rule TableOrAlias
ruleTableOrAlias 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTableOrAliasAccess().getGroup()); }
(rule__TableOrAlias__Group__0)
{ after(grammarAccess.getTableOrAliasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePivotTable
entryRulePivotTable 
:
{ before(grammarAccess.getPivotTableRule()); }
	 rulePivotTable
{ after(grammarAccess.getPivotTableRule()); } 
	 EOF 
;

// Rule PivotTable
rulePivotTable 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotTableAccess().getGroup()); }
(rule__PivotTable__Group__0)
{ after(grammarAccess.getPivotTableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePivotFunctions
entryRulePivotFunctions 
:
{ before(grammarAccess.getPivotFunctionsRule()); }
	 rulePivotFunctions
{ after(grammarAccess.getPivotFunctionsRule()); } 
	 EOF 
;

// Rule PivotFunctions
rulePivotFunctions 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotFunctionsAccess().getAbcAssignment()); }
(rule__PivotFunctions__AbcAssignment)
{ after(grammarAccess.getPivotFunctionsAccess().getAbcAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulePivotInClause
entryRulePivotInClause 
:
{ before(grammarAccess.getPivotInClauseRule()); }
	 rulePivotInClause
{ after(grammarAccess.getPivotInClauseRule()); } 
	 EOF 
;

// Rule PivotInClause
rulePivotInClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotInClauseAccess().getGroup()); }
(rule__PivotInClause__Group__0)
{ after(grammarAccess.getPivotInClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePivotInClauseAny
entryRulePivotInClauseAny 
:
{ before(grammarAccess.getPivotInClauseAnyRule()); }
	 rulePivotInClauseAny
{ after(grammarAccess.getPivotInClauseAnyRule()); } 
	 EOF 
;

// Rule PivotInClauseAny
rulePivotInClauseAny 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotInClauseAnyAccess().getGroup()); }
(rule__PivotInClauseAny__Group__0)
{ after(grammarAccess.getPivotInClauseAnyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnpivotTable
entryRuleUnpivotTable 
:
{ before(grammarAccess.getUnpivotTableRule()); }
	 ruleUnpivotTable
{ after(grammarAccess.getUnpivotTableRule()); } 
	 EOF 
;

// Rule UnpivotTable
ruleUnpivotTable 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnpivotTableAccess().getGroup()); }
(rule__UnpivotTable__Group__0)
{ after(grammarAccess.getUnpivotTableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnpivotInClause
entryRuleUnpivotInClause 
:
{ before(grammarAccess.getUnpivotInClauseRule()); }
	 ruleUnpivotInClause
{ after(grammarAccess.getUnpivotInClauseRule()); } 
	 EOF 
;

// Rule UnpivotInClause
ruleUnpivotInClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnpivotInClauseAccess().getGroup()); }
(rule__UnpivotInClause__Group__0)
{ after(grammarAccess.getUnpivotInClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnpivotInClauseArgs
entryRuleUnpivotInClauseArgs 
:
{ before(grammarAccess.getUnpivotInClauseArgsRule()); }
	 ruleUnpivotInClauseArgs
{ after(grammarAccess.getUnpivotInClauseArgsRule()); } 
	 EOF 
;

// Rule UnpivotInClauseArgs
ruleUnpivotInClauseArgs 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getGroup()); }
(rule__UnpivotInClauseArgs__Group__0)
{ after(grammarAccess.getUnpivotInClauseArgsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnpivotInClauseArg
entryRuleUnpivotInClauseArg 
:
{ before(grammarAccess.getUnpivotInClauseArgRule()); }
	 ruleUnpivotInClauseArg
{ after(grammarAccess.getUnpivotInClauseArgRule()); } 
	 EOF 
;

// Rule UnpivotInClauseArg
ruleUnpivotInClauseArg 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnpivotInClauseArgAccess().getGroup()); }
(rule__UnpivotInClauseArg__Group__0)
{ after(grammarAccess.getUnpivotInClauseArgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePivotForClause
entryRulePivotForClause 
:
{ before(grammarAccess.getPivotForClauseRule()); }
	 rulePivotForClause
{ after(grammarAccess.getPivotForClauseRule()); } 
	 EOF 
;

// Rule PivotForClause
rulePivotForClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotForClauseAccess().getGroup()); }
(rule__PivotForClause__Group__0)
{ after(grammarAccess.getPivotForClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePivotColumns
entryRulePivotColumns 
:
{ before(grammarAccess.getPivotColumnsRule()); }
	 rulePivotColumns
{ after(grammarAccess.getPivotColumnsRule()); } 
	 EOF 
;

// Rule PivotColumns
rulePivotColumns 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotColumnsAccess().getAlternatives()); }
(rule__PivotColumns__Alternatives)
{ after(grammarAccess.getPivotColumnsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePivotCols
entryRulePivotCols 
:
{ before(grammarAccess.getPivotColsRule()); }
	 rulePivotCols
{ after(grammarAccess.getPivotColsRule()); } 
	 EOF 
;

// Rule PivotCols
rulePivotCols 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotColsAccess().getGroup()); }
(rule__PivotCols__Group__0)
{ after(grammarAccess.getPivotColsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePivotCol
entryRulePivotCol 
:
{ before(grammarAccess.getPivotColRule()); }
	 rulePivotCol
{ after(grammarAccess.getPivotColRule()); } 
	 EOF 
;

// Rule PivotCol
rulePivotCol 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPivotColAccess().getGroup()); }
(rule__PivotCol__Group__0)
{ after(grammarAccess.getPivotColAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableFull
entryRuleTableFull 
:
{ before(grammarAccess.getTableFullRule()); }
	 ruleTableFull
{ after(grammarAccess.getTableFullRule()); } 
	 EOF 
;

// Rule TableFull
ruleTableFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTableFullAccess().getGroup()); }
(rule__TableFull__Group__0)
{ after(grammarAccess.getTableFullAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDbObjectNameAll
entryRuleDbObjectNameAll 
:
{ before(grammarAccess.getDbObjectNameAllRule()); }
	 ruleDbObjectNameAll
{ after(grammarAccess.getDbObjectNameAllRule()); } 
	 EOF 
;

// Rule DbObjectNameAll
ruleDbObjectNameAll 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDbObjectNameAllAccess().getGroup()); }
(rule__DbObjectNameAll__Group__0)
{ after(grammarAccess.getDbObjectNameAllAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDbObjectName
entryRuleDbObjectName 
:
{ before(grammarAccess.getDbObjectNameRule()); }
	 ruleDbObjectName
{ after(grammarAccess.getDbObjectNameRule()); } 
	 EOF 
;

// Rule DbObjectName
ruleDbObjectName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDbObjectNameAccess().getDbnameAssignment()); }
(rule__DbObjectName__DbnameAssignment)
{ after(grammarAccess.getDbObjectNameAccess().getDbnameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByColumns
entryRuleOrderByColumns 
:
{ before(grammarAccess.getOrderByColumnsRule()); }
	 ruleOrderByColumns
{ after(grammarAccess.getOrderByColumnsRule()); } 
	 EOF 
;

// Rule OrderByColumns
ruleOrderByColumns 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup()); }
(rule__OrderByColumns__Group__0)
{ after(grammarAccess.getOrderByColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByColumnFull
entryRuleOrderByColumnFull 
:
{ before(grammarAccess.getOrderByColumnFullRule()); }
	 ruleOrderByColumnFull
{ after(grammarAccess.getOrderByColumnFullRule()); } 
	 EOF 
;

// Rule OrderByColumnFull
ruleOrderByColumnFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByColumnFullAccess().getGroup()); }
(rule__OrderByColumnFull__Group__0)
{ after(grammarAccess.getOrderByColumnFullAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupByColumns
entryRuleGroupByColumns 
:
{ before(grammarAccess.getGroupByColumnsRule()); }
	 ruleGroupByColumns
{ after(grammarAccess.getGroupByColumnsRule()); } 
	 EOF 
;

// Rule GroupByColumns
ruleGroupByColumns 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup()); }
(rule__GroupByColumns__Group__0)
{ after(grammarAccess.getGroupByColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupByColumnFull
entryRuleGroupByColumnFull 
:
{ before(grammarAccess.getGroupByColumnFullRule()); }
	 ruleGroupByColumnFull
{ after(grammarAccess.getGroupByColumnFullRule()); } 
	 EOF 
;

// Rule GroupByColumnFull
ruleGroupByColumnFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupByColumnFullAccess().getAlternatives()); }
(rule__GroupByColumnFull__Alternatives)
{ after(grammarAccess.getGroupByColumnFullAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFullExpression
entryRuleFullExpression 
:
{ before(grammarAccess.getFullExpressionRule()); }
	 ruleFullExpression
{ after(grammarAccess.getFullExpressionRule()); } 
	 EOF 
;

// Rule FullExpression
ruleFullExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFullExpressionAccess().getGroup()); }
(rule__FullExpression__Group__0)
{ after(grammarAccess.getFullExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionFragmentSecond
entryRuleExpressionFragmentSecond 
:
{ before(grammarAccess.getExpressionFragmentSecondRule()); }
	 ruleExpressionFragmentSecond
{ after(grammarAccess.getExpressionFragmentSecondRule()); } 
	 EOF 
;

// Rule ExpressionFragmentSecond
ruleExpressionFragmentSecond 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getAlternatives()); }
(rule__ExpressionFragmentSecond__Alternatives)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionFragment
entryRuleExpressionFragment 
:
{ before(grammarAccess.getExpressionFragmentRule()); }
	 ruleExpressionFragment
{ after(grammarAccess.getExpressionFragmentRule()); } 
	 EOF 
;

// Rule ExpressionFragment
ruleExpressionFragment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionFragmentAccess().getAlternatives()); }
(rule__ExpressionFragment__Alternatives)
{ after(grammarAccess.getExpressionFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionGroup
entryRuleExpressionGroup 
:
{ before(grammarAccess.getExpressionGroupRule()); }
	 ruleExpressionGroup
{ after(grammarAccess.getExpressionGroupRule()); } 
	 EOF 
;

// Rule ExpressionGroup
ruleExpressionGroup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionGroupAccess().getGroup()); }
(rule__ExpressionGroup__Group__0)
{ after(grammarAccess.getExpressionGroupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXExpression
entryRuleXExpression 
:
{ before(grammarAccess.getXExpressionRule()); }
	 ruleXExpression
{ after(grammarAccess.getXExpressionRule()); } 
	 EOF 
;

// Rule XExpression
ruleXExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXExpressionAccess().getGroup()); }
(rule__XExpression__Group__0)
{ after(grammarAccess.getXExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXExpression_
entryRuleXExpression_ 
:
{ before(grammarAccess.getXExpression_Rule()); }
	 ruleXExpression_
{ after(grammarAccess.getXExpression_Rule()); } 
	 EOF 
;

// Rule XExpression_
ruleXExpression_ 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXExpression_Access().getGroup()); }
(rule__XExpression___Group__0)
{ after(grammarAccess.getXExpression_Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXExpressionParams
entryRuleXExpressionParams 
:
{ before(grammarAccess.getXExpressionParamsRule()); }
	 ruleXExpressionParams
{ after(grammarAccess.getXExpressionParamsRule()); } 
	 EOF 
;

// Rule XExpressionParams
ruleXExpressionParams 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup()); }
(rule__XExpressionParams__Group__0)
{ after(grammarAccess.getXExpressionParamsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJRParameter
entryRuleJRParameter 
:
{ before(grammarAccess.getJRParameterRule()); }
	 ruleJRParameter
{ after(grammarAccess.getJRParameterRule()); } 
	 EOF 
;

// Rule JRParameter
ruleJRParameter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJRParameterAccess().getJrprmAssignment()); }
(rule__JRParameter__JrprmAssignment)
{ after(grammarAccess.getJRParameterAccess().getJrprmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLike
entryRuleLike 
:
{ before(grammarAccess.getLikeRule()); }
	 ruleLike
{ after(grammarAccess.getLikeRule()); } 
	 EOF 
;

// Rule Like
ruleLike 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLikeAccess().getGroup()); }
(rule__Like__Group__0)
{ after(grammarAccess.getLikeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLikeOperand
entryRuleLikeOperand 
:
{ before(grammarAccess.getLikeOperandRule()); }
	 ruleLikeOperand
{ after(grammarAccess.getLikeOperandRule()); } 
	 EOF 
;

// Rule LikeOperand
ruleLikeOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLikeOperandAccess().getAlternatives()); }
(rule__LikeOperand__Alternatives)
{ after(grammarAccess.getLikeOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBetween
entryRuleBetween 
:
{ before(grammarAccess.getBetweenRule()); }
	 ruleBetween
{ after(grammarAccess.getBetweenRule()); } 
	 EOF 
;

// Rule Between
ruleBetween 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBetweenAccess().getGroup()); }
(rule__Between__Group__0)
{ after(grammarAccess.getBetweenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInOperator
entryRuleInOperator 
:
{ before(grammarAccess.getInOperatorRule()); }
	 ruleInOperator
{ after(grammarAccess.getInOperatorRule()); } 
	 EOF 
;

// Rule InOperator
ruleInOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInOperatorAccess().getGroup()); }
(rule__InOperator__Group__0)
{ after(grammarAccess.getInOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistsOperator
entryRuleExistsOperator 
:
{ before(grammarAccess.getExistsOperatorRule()); }
	 ruleExistsOperator
{ after(grammarAccess.getExistsOperatorRule()); } 
	 EOF 
;

// Rule ExistsOperator
ruleExistsOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExistsOperatorAccess().getGroup()); }
(rule__ExistsOperator__Group__0)
{ after(grammarAccess.getExistsOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandListGroup
entryRuleOperandListGroup 
:
{ before(grammarAccess.getOperandListGroupRule()); }
	 ruleOperandListGroup
{ after(grammarAccess.getOperandListGroupRule()); } 
	 EOF 
;

// Rule OperandListGroup
ruleOperandListGroup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandListGroupAccess().getGroup()); }
(rule__OperandListGroup__Group__0)
{ after(grammarAccess.getOperandListGroupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandList
entryRuleOperandList 
:
{ before(grammarAccess.getOperandListRule()); }
	 ruleOperandList
{ after(grammarAccess.getOperandListRule()); } 
	 EOF 
;

// Rule OperandList
ruleOperandList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandListAccess().getGroup()); }
(rule__OperandList__Group__0)
{ after(grammarAccess.getOperandListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandGroup
entryRuleOperandGroup 
:
{ before(grammarAccess.getOperandGroupRule()); }
	 ruleOperandGroup
{ after(grammarAccess.getOperandGroupRule()); } 
	 EOF 
;

// Rule OperandGroup
ruleOperandGroup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandGroupAccess().getAlternatives()); }
(rule__OperandGroup__Alternatives)
{ after(grammarAccess.getOperandGroupAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperand
entryRuleOperand 
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandAccess().getGroup()); }
(rule__Operand__Group__0)
{ after(grammarAccess.getOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandFragment
entryRuleOperandFragment 
:
{ before(grammarAccess.getOperandFragmentRule()); }
	 ruleOperandFragment
{ after(grammarAccess.getOperandFragmentRule()); } 
	 EOF 
;

// Rule OperandFragment
ruleOperandFragment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandFragmentAccess().getAlternatives()); }
(rule__OperandFragment__Alternatives)
{ after(grammarAccess.getOperandFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandFunction
entryRuleOperandFunction 
:
{ before(grammarAccess.getOperandFunctionRule()); }
	 ruleOperandFunction
{ after(grammarAccess.getOperandFunctionRule()); } 
	 EOF 
;

// Rule OperandFunction
ruleOperandFunction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandFunctionAccess().getGroup()); }
(rule__OperandFunction__Group__0)
{ after(grammarAccess.getOperandFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionExtract
entryRuleFunctionExtract 
:
{ before(grammarAccess.getFunctionExtractRule()); }
	 ruleFunctionExtract
{ after(grammarAccess.getFunctionExtractRule()); } 
	 EOF 
;

// Rule FunctionExtract
ruleFunctionExtract 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunctionExtractAccess().getGroup()); }
(rule__FunctionExtract__Group__0)
{ after(grammarAccess.getFunctionExtractAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionAnalytical
entryRuleFunctionAnalytical 
:
{ before(grammarAccess.getFunctionAnalyticalRule()); }
	 ruleFunctionAnalytical
{ after(grammarAccess.getFunctionAnalyticalRule()); } 
	 EOF 
;

// Rule FunctionAnalytical
ruleFunctionAnalytical 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunctionAnalyticalAccess().getGroup()); }
(rule__FunctionAnalytical__Group__0)
{ after(grammarAccess.getFunctionAnalyticalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnalyticClause
entryRuleAnalyticClause 
:
{ before(grammarAccess.getAnalyticClauseRule()); }
	 ruleAnalyticClause
{ after(grammarAccess.getAnalyticClauseRule()); } 
	 EOF 
;

// Rule AnalyticClause
ruleAnalyticClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAnalyticClauseAccess().getGroup()); }
(rule__AnalyticClause__Group__0)
{ after(grammarAccess.getAnalyticClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWindowingClause
entryRuleWindowingClause 
:
{ before(grammarAccess.getWindowingClauseRule()); }
	 ruleWindowingClause
{ after(grammarAccess.getWindowingClauseRule()); } 
	 EOF 
;

// Rule WindowingClause
ruleWindowingClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWindowingClauseAccess().getGroup()); }
(rule__WindowingClause__Group__0)
{ after(grammarAccess.getWindowingClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWindowingClauseBetween
entryRuleWindowingClauseBetween 
:
{ before(grammarAccess.getWindowingClauseBetweenRule()); }
	 ruleWindowingClauseBetween
{ after(grammarAccess.getWindowingClauseBetweenRule()); } 
	 EOF 
;

// Rule WindowingClauseBetween
ruleWindowingClauseBetween 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWindowingClauseBetweenAccess().getGroup()); }
(rule__WindowingClauseBetween__Group__0)
{ after(grammarAccess.getWindowingClauseBetweenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWindowingClauseOperandFollowing
entryRuleWindowingClauseOperandFollowing 
:
{ before(grammarAccess.getWindowingClauseOperandFollowingRule()); }
	 ruleWindowingClauseOperandFollowing
{ after(grammarAccess.getWindowingClauseOperandFollowingRule()); } 
	 EOF 
;

// Rule WindowingClauseOperandFollowing
ruleWindowingClauseOperandFollowing 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getGroup()); }
(rule__WindowingClauseOperandFollowing__Group__0)
{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWindowingClauseOperandPreceding
entryRuleWindowingClauseOperandPreceding 
:
{ before(grammarAccess.getWindowingClauseOperandPrecedingRule()); }
	 ruleWindowingClauseOperandPreceding
{ after(grammarAccess.getWindowingClauseOperandPrecedingRule()); } 
	 EOF 
;

// Rule WindowingClauseOperandPreceding
ruleWindowingClauseOperandPreceding 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getGroup()); }
(rule__WindowingClauseOperandPreceding__Group__0)
{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByClause
entryRuleOrderByClause 
:
{ before(grammarAccess.getOrderByClauseRule()); }
	 ruleOrderByClause
{ after(grammarAccess.getOrderByClauseRule()); } 
	 EOF 
;

// Rule OrderByClause
ruleOrderByClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByClauseAccess().getGroup()); }
(rule__OrderByClause__Group__0)
{ after(grammarAccess.getOrderByClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByClauseArgs
entryRuleOrderByClauseArgs 
:
{ before(grammarAccess.getOrderByClauseArgsRule()); }
	 ruleOrderByClauseArgs
{ after(grammarAccess.getOrderByClauseArgsRule()); } 
	 EOF 
;

// Rule OrderByClauseArgs
ruleOrderByClauseArgs 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getGroup()); }
(rule__OrderByClauseArgs__Group__0)
{ after(grammarAccess.getOrderByClauseArgsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByClauseArg
entryRuleOrderByClauseArg 
:
{ before(grammarAccess.getOrderByClauseArgRule()); }
	 ruleOrderByClauseArg
{ after(grammarAccess.getOrderByClauseArgRule()); } 
	 EOF 
;

// Rule OrderByClauseArg
ruleOrderByClauseArg 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByClauseArgAccess().getGroup()); }
(rule__OrderByClauseArg__Group__0)
{ after(grammarAccess.getOrderByClauseArgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQueryPartitionClause
entryRuleQueryPartitionClause 
:
{ before(grammarAccess.getQueryPartitionClauseRule()); }
	 ruleQueryPartitionClause
{ after(grammarAccess.getQueryPartitionClauseRule()); } 
	 EOF 
;

// Rule QueryPartitionClause
ruleQueryPartitionClause 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getGroup()); }
(rule__QueryPartitionClause__Group__0)
{ after(grammarAccess.getQueryPartitionClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnalyticExprArgs
entryRuleAnalyticExprArgs 
:
{ before(grammarAccess.getAnalyticExprArgsRule()); }
	 ruleAnalyticExprArgs
{ after(grammarAccess.getAnalyticExprArgsRule()); } 
	 EOF 
;

// Rule AnalyticExprArgs
ruleAnalyticExprArgs 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getGroup()); }
(rule__AnalyticExprArgs__Group__0)
{ after(grammarAccess.getAnalyticExprArgsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnalyticExprArg
entryRuleAnalyticExprArg 
:
{ before(grammarAccess.getAnalyticExprArgRule()); }
	 ruleAnalyticExprArg
{ after(grammarAccess.getAnalyticExprArgRule()); } 
	 EOF 
;

// Rule AnalyticExprArg
ruleAnalyticExprArg 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAnalyticExprArgAccess().getGroup()); }
(rule__AnalyticExprArg__Group__0)
{ after(grammarAccess.getAnalyticExprArgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionArg
entryRuleOpFunctionArg 
:
{ before(grammarAccess.getOpFunctionArgRule()); }
	 ruleOpFunctionArg
{ after(grammarAccess.getOpFunctionArgRule()); } 
	 EOF 
;

// Rule OpFunctionArg
ruleOpFunctionArg 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup()); }
(rule__OpFunctionArg__Group__0)
{ after(grammarAccess.getOpFunctionArgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionArgOperand
entryRuleOpFunctionArgOperand 
:
{ before(grammarAccess.getOpFunctionArgOperandRule()); }
	 ruleOpFunctionArgOperand
{ after(grammarAccess.getOpFunctionArgOperandRule()); } 
	 EOF 
;

// Rule OpFunctionArgOperand
ruleOpFunctionArgOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpAssignment()); }
(rule__OpFunctionArgOperand__OpAssignment)
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionCast
entryRuleOpFunctionCast 
:
{ before(grammarAccess.getOpFunctionCastRule()); }
	 ruleOpFunctionCast
{ after(grammarAccess.getOpFunctionCastRule()); } 
	 EOF 
;

// Rule OpFunctionCast
ruleOpFunctionCast 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionCastAccess().getGroup()); }
(rule__OpFunctionCast__Group__0)
{ after(grammarAccess.getOpFunctionCastAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionArgAgregate
entryRuleOpFunctionArgAgregate 
:
{ before(grammarAccess.getOpFunctionArgAgregateRule()); }
	 ruleOpFunctionArgAgregate
{ after(grammarAccess.getOpFunctionArgAgregateRule()); } 
	 EOF 
;

// Rule OpFunctionArgAgregate
ruleOpFunctionArgAgregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getGroup()); }
(rule__OpFunctionArgAgregate__Group__0)
{ after(grammarAccess.getOpFunctionArgAgregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXOperandFragment
entryRuleXOperandFragment 
:
{ before(grammarAccess.getXOperandFragmentRule()); }
	 ruleXOperandFragment
{ after(grammarAccess.getXOperandFragmentRule()); } 
	 EOF 
;

// Rule XOperandFragment
ruleXOperandFragment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXOperandFragmentAccess().getAlternatives()); }
(rule__XOperandFragment__Alternatives)
{ after(grammarAccess.getXOperandFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterOperand
entryRuleParameterOperand 
:
{ before(grammarAccess.getParameterOperandRule()); }
	 ruleParameterOperand
{ after(grammarAccess.getParameterOperandRule()); } 
	 EOF 
;

// Rule ParameterOperand
ruleParameterOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParameterOperandAccess().getPrmAssignment()); }
(rule__ParameterOperand__PrmAssignment)
{ after(grammarAccess.getParameterOperandAccess().getPrmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExclamationParameterOperand
entryRuleExclamationParameterOperand 
:
{ before(grammarAccess.getExclamationParameterOperandRule()); }
	 ruleExclamationParameterOperand
{ after(grammarAccess.getExclamationParameterOperandRule()); } 
	 EOF 
;

// Rule ExclamationParameterOperand
ruleExclamationParameterOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExclamationParameterOperandAccess().getPrmAssignment()); }
(rule__ExclamationParameterOperand__PrmAssignment)
{ after(grammarAccess.getExclamationParameterOperandAccess().getPrmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnOperand
entryRuleColumnOperand 
:
{ before(grammarAccess.getColumnOperandRule()); }
	 ruleColumnOperand
{ after(grammarAccess.getColumnOperandRule()); } 
	 EOF 
;

// Rule ColumnOperand
ruleColumnOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnOperandAccess().getGroup()); }
(rule__ColumnOperand__Group__0)
{ after(grammarAccess.getColumnOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubQueryOperand
entryRuleSubQueryOperand 
:
{ before(grammarAccess.getSubQueryOperandRule()); }
	 ruleSubQueryOperand
{ after(grammarAccess.getSubQueryOperandRule()); } 
	 EOF 
;

// Rule SubQueryOperand
ruleSubQueryOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubQueryOperandAccess().getGroup()); }
(rule__SubQueryOperand__Group__0)
{ after(grammarAccess.getSubQueryOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScalarOperand
entryRuleScalarOperand 
:
{ before(grammarAccess.getScalarOperandRule()); }
	 ruleScalarOperand
{ after(grammarAccess.getScalarOperandRule()); } 
	 EOF 
;

// Rule ScalarOperand
ruleScalarOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getScalarOperandAccess().getAlternatives()); }
(rule__ScalarOperand__Alternatives)
{ after(grammarAccess.getScalarOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScalarNumberOperand
entryRuleScalarNumberOperand 
:
{ before(grammarAccess.getScalarNumberOperandRule()); }
	 ruleScalarNumberOperand
{ after(grammarAccess.getScalarNumberOperandRule()); } 
	 EOF 
;

// Rule ScalarNumberOperand
ruleScalarNumberOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getScalarNumberOperandAccess().getAlternatives()); }
(rule__ScalarNumberOperand__Alternatives)
{ after(grammarAccess.getScalarNumberOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSQLCASE
entryRuleSQLCASE 
:
{ before(grammarAccess.getSQLCASERule()); }
	 ruleSQLCASE
{ after(grammarAccess.getSQLCASERule()); } 
	 EOF 
;

// Rule SQLCASE
ruleSQLCASE 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSQLCASEAccess().getGroup()); }
(rule__SQLCASE__Group__0)
{ after(grammarAccess.getSQLCASEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSQLCaseWhens
entryRuleSQLCaseWhens 
:
{ before(grammarAccess.getSQLCaseWhensRule()); }
	 ruleSQLCaseWhens
{ after(grammarAccess.getSQLCaseWhensRule()); } 
	 EOF 
;

// Rule SQLCaseWhens
ruleSQLCaseWhens 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSQLCaseWhensAccess().getGroup()); }
(rule__SQLCaseWhens__Group__0)
{ after(grammarAccess.getSQLCaseWhensAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSqlCaseWhen
entryRuleSqlCaseWhen 
:
{ before(grammarAccess.getSqlCaseWhenRule()); }
	 ruleSqlCaseWhen
{ after(grammarAccess.getSqlCaseWhenRule()); } 
	 EOF 
;

// Rule SqlCaseWhen
ruleSqlCaseWhen 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSqlCaseWhenAccess().getGroup()); }
(rule__SqlCaseWhen__Group__0)
{ after(grammarAccess.getSqlCaseWhenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoinType
entryRuleJoinType 
:
{ before(grammarAccess.getJoinTypeRule()); }
	 ruleJoinType
{ after(grammarAccess.getJoinTypeRule()); } 
	 EOF 
;

// Rule JoinType
ruleJoinType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJoinTypeAccess().getGroup()); }
(rule__JoinType__Group__0)
{ after(grammarAccess.getJoinTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDBID
entryRuleDBID 
:
{ before(grammarAccess.getDBIDRule()); }
	 ruleDBID
{ after(grammarAccess.getDBIDRule()); } 
	 EOF 
;

// Rule DBID
ruleDBID 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDBIDAccess().getAlternatives()); }
(rule__DBID__Alternatives)
{ after(grammarAccess.getDBIDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringOperand
entryRuleStringOperand 
:
{ before(grammarAccess.getStringOperandRule()); }
	 ruleStringOperand
{ after(grammarAccess.getStringOperandRule()); } 
	 EOF 
;

// Rule StringOperand
ruleStringOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall()); }
	RULE_STRING_
{ after(grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFNAME
entryRuleFNAME 
:
{ before(grammarAccess.getFNAMERule()); }
	 ruleFNAME
{ after(grammarAccess.getFNAMERule()); } 
	 EOF 
;

// Rule FNAME
ruleFNAME 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFNAMEAccess().getGroup()); }
(rule__FNAME__Group__0)
{ after(grammarAccess.getFNAMEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerValue
entryRuleIntegerValue 
:
{ before(grammarAccess.getIntegerValueRule()); }
	 ruleIntegerValue
{ after(grammarAccess.getIntegerValueRule()); } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntegerValueAccess().getIntegerAssignment()); }
(rule__IntegerValue__IntegerAssignment)
{ after(grammarAccess.getIntegerValueAccess().getIntegerAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule EXTRACT_VALUES
ruleEXTRACT_VALUES
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getAlternatives()); }
(rule__EXTRACT_VALUES__Alternatives)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule XFunction
ruleXFunction
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXFunctionAccess().getAlternatives()); }
(rule__XFunction__Alternatives)
{ after(grammarAccess.getXFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__FetchFirst__RowAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchFirstAccess().getRowROWKeyword_1_0_0()); }

	ROW 

{ after(grammarAccess.getFetchFirstAccess().getRowROWKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getFetchFirstAccess().getRowROWSKeyword_1_0_1()); }

	ROWS 

{ after(grammarAccess.getFetchFirstAccess().getRowROWSKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getGroup_0()); }
(rule__Limit__Group_0__0)
{ after(grammarAccess.getLimitAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLimitAccess().getGroup_1()); }
(rule__Limit__Group_1__0)
{ after(grammarAccess.getLimitAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__OpAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0()); }

	UNION 

{ after(grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1()); }

	INTERSECT 

{ after(grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2()); }

	MINUS 

{ after(grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2()); }
)

    |(
{ before(grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3()); }

	EXCEPT 

{ after(grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0()); }
	RULE_INT
{ after(grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0()); }
)

    |(
{ before(grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1()); }
	RULE_SIGNED_DOUBLE
{ after(grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getGroup_0()); }
(rule__ColumnOrAlias__Group_0__0)
{ after(grammarAccess.getColumnOrAliasAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getAllColsAssignment_1()); }
(rule__ColumnOrAlias__AllColsAssignment_1)
{ after(grammarAccess.getColumnOrAliasAccess().getAllColsAssignment_1()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getDbAllColsAssignment_2()); }
(rule__ColumnOrAlias__DbAllColsAssignment_2)
{ after(grammarAccess.getColumnOrAliasAccess().getDbAllColsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getGroup_2_0()); }
(rule__FromTableJoin__Group_2_0__0)
{ after(grammarAccess.getFromTableJoinAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getFromTableJoinAccess().getJoinCondAssignment_2_1()); }
(rule__FromTableJoin__JoinCondAssignment_2_1)
{ after(grammarAccess.getFromTableJoinAccess().getJoinCondAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTfullAssignment_0_0()); }
(rule__TableOrAlias__TfullAssignment_0_0)
{ after(grammarAccess.getTableOrAliasAccess().getTfullAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getTableOrAliasAccess().getSqAssignment_0_1()); }
(rule__TableOrAlias__SqAssignment_0_1)
{ after(grammarAccess.getTableOrAliasAccess().getSqAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getPivotAssignment_1_0()); }
(rule__TableOrAlias__PivotAssignment_1_0)
{ after(grammarAccess.getTableOrAliasAccess().getPivotAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getTableOrAliasAccess().getUnpivotAssignment_1_1()); }
(rule__TableOrAlias__UnpivotAssignment_1_1)
{ after(grammarAccess.getTableOrAliasAccess().getUnpivotAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getSqAssignment_2_0()); }
(rule__PivotInClause__SqAssignment_2_0)
{ after(grammarAccess.getPivotInClauseAccess().getSqAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getPivotInClauseAccess().getArgsAssignment_2_1()); }
(rule__PivotInClause__ArgsAssignment_2_1)
{ after(grammarAccess.getPivotInClauseAccess().getArgsAssignment_2_1()); }
)

    |(
{ before(grammarAccess.getPivotInClauseAccess().getPinanyAssignment_2_2()); }
(rule__PivotInClause__PinanyAssignment_2_2)
{ after(grammarAccess.getPivotInClauseAccess().getPinanyAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getINCLUDEKeyword_1_0_0()); }

	INCLUDE 

{ after(grammarAccess.getUnpivotTableAccess().getINCLUDEKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnpivotTableAccess().getEXCLUDEKeyword_1_0_1()); }

	EXCLUDE 

{ after(grammarAccess.getUnpivotTableAccess().getEXCLUDEKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotForClause__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotForClauseAccess().getColumnFullParserRuleCall_1_0()); }
	ruleColumnFull
{ after(grammarAccess.getPivotForClauseAccess().getColumnFullParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getPivotForClauseAccess().getGroup_1_1()); }
(rule__PivotForClause__Group_1_1__0)
{ after(grammarAccess.getPivotForClauseAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotColumns__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColumnsAccess().getPivotColParserRuleCall_0()); }
	rulePivotCol
{ after(grammarAccess.getPivotColumnsAccess().getPivotColParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPivotColumnsAccess().getGroup_1()); }
(rule__PivotColumns__Group_1__0)
{ after(grammarAccess.getPivotColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_0_0()); }
(rule__OrderByColumnFull__ColOrderAssignment_0_0)
{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderIntAssignment_0_1()); }
(rule__OrderByColumnFull__ColOrderIntAssignment_0_1)
{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderIntAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__DirectionAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0()); }

	ASC 

{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1()); }

	DESC 

{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getColGrByAssignment_0()); }
(rule__GroupByColumnFull__ColGrByAssignment_0)
{ after(grammarAccess.getGroupByColumnFullAccess().getColGrByAssignment_0()); }
)

    |(
{ before(grammarAccess.getGroupByColumnFullAccess().getGbFunctionAssignment_1()); }
(rule__GroupByColumnFull__GbFunctionAssignment_1)
{ after(grammarAccess.getGroupByColumnFullAccess().getGbFunctionAssignment_1()); }
)

    |(
{ before(grammarAccess.getGroupByColumnFullAccess().getGrByIntAssignment_2()); }
(rule__GroupByColumnFull__GrByIntAssignment_2)
{ after(grammarAccess.getGroupByColumnFullAccess().getGrByIntAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getGroup_0()); }
(rule__ExpressionFragmentSecond__Group_0__0)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmAssignment_1()); }
(rule__ExpressionFragmentSecond__NotPrmAssignment_1)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__CAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0()); }

	AND 

{ after(grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1()); }

	OR 

{ after(grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getExpgroupAssignment_0()); }
(rule__ExpressionFragment__ExpgroupAssignment_0)
{ after(grammarAccess.getExpressionFragmentAccess().getExpgroupAssignment_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getExpAssignment_1()); }
(rule__ExpressionFragment__ExpAssignment_1)
{ after(grammarAccess.getExpressionFragmentAccess().getExpAssignment_1()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpAssignment_2()); }
(rule__ExpressionFragment__XexpAssignment_2)
{ after(grammarAccess.getExpressionFragmentAccess().getXexpAssignment_2()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getNotPrmAssignment_3()); }
(rule__ExpressionFragment__NotPrmAssignment_3)
{ after(grammarAccess.getExpressionFragmentAccess().getNotPrmAssignment_3()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getInAssignment_4()); }
(rule__ExpressionFragment__InAssignment_4)
{ after(grammarAccess.getExpressionFragmentAccess().getInAssignment_4()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getExistsAssignment_5()); }
(rule__ExpressionFragment__ExistsAssignment_5)
{ after(grammarAccess.getExpressionFragmentAccess().getExistsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__XexpAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0()); }
	ruleXExpression
{ after(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1()); }
	ruleXExpression_
{ after(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__IsnotAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_0()); }

	NOT_1 

{ after(grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_1()); }

	NOT 

{ after(grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getIsnullAssignment_1_0()); }
(rule__Expression__IsnullAssignment_1_0)
{ after(grammarAccess.getExpressionAccess().getIsnullAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getInAssignment_1_1()); }
(rule__Expression__InAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getInAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getExistsAssignment_1_2()); }
(rule__Expression__ExistsAssignment_1_2)
{ after(grammarAccess.getExpressionAccess().getExistsAssignment_1_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBetweenAssignment_1_3()); }
(rule__Expression__BetweenAssignment_1_3)
{ after(grammarAccess.getExpressionAccess().getBetweenAssignment_1_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLikeAssignment_1_4()); }
(rule__Expression__LikeAssignment_1_4)
{ after(grammarAccess.getExpressionAccess().getLikeAssignment_1_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getCompAssignment_1_5()); }
(rule__Expression__CompAssignment_1_5)
{ after(grammarAccess.getExpressionAccess().getCompAssignment_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__IsnullAlternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getIsnullISNULLKeyword_1_0_0_0()); }

	ISNULL 

{ after(grammarAccess.getExpressionAccess().getIsnullISNULLKeyword_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getIsnullISNOTNULLKeyword_1_0_0_1()); }

	ISNOTNULL 

{ after(grammarAccess.getExpressionAccess().getIsnullISNOTNULLKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0()); }

	GreaterThanSign 

{ after(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1()); }

	GreaterThanSignEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2()); }

	LessThanSign 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3()); }

	LessThanSignEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4()); }

	EqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5()); }

	LessThanSignGreaterThanSign 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_0_0_6()); }

	ExclamationMarkEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_0_0_6()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorCircumflexAccentEqualsSignKeyword_0_0_7()); }

	CircumflexAccentEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorCircumflexAccentEqualsSignKeyword_0_0_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SubOperatorAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0()); }

	ANY 

{ after(grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1()); }

	ALL 

{ after(grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2()); }

	SOME 

{ after(grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Like__OpLikeAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOpLikeLIKEKeyword_0_0_0()); }

	LIKE 

{ after(grammarAccess.getLikeAccess().getOpLikeLIKEKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getLikeAccess().getOpLikeNOTLIKEKeyword_0_0_1()); }

	NOTLIKE 

{ after(grammarAccess.getLikeAccess().getOpLikeNOTLIKEKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getOp2Assignment_0()); }
(rule__LikeOperand__Op2Assignment_0)
{ after(grammarAccess.getLikeOperandAccess().getOp2Assignment_0()); }
)

    |(
{ before(grammarAccess.getLikeOperandAccess().getFop2Assignment_1()); }
(rule__LikeOperand__Fop2Assignment_1)
{ after(grammarAccess.getLikeOperandAccess().getFop2Assignment_1()); }
)

    |(
{ before(grammarAccess.getLikeOperandAccess().getFcastAssignment_2()); }
(rule__LikeOperand__FcastAssignment_2)
{ after(grammarAccess.getLikeOperandAccess().getFcastAssignment_2()); }
)

    |(
{ before(grammarAccess.getLikeOperandAccess().getFparamAssignment_3()); }
(rule__LikeOperand__FparamAssignment_3)
{ after(grammarAccess.getLikeOperandAccess().getFparamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__OpBetweenAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOpBetweenBETWEENKeyword_0_0_0()); }

	BETWEEN 

{ after(grammarAccess.getBetweenAccess().getOpBetweenBETWEENKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getBetweenAccess().getOpBetweenNOTBETWEENKeyword_0_0_1()); }

	NOTBETWEEN 

{ after(grammarAccess.getBetweenAccess().getOpBetweenNOTBETWEENKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__OpAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpNOTINKeyword_1_0_0()); }

	NOTIN_1 

{ after(grammarAccess.getInOperatorAccess().getOpNOTINKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getInOperatorAccess().getOpINKeyword_1_0_1()); }

	IN 

{ after(grammarAccess.getInOperatorAccess().getOpINKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getSubqueryAssignment_2_0()); }
(rule__InOperator__SubqueryAssignment_2_0)
{ after(grammarAccess.getInOperatorAccess().getSubqueryAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getInOperatorAccess().getOpListAssignment_2_1()); }
(rule__InOperator__OpListAssignment_2_1)
{ after(grammarAccess.getInOperatorAccess().getOpListAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__OpAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getOpNOTEXISTSKeyword_1_0_0()); }

	NOTEXISTS 

{ after(grammarAccess.getExistsOperatorAccess().getOpNOTEXISTSKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getExistsOperatorAccess().getOpEXISTSKeyword_1_0_1()); }

	EXISTS 

{ after(grammarAccess.getExistsOperatorAccess().getOpEXISTSKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getSubqueryAssignment_2_0()); }
(rule__ExistsOperator__SubqueryAssignment_2_0)
{ after(grammarAccess.getExistsOperatorAccess().getSubqueryAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getExistsOperatorAccess().getOpListAssignment_2_1()); }
(rule__ExistsOperator__OpListAssignment_2_1)
{ after(grammarAccess.getExistsOperatorAccess().getOpListAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandGroup__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_0()); }
	ruleOperand
{ after(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOperandGroupAccess().getGroup_1()); }
(rule__OperandGroup__Group_1__0)
{ after(grammarAccess.getOperandGroupAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_0()); }
(rule__Operand__Group_1_0_0__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_1()); }
(rule__Operand__Group_1_0_1__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_2()); }
(rule__Operand__Group_1_0_2__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_3()); }
(rule__Operand__Group_1_0_3__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_3()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_4()); }
(rule__Operand__Group_1_0_4__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getColumnAssignment_0()); }
(rule__OperandFragment__ColumnAssignment_0)
{ after(grammarAccess.getOperandFragmentAccess().getColumnAssignment_0()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getXopAssignment_1()); }
(rule__OperandFragment__XopAssignment_1)
{ after(grammarAccess.getOperandFragmentAccess().getXopAssignment_1()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getSubqAssignment_2()); }
(rule__OperandFragment__SubqAssignment_2)
{ after(grammarAccess.getOperandFragmentAccess().getSubqAssignment_2()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getFcastAssignment_3()); }
(rule__OperandFragment__FcastAssignment_3)
{ after(grammarAccess.getOperandFragmentAccess().getFcastAssignment_3()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getFextAssignment_4()); }
(rule__OperandFragment__FextAssignment_4)
{ after(grammarAccess.getOperandFragmentAccess().getFextAssignment_4()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getFuncAssignment_5()); }
(rule__OperandFragment__FuncAssignment_5)
{ after(grammarAccess.getOperandFragmentAccess().getFuncAssignment_5()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getSqlcaseAssignment_6()); }
(rule__OperandFragment__SqlcaseAssignment_6)
{ after(grammarAccess.getOperandFragmentAccess().getSqlcaseAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getStarAssignment_2_0()); }
(rule__OperandFunction__StarAssignment_2_0)
{ after(grammarAccess.getOperandFunctionAccess().getStarAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getOperandFunctionAccess().getArgsAssignment_2_1()); }
(rule__OperandFunction__ArgsAssignment_2_1)
{ after(grammarAccess.getOperandFunctionAccess().getArgsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClause__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseAccess().getROWSKeyword_0_0()); }

	ROWS 

{ after(grammarAccess.getWindowingClauseAccess().getROWSKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getWindowingClauseAccess().getRANGEKeyword_0_1()); }

	RANGE 

{ after(grammarAccess.getWindowingClauseAccess().getRANGEKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClause__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseAccess().getWindowingClauseBetweenParserRuleCall_1_0()); }
	ruleWindowingClauseBetween
{ after(grammarAccess.getWindowingClauseAccess().getWindowingClauseBetweenParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getWindowingClauseAccess().getWindowingClauseOperandPrecedingParserRuleCall_1_1()); }
	ruleWindowingClauseOperandPreceding
{ after(grammarAccess.getWindowingClauseAccess().getWindowingClauseOperandPrecedingParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandFollowing__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getUNBOUNDEDFOLLOWINGKeyword_1_0()); }

	UNBOUNDEDFOLLOWING 

{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getUNBOUNDEDFOLLOWINGKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getCURRENTROWKeyword_1_1()); }

	CURRENTROW 

{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getCURRENTROWKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getGroup_1_2()); }
(rule__WindowingClauseOperandFollowing__Group_1_2__0)
{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandFollowing__Alternatives_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getPRECEDINGKeyword_1_2_1_0()); }

	PRECEDING 

{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getPRECEDINGKeyword_1_2_1_0()); }
)

    |(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_2_1_1()); }

	KW_FOLLOWING 

{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandPreceding__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getUNBOUNDEDPRECEDINGKeyword_1_0()); }

	UNBOUNDEDPRECEDING 

{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getUNBOUNDEDPRECEDINGKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getCURRENTROWKeyword_1_1()); }

	CURRENTROW 

{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getCURRENTROWKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getGroup_1_2()); }
(rule__WindowingClauseOperandPreceding__Group_1_2__0)
{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandPreceding__Alternatives_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_2_1_0()); }

	PRECEDING 

{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_2_1_0()); }
)

    |(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getFOLLOWINGKeyword_1_2_1_1()); }

	KW_FOLLOWING 

{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getFOLLOWINGKeyword_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getORDERBYKeyword_0_0()); }

	ORDERBY 

{ after(grammarAccess.getOrderByClauseAccess().getORDERBYKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getOrderByClauseAccess().getORDERSIBLINGSBYKeyword_0_1()); }

	ORDERSIBLINGSBY 

{ after(grammarAccess.getOrderByClauseAccess().getORDERSIBLINGSBYKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getASCKeyword_1_0()); }

	ASC 

{ after(grammarAccess.getOrderByClauseArgAccess().getASCKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getOrderByClauseArgAccess().getDESCKeyword_1_1()); }

	DESC 

{ after(grammarAccess.getOrderByClauseArgAccess().getDESCKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getFIRSTKeyword_2_1_0()); }

	FIRST 

{ after(grammarAccess.getOrderByClauseArgAccess().getFIRSTKeyword_2_1_0()); }
)

    |(
{ before(grammarAccess.getOrderByClauseArgAccess().getLASTKeyword_2_1_1()); }

	LAST 

{ after(grammarAccess.getOrderByClauseArgAccess().getLASTKeyword_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QueryPartitionClause__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getArgsAssignment_1_0()); }
(rule__QueryPartitionClause__ArgsAssignment_1_0)
{ after(grammarAccess.getQueryPartitionClauseAccess().getArgsAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getQueryPartitionClauseAccess().getGroup_1_1()); }
(rule__QueryPartitionClause__Group_1_1__0)
{ after(grammarAccess.getQueryPartitionClauseAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgOperand__OpAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0()); }
	ruleOpFunctionArgAgregate
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1()); }
	ruleOperand
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgAgregate__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0()); }

	ALL 

{ after(grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1()); }

	DISTINCT 

{ after(grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getParamAssignment_0()); }
(rule__XOperandFragment__ParamAssignment_0)
{ after(grammarAccess.getXOperandFragmentAccess().getParamAssignment_0()); }
)

    |(
{ before(grammarAccess.getXOperandFragmentAccess().getEparamAssignment_1()); }
(rule__XOperandFragment__EparamAssignment_1)
{ after(grammarAccess.getXOperandFragmentAccess().getEparamAssignment_1()); }
)

    |(
{ before(grammarAccess.getXOperandFragmentAccess().getScalarAssignment_2()); }
(rule__XOperandFragment__ScalarAssignment_2)
{ after(grammarAccess.getXOperandFragmentAccess().getScalarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSostrAssignment_0()); }
(rule__ScalarOperand__SostrAssignment_0)
{ after(grammarAccess.getScalarOperandAccess().getSostrAssignment_0()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSodblAssignment_1()); }
(rule__ScalarOperand__SodblAssignment_1)
{ after(grammarAccess.getScalarOperandAccess().getSodblAssignment_1()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSodateAssignment_2()); }
(rule__ScalarOperand__SodateAssignment_2)
{ after(grammarAccess.getScalarOperandAccess().getSodateAssignment_2()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSotimeAssignment_3()); }
(rule__ScalarOperand__SotimeAssignment_3)
{ after(grammarAccess.getScalarOperandAccess().getSotimeAssignment_3()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSodtAssignment_4()); }
(rule__ScalarOperand__SodtAssignment_4)
{ after(grammarAccess.getScalarOperandAccess().getSodtAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNumberOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNumberOperandAccess().getSoUIntAssignment_0()); }
(rule__ScalarNumberOperand__SoUIntAssignment_0)
{ after(grammarAccess.getScalarNumberOperandAccess().getSoUIntAssignment_0()); }
)

    |(
{ before(grammarAccess.getScalarNumberOperandAccess().getSointAssignment_1()); }
(rule__ScalarNumberOperand__SointAssignment_1)
{ after(grammarAccess.getScalarNumberOperandAccess().getSointAssignment_1()); }
)

    |(
{ before(grammarAccess.getScalarNumberOperandAccess().getSodblAssignment_2()); }
(rule__ScalarNumberOperand__SodblAssignment_2)
{ after(grammarAccess.getScalarNumberOperandAccess().getSodblAssignment_2()); }
)

    |(
{ before(grammarAccess.getScalarNumberOperandAccess().getSostrAssignment_3()); }
(rule__ScalarNumberOperand__SostrAssignment_3)
{ after(grammarAccess.getScalarNumberOperandAccess().getSostrAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0()); }

	INNER 

{ after(grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getGroup_1_1()); }
(rule__JoinType__Group_1_1__0)
{ after(grammarAccess.getJoinTypeAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2()); }

	CROSS 

{ after(grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getSTRAIGHT_JOINKeyword_1_3()); }

	STRAIGHT_JOIN 

{ after(grammarAccess.getJoinTypeAccess().getSTRAIGHT_JOINKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Alternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0()); }

	LEFT 

{ after(grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1()); }

	RIGHT 

{ after(grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2()); }

	FULL 

{ after(grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DBID__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1()); }
	RULE_DBNAME
{ after(grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXTRACT_VALUES__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0()); }
(	MICROSECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1()); }
(	SECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2()); }
(	MINUTE
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3()); }
(	HOUR
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4()); }
(	DAY
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5()); }
(	WEEK
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6()); }
(	MONTH
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7()); }
(	QUARTER
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8()); }
(	YEAR
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9()); }
(	SECOND_MICROSECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10()); }
(	MINUTE_MICROSECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11()); }
(	MINUTE_SECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12()); }
(	HOUR_MICROSECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13()); }
(	HOUR_SECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14()); }
(	HOUR_MINUTE
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15()); }
(	DAY_MICROSECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16()); }
(	DAY_SECOND
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17()); }
(	DAY_MINUTE
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18()); }
(	DAY_HOUR
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19()); }
(	YEAR_MONTH
)
{ after(grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0()); }
(	IN
)
{ after(grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1()); }
(	NOTIN
)
{ after(grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2()); }
(	EQUAL
)
{ after(grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3()); }
(	NOTEQUAL
)
{ after(grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4()); }
(	LESS
)
{ after(grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_5()); }
(	GREATER
)
{ after(grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_6()); }
(	LESS_1
)
{ after(grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_7()); }
(	GREATER_1
)
{ after(grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8()); }
(	BETWEEN
)
{ after(grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9()); }
(	BETWEEN_3
)
{ after(grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10()); }
(	BETWEEN_2
)
{ after(grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11()); }
(	BETWEEN_1
)
{ after(grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__FetchFirst__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchFirst__Group__0__Impl
	rule__FetchFirst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchFirst__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchFirstAccess().getFetchFirstAssignment_0()); }
(rule__FetchFirst__FetchFirstAssignment_0)?
{ after(grammarAccess.getFetchFirstAccess().getFetchFirstAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchFirst__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchFirst__Group__1__Impl
	rule__FetchFirst__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchFirst__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchFirstAccess().getRowAssignment_1()); }
(rule__FetchFirst__RowAssignment_1)
{ after(grammarAccess.getFetchFirstAccess().getRowAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchFirst__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchFirst__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchFirst__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchFirstAccess().getONLYKeyword_2()); }

	ONLY 

{ after(grammarAccess.getFetchFirstAccess().getONLYKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Limit__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Limit__Group_0__0__Impl
	rule__Limit__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getLimitAction_0_0()); }
(

)
{ after(grammarAccess.getLimitAccess().getLimitAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Limit__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Limit__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getALLKeyword_0_1()); }

	ALL 

{ after(grammarAccess.getLimitAccess().getALLKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Limit__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Limit__Group_1__0__Impl
	rule__Limit__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getL1Assignment_1_0()); }
(rule__Limit__L1Assignment_1_0)
{ after(grammarAccess.getLimitAccess().getL1Assignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Limit__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Limit__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getGroup_1_1()); }
(rule__Limit__Group_1_1__0)?
{ after(grammarAccess.getLimitAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Limit__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Limit__Group_1_1__0__Impl
	rule__Limit__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getLimitAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Limit__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Limit__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getL2Assignment_1_1_1()); }
(rule__Limit__L2Assignment_1_1_1)
{ after(grammarAccess.getLimitAccess().getL2Assignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectQuery__Group__0__Impl
	rule__SelectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0()); }
	ruleSelect
{ after(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectQueryAccess().getOpAssignment_1()); }
(rule__SelectQuery__OpAssignment_1)*
{ after(grammarAccess.getSelectQueryAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectSubSet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectSubSet__Group__0__Impl
	rule__SelectSubSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getOpAssignment_0()); }
(rule__SelectSubSet__OpAssignment_0)
{ after(grammarAccess.getSelectSubSetAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectSubSet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectSubSet__Group__1__Impl
	rule__SelectSubSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getAllAssignment_1()); }
(rule__SelectSubSet__AllAssignment_1)?
{ after(grammarAccess.getSelectSubSetAccess().getAllAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectSubSet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectSubSet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getQueryAssignment_2()); }
(rule__SelectSubSet__QueryAssignment_2)
{ after(grammarAccess.getSelectSubSetAccess().getQueryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Select__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSelectAssignment_0()); }
(rule__Select__SelectAssignment_0)
{ after(grammarAccess.getSelectAccess().getSelectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getDISTINCTKeyword_1()); }
(
	DISTINCT 
)?
{ after(grammarAccess.getSelectAccess().getDISTINCTKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_2()); }
(rule__Select__Group_2__0)?
{ after(grammarAccess.getSelectAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__3__Impl
	rule__Select__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getColsAssignment_3()); }
(rule__Select__ColsAssignment_3)
{ after(grammarAccess.getSelectAccess().getColsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__4__Impl
	rule__Select__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFROMKeyword_4()); }

	FROM 

{ after(grammarAccess.getSelectAccess().getFROMKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__5__Impl
	rule__Select__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getTblAssignment_5()); }
(rule__Select__TblAssignment_5)
{ after(grammarAccess.getSelectAccess().getTblAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__6__Impl
	rule__Select__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_6()); }
(rule__Select__Group_6__0)?
{ after(grammarAccess.getSelectAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__7__Impl
	rule__Select__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_7()); }
(rule__Select__Group_7__0)?
{ after(grammarAccess.getSelectAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__8__Impl
	rule__Select__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_8()); }
(rule__Select__Group_8__0)?
{ after(grammarAccess.getSelectAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__9__Impl
	rule__Select__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_9()); }
(rule__Select__Group_9__0)?
{ after(grammarAccess.getSelectAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__10__Impl
	rule__Select__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_10()); }
(rule__Select__Group_10__0)?
{ after(grammarAccess.getSelectAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__11__Impl
	rule__Select__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_11()); }
(rule__Select__Group_11__0)?
{ after(grammarAccess.getSelectAccess().getGroup_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_12()); }
(rule__Select__Group_12__0)?
{ after(grammarAccess.getSelectAccess().getGroup_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}




























rule__Select__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__0__Impl
	rule__Select__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getTOPKeyword_2_0()); }

	TOP 

{ after(grammarAccess.getSelectAccess().getTOPKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__1__Impl
	rule__Select__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getAlternatives_2_1()); }
(rule__Select__Alternatives_2_1)
{ after(grammarAccess.getSelectAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__2__Impl
	rule__Select__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getPERCENTKeyword_2_2()); }
(
	PERCENT 
)?
{ after(grammarAccess.getSelectAccess().getPERCENTKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWITHTIESKeyword_2_3()); }
(
	WITHTIES 
)?
{ after(grammarAccess.getSelectAccess().getWITHTIESKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Select__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_6__0__Impl
	rule__Select__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWHEREKeyword_6_0()); }

	WHERE 

{ after(grammarAccess.getSelectAccess().getWHEREKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWhereExpressionAssignment_6_1()); }
(rule__Select__WhereExpressionAssignment_6_1)
{ after(grammarAccess.getSelectAccess().getWhereExpressionAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_7__0__Impl
	rule__Select__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGROUPBYKeyword_7_0()); }

	GROUPBY 

{ after(grammarAccess.getSelectAccess().getGROUPBYKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroupByEntryAssignment_7_1()); }
(rule__Select__GroupByEntryAssignment_7_1)
{ after(grammarAccess.getSelectAccess().getGroupByEntryAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_8__0__Impl
	rule__Select__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getHAVINGKeyword_8_0()); }

	HAVING 

{ after(grammarAccess.getSelectAccess().getHAVINGKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getHavingEntryAssignment_8_1()); }
(rule__Select__HavingEntryAssignment_8_1)
{ after(grammarAccess.getSelectAccess().getHavingEntryAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_9__0__Impl
	rule__Select__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getORDERBYKeyword_9_0()); }

	ORDERBY 

{ after(grammarAccess.getSelectAccess().getORDERBYKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getOrderByEntryAssignment_9_1()); }
(rule__Select__OrderByEntryAssignment_9_1)
{ after(grammarAccess.getSelectAccess().getOrderByEntryAssignment_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_10__0__Impl
	rule__Select__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getLIMITKeyword_10_0()); }

	LIMIT 

{ after(grammarAccess.getSelectAccess().getLIMITKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getLimAssignment_10_1()); }
(rule__Select__LimAssignment_10_1)
{ after(grammarAccess.getSelectAccess().getLimAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_11__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_11__0__Impl
	rule__Select__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_11__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getOFFSETKeyword_11_0()); }

	OFFSET 

{ after(grammarAccess.getSelectAccess().getOFFSETKeyword_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_11__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_11__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getOffsetAssignment_11_1()); }
(rule__Select__OffsetAssignment_11_1)
{ after(grammarAccess.getSelectAccess().getOffsetAssignment_11_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_12__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_12__0__Impl
	rule__Select__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_12__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFETCHFIRSTKeyword_12_0()); }

	FETCHFIRST 

{ after(grammarAccess.getSelectAccess().getFETCHFIRSTKeyword_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_12__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_12__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_12__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFetchFirstAssignment_12_1()); }
(rule__Select__FetchFirstAssignment_12_1)
{ after(grammarAccess.getSelectAccess().getFetchFirstAssignment_12_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group__0__Impl
	rule__Columns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0()); }
	ruleColumnOrAlias
{ after(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getGroup_1()); }
(rule__Columns__Group_1__0)?
{ after(grammarAccess.getColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1__0__Impl
	rule__Columns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getColumnsAccess().getGroup_1_1()); }
(rule__Columns__Group_1_1__0)
{ after(grammarAccess.getColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getColumnsAccess().getGroup_1_1()); }
(rule__Columns__Group_1_1__0)*
{ after(grammarAccess.getColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1_1__0__Impl
	rule__Columns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__Columns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnOrAlias__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_0__0__Impl
	rule__ColumnOrAlias__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getCeAssignment_0_0()); }
(rule__ColumnOrAlias__CeAssignment_0_0)
{ after(grammarAccess.getColumnOrAliasAccess().getCeAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_0__1__Impl
	rule__ColumnOrAlias__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAliasAssignment_0_1()); }
(rule__ColumnOrAlias__AliasAssignment_0_1)?
{ after(grammarAccess.getColumnOrAliasAccess().getAliasAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_0_2()); }
(rule__ColumnOrAlias__ColAliasAssignment_0_2)?
{ after(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ColumnFull__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group__0__Impl
	rule__ColumnFull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0()); }
	ruleDbObjectName
{ after(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getGroup_1()); }
(rule__ColumnFull__Group_1__0)?
{ after(grammarAccess.getColumnFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__0__Impl
	rule__ColumnFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getColEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getColumnFullAccess().getColEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
(rule__ColumnFull__Group_1_1__0)
{ after(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
(rule__ColumnFull__Group_1_1__0)*
{ after(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnFull__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1_1__0__Impl
	rule__ColumnFull__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0()); }

	FullStop 

{ after(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getEntriesAssignment_1_1_1()); }
(rule__ColumnFull__EntriesAssignment_1_1_1)
{ after(grammarAccess.getColumnFullAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group__0__Impl
	rule__Tables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0()); }
	ruleFromTable
{ after(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getGroup_1()); }
(rule__Tables__Group_1__0)?
{ after(grammarAccess.getTablesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1__0__Impl
	rule__Tables__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTablesAccess().getGroup_1_1()); }
(rule__Tables__Group_1_1__0)
{ after(grammarAccess.getTablesAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getTablesAccess().getGroup_1_1()); }
(rule__Tables__Group_1_1__0)*
{ after(grammarAccess.getTablesAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1_1__0__Impl
	rule__Tables__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getTablesAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getEntriesAssignment_1_1_1()); }
(rule__Tables__EntriesAssignment_1_1_1)
{ after(grammarAccess.getTablesAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromTable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTable__Group__0__Impl
	rule__FromTable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getTableAssignment_0()); }
(rule__FromTable__TableAssignment_0)
{ after(grammarAccess.getFromTableAccess().getTableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getFjoinAssignment_1()); }
(rule__FromTable__FjoinAssignment_1)*
{ after(grammarAccess.getFromTableAccess().getFjoinAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromTableJoin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group__0__Impl
	rule__FromTableJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinAssignment_0()); }
(rule__FromTableJoin__JoinAssignment_0)
{ after(grammarAccess.getFromTableJoinAccess().getJoinAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTableJoin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group__1__Impl
	rule__FromTableJoin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getOnTableAssignment_1()); }
(rule__FromTableJoin__OnTableAssignment_1)
{ after(grammarAccess.getFromTableJoinAccess().getOnTableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTableJoin__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getAlternatives_2()); }
(rule__FromTableJoin__Alternatives_2)
{ after(grammarAccess.getFromTableJoinAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FromTableJoin__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group_2_0__0__Impl
	rule__FromTableJoin__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getONKeyword_2_0_0()); }

	ON 

{ after(grammarAccess.getFromTableJoinAccess().getONKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTableJoin__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinExprAssignment_2_0_1()); }
(rule__FromTableJoin__JoinExprAssignment_2_0_1)
{ after(grammarAccess.getFromTableJoinAccess().getJoinExprAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JoinCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinCondition__Group__0__Impl
	rule__JoinCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinConditionAccess().getUSINGKeyword_0()); }

	USING 

{ after(grammarAccess.getJoinConditionAccess().getUSINGKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinCondition__Group__1__Impl
	rule__JoinCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinConditionAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getJoinConditionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinCondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinCondition__Group__2__Impl
	rule__JoinCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinCondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinConditionAccess().getUseColsAssignment_2()); }
(rule__JoinCondition__UseColsAssignment_2)
{ after(grammarAccess.getJoinConditionAccess().getUseColsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinCondition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinCondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinCondition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinConditionAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getJoinConditionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UsingCols__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingCols__Group__0__Impl
	rule__UsingCols__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingCols__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingColsAccess().getDbObjectNameParserRuleCall_0()); }
	ruleDbObjectName
{ after(grammarAccess.getUsingColsAccess().getDbObjectNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingCols__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingCols__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingCols__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingColsAccess().getGroup_1()); }
(rule__UsingCols__Group_1__0)?
{ after(grammarAccess.getUsingColsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UsingCols__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingCols__Group_1__0__Impl
	rule__UsingCols__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingCols__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingColsAccess().getUsingColsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getUsingColsAccess().getUsingColsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingCols__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingCols__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingCols__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getUsingColsAccess().getGroup_1_1()); }
(rule__UsingCols__Group_1_1__0)
{ after(grammarAccess.getUsingColsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getUsingColsAccess().getGroup_1_1()); }
(rule__UsingCols__Group_1_1__0)*
{ after(grammarAccess.getUsingColsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UsingCols__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingCols__Group_1_1__0__Impl
	rule__UsingCols__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingCols__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingColsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getUsingColsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingCols__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingCols__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingCols__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingColsAccess().getEntriesAssignment_1_1_1()); }
(rule__UsingCols__EntriesAssignment_1_1_1)
{ after(grammarAccess.getUsingColsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableOrAlias__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group__0__Impl
	rule__TableOrAlias__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getAlternatives_0()); }
(rule__TableOrAlias__Alternatives_0)
{ after(grammarAccess.getTableOrAliasAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group__1__Impl
	rule__TableOrAlias__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getAlternatives_1()); }
(rule__TableOrAlias__Alternatives_1)?
{ after(grammarAccess.getTableOrAliasAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group__2__Impl
	rule__TableOrAlias__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getAliasAssignment_2()); }
(rule__TableOrAlias__AliasAssignment_2)?
{ after(grammarAccess.getTableOrAliasAccess().getAliasAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_3()); }
(rule__TableOrAlias__TblAliasAssignment_3)?
{ after(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PivotTable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotTable__Group__0__Impl
	rule__PivotTable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getPIVOTKeyword_0()); }

	PIVOT 

{ after(grammarAccess.getPivotTableAccess().getPIVOTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotTable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotTable__Group__1__Impl
	rule__PivotTable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getXMLKeyword_1()); }
(
	XML 
)?
{ after(grammarAccess.getPivotTableAccess().getXMLKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotTable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotTable__Group__2__Impl
	rule__PivotTable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getPivotTableAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotTable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotTable__Group__3__Impl
	rule__PivotTable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getPfunAssignment_3()); }
(rule__PivotTable__PfunAssignment_3)
{ after(grammarAccess.getPivotTableAccess().getPfunAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotTable__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotTable__Group__4__Impl
	rule__PivotTable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getPforAssignment_4()); }
(rule__PivotTable__PforAssignment_4)
{ after(grammarAccess.getPivotTableAccess().getPforAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotTable__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotTable__Group__5__Impl
	rule__PivotTable__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getPinAssignment_5()); }
(rule__PivotTable__PinAssignment_5)
{ after(grammarAccess.getPivotTableAccess().getPinAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotTable__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotTable__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getRightParenthesisKeyword_6()); }

	RightParenthesis 

{ after(grammarAccess.getPivotTableAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

















rule__PivotInClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClause__Group__0__Impl
	rule__PivotInClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getINKeyword_0()); }

	IN 

{ after(grammarAccess.getPivotInClauseAccess().getINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotInClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClause__Group__1__Impl
	rule__PivotInClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getPivotInClauseAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotInClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClause__Group__2__Impl
	rule__PivotInClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getAlternatives_2()); }
(rule__PivotInClause__Alternatives_2)
{ after(grammarAccess.getPivotInClauseAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotInClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getPivotInClauseAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PivotInClauseAny__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClauseAny__Group__0__Impl
	rule__PivotInClauseAny__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClauseAny__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_0()); }

	ANY 

{ after(grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotInClauseAny__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClauseAny__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClauseAny__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAnyAccess().getGroup_1()); }
(rule__PivotInClauseAny__Group_1__0)?
{ after(grammarAccess.getPivotInClauseAnyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotInClauseAny__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClauseAny__Group_1__0__Impl
	rule__PivotInClauseAny__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClauseAny__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAnyAccess().getCommaKeyword_1_0()); }

	Comma 

{ after(grammarAccess.getPivotInClauseAnyAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotInClauseAny__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotInClauseAny__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClauseAny__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_1_1()); }

	ANY 

{ after(grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnpivotTable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group__0__Impl
	rule__UnpivotTable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getUNPIVOTKeyword_0()); }

	UNPIVOT 

{ after(grammarAccess.getUnpivotTableAccess().getUNPIVOTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotTable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group__1__Impl
	rule__UnpivotTable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getGroup_1()); }
(rule__UnpivotTable__Group_1__0)?
{ after(grammarAccess.getUnpivotTableAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotTable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group__2__Impl
	rule__UnpivotTable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getUnpivotTableAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotTable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group__3__Impl
	rule__UnpivotTable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getPcolsAssignment_3()); }
(rule__UnpivotTable__PcolsAssignment_3)
{ after(grammarAccess.getUnpivotTableAccess().getPcolsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotTable__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group__4__Impl
	rule__UnpivotTable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getPforAssignment_4()); }
(rule__UnpivotTable__PforAssignment_4)
{ after(grammarAccess.getUnpivotTableAccess().getPforAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotTable__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group__5__Impl
	rule__UnpivotTable__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getInopAssignment_5()); }
(rule__UnpivotTable__InopAssignment_5)
{ after(grammarAccess.getUnpivotTableAccess().getInopAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotTable__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getRightParenthesisKeyword_6()); }

	RightParenthesis 

{ after(grammarAccess.getUnpivotTableAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__UnpivotTable__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group_1__0__Impl
	rule__UnpivotTable__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getAlternatives_1_0()); }
(rule__UnpivotTable__Alternatives_1_0)
{ after(grammarAccess.getUnpivotTableAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotTable__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotTable__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getNULLSKeyword_1_1()); }

	NULLS 

{ after(grammarAccess.getUnpivotTableAccess().getNULLSKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnpivotInClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClause__Group__0__Impl
	rule__UnpivotInClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseAccess().getUnipivotInClauseAction_0()); }
(

)
{ after(grammarAccess.getUnpivotInClauseAccess().getUnipivotInClauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClause__Group__1__Impl
	rule__UnpivotInClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseAccess().getOpAssignment_1()); }
(rule__UnpivotInClause__OpAssignment_1)
{ after(grammarAccess.getUnpivotInClauseAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClause__Group__2__Impl
	rule__UnpivotInClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getUnpivotInClauseAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClause__Group__3__Impl
	rule__UnpivotInClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseAccess().getArgsAssignment_3()); }
(rule__UnpivotInClause__ArgsAssignment_3)
{ after(grammarAccess.getUnpivotInClauseAccess().getArgsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getUnpivotInClauseAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__UnpivotInClauseArgs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArgs__Group__0__Impl
	rule__UnpivotInClauseArgs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArgs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getUnpivotInClauseArgParserRuleCall_0()); }
	ruleUnpivotInClauseArg
{ after(grammarAccess.getUnpivotInClauseArgsAccess().getUnpivotInClauseArgParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClauseArgs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArgs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArgs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getGroup_1()); }
(rule__UnpivotInClauseArgs__Group_1__0)?
{ after(grammarAccess.getUnpivotInClauseArgsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnpivotInClauseArgs__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArgs__Group_1__0__Impl
	rule__UnpivotInClauseArgs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArgs__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getUicargsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getUnpivotInClauseArgsAccess().getUicargsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClauseArgs__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArgs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArgs__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getGroup_1_1()); }
(rule__UnpivotInClauseArgs__Group_1_1__0)
{ after(grammarAccess.getUnpivotInClauseArgsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getGroup_1_1()); }
(rule__UnpivotInClauseArgs__Group_1_1__0)*
{ after(grammarAccess.getUnpivotInClauseArgsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnpivotInClauseArgs__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArgs__Group_1_1__0__Impl
	rule__UnpivotInClauseArgs__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArgs__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getUnpivotInClauseArgsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClauseArgs__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArgs__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArgs__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getEntriesAssignment_1_1_1()); }
(rule__UnpivotInClauseArgs__EntriesAssignment_1_1_1)
{ after(grammarAccess.getUnpivotInClauseArgsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnpivotInClauseArg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArg__Group__0__Impl
	rule__UnpivotInClauseArg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgAccess().getPcolsAssignment_0()); }
(rule__UnpivotInClauseArg__PcolsAssignment_0)
{ after(grammarAccess.getUnpivotInClauseArgAccess().getPcolsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClauseArg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgAccess().getGroup_1()); }
(rule__UnpivotInClauseArg__Group_1__0)?
{ after(grammarAccess.getUnpivotInClauseArgAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnpivotInClauseArg__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArg__Group_1__0__Impl
	rule__UnpivotInClauseArg__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArg__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgAccess().getASKeyword_1_0()); }

	AS 

{ after(grammarAccess.getUnpivotInClauseArgAccess().getASKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnpivotInClauseArg__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnpivotInClauseArg__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArg__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgAccess().getCfulsAssignment_1_1()); }
(rule__UnpivotInClauseArg__CfulsAssignment_1_1)
{ after(grammarAccess.getUnpivotInClauseArgAccess().getCfulsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotForClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotForClause__Group__0__Impl
	rule__PivotForClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotForClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotForClauseAccess().getFORKeyword_0()); }

	FOR 

{ after(grammarAccess.getPivotForClauseAccess().getFORKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotForClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotForClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotForClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotForClauseAccess().getAlternatives_1()); }
(rule__PivotForClause__Alternatives_1)
{ after(grammarAccess.getPivotForClauseAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotForClause__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotForClause__Group_1_1__0__Impl
	rule__PivotForClause__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotForClause__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotForClauseAccess().getLeftParenthesisKeyword_1_1_0()); }

	LeftParenthesis 

{ after(grammarAccess.getPivotForClauseAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotForClause__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotForClause__Group_1_1__1__Impl
	rule__PivotForClause__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotForClause__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotForClauseAccess().getColumnsParserRuleCall_1_1_1()); }
	ruleColumns
{ after(grammarAccess.getPivotForClauseAccess().getColumnsParserRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotForClause__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotForClause__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotForClause__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotForClauseAccess().getRightParenthesisKeyword_1_1_2()); }

	RightParenthesis 

{ after(grammarAccess.getPivotForClauseAccess().getRightParenthesisKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PivotColumns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotColumns__Group_1__0__Impl
	rule__PivotColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotColumns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColumnsAccess().getLeftParenthesisKeyword_1_0()); }

	LeftParenthesis 

{ after(grammarAccess.getPivotColumnsAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotColumns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotColumns__Group_1__1__Impl
	rule__PivotColumns__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotColumns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColumnsAccess().getPivotColsParserRuleCall_1_1()); }
	rulePivotCols
{ after(grammarAccess.getPivotColumnsAccess().getPivotColsParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotColumns__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotColumns__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotColumns__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColumnsAccess().getRightParenthesisKeyword_1_2()); }

	RightParenthesis 

{ after(grammarAccess.getPivotColumnsAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PivotCols__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCols__Group__0__Impl
	rule__PivotCols__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCols__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColsAccess().getPivotColParserRuleCall_0()); }
	rulePivotCol
{ after(grammarAccess.getPivotColsAccess().getPivotColParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotCols__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCols__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCols__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColsAccess().getGroup_1()); }
(rule__PivotCols__Group_1__0)?
{ after(grammarAccess.getPivotColsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotCols__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCols__Group_1__0__Impl
	rule__PivotCols__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCols__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColsAccess().getPvcsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getPivotColsAccess().getPvcsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotCols__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCols__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCols__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPivotColsAccess().getGroup_1_1()); }
(rule__PivotCols__Group_1_1__0)
{ after(grammarAccess.getPivotColsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getPivotColsAccess().getGroup_1_1()); }
(rule__PivotCols__Group_1_1__0)*
{ after(grammarAccess.getPivotColsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotCols__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCols__Group_1_1__0__Impl
	rule__PivotCols__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCols__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getPivotColsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotCols__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCols__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCols__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColsAccess().getEntriesAssignment_1_1_1()); }
(rule__PivotCols__EntriesAssignment_1_1_1)
{ after(grammarAccess.getPivotColsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotCol__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCol__Group__0__Impl
	rule__PivotCol__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCol__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColAccess().getDbObjectNameParserRuleCall_0()); }
	ruleDbObjectName
{ after(grammarAccess.getPivotColAccess().getDbObjectNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotCol__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCol__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCol__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColAccess().getGroup_1()); }
(rule__PivotCol__Group_1__0)?
{ after(grammarAccess.getPivotColAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotCol__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCol__Group_1__0__Impl
	rule__PivotCol__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCol__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColAccess().getPcolsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getPivotColAccess().getPcolsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotCol__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCol__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCol__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPivotColAccess().getGroup_1_1()); }
(rule__PivotCol__Group_1_1__0)
{ after(grammarAccess.getPivotColAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getPivotColAccess().getGroup_1_1()); }
(rule__PivotCol__Group_1_1__0)*
{ after(grammarAccess.getPivotColAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PivotCol__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCol__Group_1_1__0__Impl
	rule__PivotCol__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCol__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColAccess().getFullStopKeyword_1_1_0()); }

	FullStop 

{ after(grammarAccess.getPivotColAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PivotCol__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PivotCol__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCol__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColAccess().getEntriesAssignment_1_1_1()); }
(rule__PivotCol__EntriesAssignment_1_1_1)
{ after(grammarAccess.getPivotColAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableFull__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group__0__Impl
	rule__TableFull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0()); }
	ruleDbObjectName
{ after(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getGroup_1()); }
(rule__TableFull__Group_1__0)?
{ after(grammarAccess.getTableFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1__0__Impl
	rule__TableFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTableFullAccess().getGroup_1_1()); }
(rule__TableFull__Group_1_1__0)
{ after(grammarAccess.getTableFullAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getTableFullAccess().getGroup_1_1()); }
(rule__TableFull__Group_1_1__0)*
{ after(grammarAccess.getTableFullAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableFull__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1_1__0__Impl
	rule__TableFull__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0()); }

	FullStop 

{ after(grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getEntriesAssignment_1_1_1()); }
(rule__TableFull__EntriesAssignment_1_1_1)
{ after(grammarAccess.getTableFullAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DbObjectNameAll__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DbObjectNameAll__Group__0__Impl
	rule__DbObjectNameAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getDbnameAssignment_0()); }
(rule__DbObjectNameAll__DbnameAssignment_0)
{ after(grammarAccess.getDbObjectNameAllAccess().getDbnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DbObjectNameAll__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DbObjectNameAll__Group__1__Impl
	rule__DbObjectNameAll__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1()); }

	FullStop 

{ after(grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DbObjectNameAll__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DbObjectNameAll__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2()); }
	RULE_STAR
{ after(grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrderByColumns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group__0__Impl
	rule__OrderByColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0()); }
	ruleOrderByColumnFull
{ after(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1()); }
(rule__OrderByColumns__Group_1__0)?
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1__0__Impl
	rule__OrderByColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
(rule__OrderByColumns__Group_1_1__0)
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
(rule__OrderByColumns__Group_1_1__0)*
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1_1__0__Impl
	rule__OrderByColumns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__OrderByColumns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOrderByColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumnFull__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumnFull__Group__0__Impl
	rule__OrderByColumnFull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getAlternatives_0()); }
(rule__OrderByColumnFull__Alternatives_0)
{ after(grammarAccess.getOrderByColumnFullAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumnFull__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumnFull__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionAssignment_1()); }
(rule__OrderByColumnFull__DirectionAssignment_1)?
{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group__0__Impl
	rule__GroupByColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0()); }
	ruleGroupByColumnFull
{ after(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1()); }
(rule__GroupByColumns__Group_1__0)?
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1__0__Impl
	rule__GroupByColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
(rule__GroupByColumns__Group_1_1__0)
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
(rule__GroupByColumns__Group_1_1__0)*
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1_1__0__Impl
	rule__GroupByColumns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__GroupByColumns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getGroupByColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FullExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group__0__Impl
	rule__FullExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0()); }
	ruleExpressionFragment
{ after(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FullExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getGroup_1()); }
(rule__FullExpression__Group_1__0)?
{ after(grammarAccess.getFullExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FullExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group_1__0__Impl
	rule__FullExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FullExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
(rule__FullExpression__EntriesAssignment_1_1)
{ after(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
)
(
{ before(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
(rule__FullExpression__EntriesAssignment_1_1)*
{ after(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionFragmentSecond__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionFragmentSecond__Group_0__0__Impl
	rule__ExpressionFragmentSecond__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCAssignment_0_0()); }
(rule__ExpressionFragmentSecond__CAssignment_0_0)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getCAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionFragmentSecond__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionFragmentSecond__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getEfragAssignment_0_1()); }
(rule__ExpressionFragmentSecond__EfragAssignment_0_1)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getEfragAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionGroup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__0__Impl
	rule__ExpressionGroup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getExprGroupAction_0()); }
(

)
{ after(grammarAccess.getExpressionGroupAccess().getExprGroupAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionGroup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__1__Impl
	rule__ExpressionGroup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getIsnotAssignment_1()); }
(rule__ExpressionGroup__IsnotAssignment_1)?
{ after(grammarAccess.getExpressionGroupAccess().getIsnotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionGroup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__2__Impl
	rule__ExpressionGroup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionGroup__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__3__Impl
	rule__ExpressionGroup__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getExprAssignment_3()); }
(rule__ExpressionGroup__ExprAssignment_3)
{ after(grammarAccess.getExpressionGroupAccess().getExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionGroup__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__XExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__0__Impl
	rule__XExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXKeyword_0()); }

	X 

{ after(grammarAccess.getXExpressionAccess().getXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__1__Impl
	rule__XExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXExprAction_1()); }
(

)
{ after(grammarAccess.getXExpressionAccess().getXExprAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__2__Impl
	rule__XExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getXExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__3__Impl
	rule__XExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXfAssignment_3()); }
(rule__XExpression__XfAssignment_3)
{ after(grammarAccess.getXExpressionAccess().getXfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__4__Impl
	rule__XExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getCommaKeyword_4()); }

	Comma 

{ after(grammarAccess.getXExpressionAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__5__Impl
	rule__XExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getColAssignment_5()); }
(rule__XExpression__ColAssignment_5)
{ after(grammarAccess.getXExpressionAccess().getColAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__6__Impl
	rule__XExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getGroup_6()); }
(rule__XExpression__Group_6__0)?
{ after(grammarAccess.getXExpressionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_7()); }

	RightCurlyBracket 

{ after(grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__XExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group_6__0__Impl
	rule__XExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getCommaKeyword_6_0()); }

	Comma 

{ after(grammarAccess.getXExpressionAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getPrmAssignment_6_1()); }
(rule__XExpression__PrmAssignment_6_1)
{ after(grammarAccess.getXExpressionAccess().getPrmAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpression___Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__0__Impl
	rule__XExpression___Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXKeyword_0()); }

	X 

{ after(grammarAccess.getXExpression_Access().getXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__1__Impl
	rule__XExpression___Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXExprAction_1()); }
(

)
{ after(grammarAccess.getXExpression_Access().getXExprAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__2__Impl
	rule__XExpression___Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getXExpression_Access().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__3__Impl
	rule__XExpression___Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXfAssignment_3()); }
(rule__XExpression___XfAssignment_3)
{ after(grammarAccess.getXExpression_Access().getXfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__4__Impl
	rule__XExpression___Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getVerticalLineKeyword_4()); }

	VerticalLine 

{ after(grammarAccess.getXExpression_Access().getVerticalLineKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__5__Impl
	rule__XExpression___Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getColAssignment_5()); }
(rule__XExpression___ColAssignment_5)
{ after(grammarAccess.getXExpression_Access().getColAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__6__Impl
	rule__XExpression___Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getGroup_6()); }
(rule__XExpression___Group_6__0)?
{ after(grammarAccess.getXExpression_Access().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_7()); }

	RightCurlyBracket 

{ after(grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__XExpression___Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group_6__0__Impl
	rule__XExpression___Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getVerticalLineKeyword_6_0()); }

	VerticalLine 

{ after(grammarAccess.getXExpression_Access().getVerticalLineKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getPrmAssignment_6_1()); }
(rule__XExpression___PrmAssignment_6_1)
{ after(grammarAccess.getXExpression_Access().getPrmAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpressionParams__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group__0__Impl
	rule__XExpressionParams__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0()); }
	ruleJRParameter
{ after(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpressionParams__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup_1()); }
(rule__XExpressionParams__Group_1__0)?
{ after(grammarAccess.getXExpressionParamsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpressionParams__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1__0__Impl
	rule__XExpressionParams__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpressionParams__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
(rule__XExpressionParams__Group_1_1__0)
{ after(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
(rule__XExpressionParams__Group_1_1__0)*
{ after(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpressionParams__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1_1__0__Impl
	rule__XExpressionParams__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpressionParams__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getEntriesAssignment_1_1_1()); }
(rule__XExpressionParams__EntriesAssignment_1_1_1)
{ after(grammarAccess.getXExpressionParamsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOp1Assignment_0()); }
(rule__Expression__Op1Assignment_0)
{ after(grammarAccess.getExpressionAccess().getOp1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives_1()); }
(rule__Expression__Alternatives_1)
{ after(grammarAccess.getExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_0()); }
(rule__Comparison__OperatorAssignment_0)
{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getSubOperatorAssignment_1()); }
(rule__Comparison__SubOperatorAssignment_1)?
{ after(grammarAccess.getComparisonAccess().getSubOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOp2Assignment_2()); }
(rule__Comparison__Op2Assignment_2)
{ after(grammarAccess.getComparisonAccess().getOp2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Like__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Like__Group__0__Impl
	rule__Like__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Like__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOpLikeAssignment_0()); }
(rule__Like__OpLikeAssignment_0)
{ after(grammarAccess.getLikeAccess().getOpLikeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Like__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Like__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Like__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOp2Assignment_1()); }
(rule__Like__Op2Assignment_1)
{ after(grammarAccess.getLikeAccess().getOp2Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Between__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__0__Impl
	rule__Between__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOpBetweenAssignment_0()); }
(rule__Between__OpBetweenAssignment_0)
{ after(grammarAccess.getBetweenAccess().getOpBetweenAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Between__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__1__Impl
	rule__Between__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp2Assignment_1()); }
(rule__Between__Op2Assignment_1)
{ after(grammarAccess.getBetweenAccess().getOp2Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Between__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__2__Impl
	rule__Between__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getANDKeyword_2()); }

	AND 

{ after(grammarAccess.getBetweenAccess().getANDKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Between__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp3Assignment_3()); }
(rule__Between__Op3Assignment_3)
{ after(grammarAccess.getBetweenAccess().getOp3Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__0__Impl
	rule__InOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getInOperAction_0()); }
(

)
{ after(grammarAccess.getInOperatorAccess().getInOperAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__1__Impl
	rule__InOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpAssignment_1()); }
(rule__InOperator__OpAssignment_1)
{ after(grammarAccess.getInOperatorAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getAlternatives_2()); }
(rule__InOperator__Alternatives_2)
{ after(grammarAccess.getInOperatorAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExistsOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsOperator__Group__0__Impl
	rule__ExistsOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getExistsOperAction_0()); }
(

)
{ after(grammarAccess.getExistsOperatorAccess().getExistsOperAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsOperator__Group__1__Impl
	rule__ExistsOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getOpAssignment_1()); }
(rule__ExistsOperator__OpAssignment_1)
{ after(grammarAccess.getExistsOperatorAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsOperator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getAlternatives_2()); }
(rule__ExistsOperator__Alternatives_2)
{ after(grammarAccess.getExistsOperatorAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperandListGroup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandListGroup__Group__0__Impl
	rule__OperandListGroup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandListGroup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListGroupAccess().getLeftParenthesisKeyword_0()); }

	LeftParenthesis 

{ after(grammarAccess.getOperandListGroupAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandListGroup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandListGroup__Group__1__Impl
	rule__OperandListGroup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandListGroup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListGroupAccess().getOpGroupAssignment_1()); }
(rule__OperandListGroup__OpGroupAssignment_1)
{ after(grammarAccess.getOperandListGroupAccess().getOpGroupAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandListGroup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandListGroup__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandListGroup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListGroupAccess().getRightParenthesisKeyword_2()); }

	RightParenthesis 

{ after(grammarAccess.getOperandListGroupAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperandList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group__0__Impl
	rule__OperandList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0()); }
	ruleScalarOperand
{ after(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getGroup_1()); }
(rule__OperandList__Group_1__0)?
{ after(grammarAccess.getOperandListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperandList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1__0__Impl
	rule__OperandList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOperandListAccess().getGroup_1_1()); }
(rule__OperandList__Group_1_1__0)
{ after(grammarAccess.getOperandListAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOperandListAccess().getGroup_1_1()); }
(rule__OperandList__Group_1_1__0)*
{ after(grammarAccess.getOperandListAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperandList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1_1__0__Impl
	rule__OperandList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getEntriesAssignment_1_1_1()); }
(rule__OperandList__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOperandListAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperandGroup__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandGroup__Group_1__0__Impl
	rule__OperandGroup__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandGroup__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandGroupAccess().getLeftParenthesisKeyword_1_0()); }

	LeftParenthesis 

{ after(grammarAccess.getOperandGroupAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandGroup__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandGroup__Group_1__1__Impl
	rule__OperandGroup__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandGroup__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_1_1()); }
	ruleOperand
{ after(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandGroup__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandGroup__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandGroup__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandGroupAccess().getRightParenthesisKeyword_1_2()); }

	RightParenthesis 

{ after(grammarAccess.getOperandGroupAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Operand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group__0__Impl
	rule__Operand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getOp1Assignment_0()); }
(rule__Operand__Op1Assignment_0)
{ after(grammarAccess.getOperandAccess().getOp1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getGroup_1()); }
(rule__Operand__Group_1__0)*
{ after(grammarAccess.getOperandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1__0__Impl
	rule__Operand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getAlternatives_1_0()); }
(rule__Operand__Alternatives_1_0)
{ after(grammarAccess.getOperandAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getRightAssignment_1_1()); }
(rule__Operand__RightAssignment_1_1)
{ after(grammarAccess.getOperandAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_0__0__Impl
	rule__Operand__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1()); }

	PlusSign 

{ after(grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_1__0__Impl
	rule__Operand__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1()); }

	HyphenMinus 

{ after(grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_2__0__Impl
	rule__Operand__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getConcatLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getConcatLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_2_1()); }

	VerticalLineVerticalLine 

{ after(grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_3__0__Impl
	rule__Operand__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getMultiplyLeftAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getMultiplyLeftAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_3_1()); }
	RULE_STAR
{ after(grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_4__0__Impl
	rule__Operand__Group_1_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getDivisionLeftAction_1_0_4_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getDivisionLeftAction_1_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getSolidusKeyword_1_0_4_1()); }

	Solidus 

{ after(grammarAccess.getOperandAccess().getSolidusKeyword_1_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperandFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__0__Impl
	rule__OperandFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0()); }
(

)
{ after(grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__1__Impl
	rule__OperandFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getFnameAssignment_1()); }
(rule__OperandFunction__FnameAssignment_1)
{ after(grammarAccess.getOperandFunctionAccess().getFnameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__2__Impl
	rule__OperandFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getAlternatives_2()); }
(rule__OperandFunction__Alternatives_2)?
{ after(grammarAccess.getOperandFunctionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__3__Impl
	rule__OperandFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getFanAssignment_4()); }
(rule__OperandFunction__FanAssignment_4)?
{ after(grammarAccess.getOperandFunctionAccess().getFanAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionExtract__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionExtract__Group__0__Impl
	rule__FunctionExtract__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getEXTRACTKeyword_0()); }

	EXTRACT 

{ after(grammarAccess.getFunctionExtractAccess().getEXTRACTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionExtract__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionExtract__Group__1__Impl
	rule__FunctionExtract__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getFunctionExtractAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionExtract__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionExtract__Group__2__Impl
	rule__FunctionExtract__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getVAssignment_2()); }
(rule__FunctionExtract__VAssignment_2)
{ after(grammarAccess.getFunctionExtractAccess().getVAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionExtract__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionExtract__Group__3__Impl
	rule__FunctionExtract__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getFROMKeyword_3()); }

	FROM 

{ after(grammarAccess.getFunctionExtractAccess().getFROMKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionExtract__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionExtract__Group__4__Impl
	rule__FunctionExtract__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getOperandAssignment_4()); }
(rule__FunctionExtract__OperandAssignment_4)
{ after(grammarAccess.getFunctionExtractAccess().getOperandAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionExtract__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionExtract__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getRightParenthesisKeyword_5()); }

	RightParenthesis 

{ after(grammarAccess.getFunctionExtractAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FunctionAnalytical__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAnalytical__Group__0__Impl
	rule__FunctionAnalytical__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAnalytical__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAnalyticalAccess().getOVERKeyword_0()); }

	OVER 

{ after(grammarAccess.getFunctionAnalyticalAccess().getOVERKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAnalytical__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAnalytical__Group__1__Impl
	rule__FunctionAnalytical__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAnalytical__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAnalyticalAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getFunctionAnalyticalAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAnalytical__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAnalytical__Group__2__Impl
	rule__FunctionAnalytical__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAnalytical__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAnalyticalAccess().getAnClauseAssignment_2()); }
(rule__FunctionAnalytical__AnClauseAssignment_2)
{ after(grammarAccess.getFunctionAnalyticalAccess().getAnClauseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAnalytical__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAnalytical__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAnalytical__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAnalyticalAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getFunctionAnalyticalAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AnalyticClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticClause__Group__0__Impl
	rule__AnalyticClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getAnalyticClauseAction_0()); }
(

)
{ after(grammarAccess.getAnalyticClauseAccess().getAnalyticClauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnalyticClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticClause__Group__1__Impl
	rule__AnalyticClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getAbcAssignment_1()); }
(rule__AnalyticClause__AbcAssignment_1)?
{ after(grammarAccess.getAnalyticClauseAccess().getAbcAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnalyticClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getGroup_2()); }
(rule__AnalyticClause__Group_2__0)?
{ after(grammarAccess.getAnalyticClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AnalyticClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticClause__Group_2__0__Impl
	rule__AnalyticClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getObcAssignment_2_0()); }
(rule__AnalyticClause__ObcAssignment_2_0)
{ after(grammarAccess.getAnalyticClauseAccess().getObcAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnalyticClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getWincAssignment_2_1()); }
(rule__AnalyticClause__WincAssignment_2_1)?
{ after(grammarAccess.getAnalyticClauseAccess().getWincAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WindowingClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClause__Group__0__Impl
	rule__WindowingClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseAccess().getAlternatives_0()); }
(rule__WindowingClause__Alternatives_0)
{ after(grammarAccess.getWindowingClauseAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseAccess().getAlternatives_1()); }
(rule__WindowingClause__Alternatives_1)
{ after(grammarAccess.getWindowingClauseAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WindowingClauseBetween__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseBetween__Group__0__Impl
	rule__WindowingClauseBetween__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseBetween__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseBetweenAccess().getBETWEENKeyword_0()); }

	BETWEEN 

{ after(grammarAccess.getWindowingClauseBetweenAccess().getBETWEENKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClauseBetween__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseBetween__Group__1__Impl
	rule__WindowingClauseBetween__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseBetween__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseBetweenAccess().getWcoPAssignment_1()); }
(rule__WindowingClauseBetween__WcoPAssignment_1)
{ after(grammarAccess.getWindowingClauseBetweenAccess().getWcoPAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClauseBetween__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseBetween__Group__2__Impl
	rule__WindowingClauseBetween__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseBetween__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseBetweenAccess().getANDKeyword_2()); }

	AND 

{ after(grammarAccess.getWindowingClauseBetweenAccess().getANDKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClauseBetween__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseBetween__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseBetween__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseBetweenAccess().getWcoFAssignment_3()); }
(rule__WindowingClauseBetween__WcoFAssignment_3)
{ after(grammarAccess.getWindowingClauseBetweenAccess().getWcoFAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__WindowingClauseOperandFollowing__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandFollowing__Group__0__Impl
	rule__WindowingClauseOperandFollowing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandFollowing__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getWindowingClauseOperandFollowingAction_0()); }
(

)
{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getWindowingClauseOperandFollowingAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClauseOperandFollowing__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandFollowing__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandFollowing__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getAlternatives_1()); }
(rule__WindowingClauseOperandFollowing__Alternatives_1)
{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WindowingClauseOperandFollowing__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandFollowing__Group_1_2__0__Impl
	rule__WindowingClauseOperandFollowing__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandFollowing__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getExpAssignment_1_2_0()); }
(rule__WindowingClauseOperandFollowing__ExpAssignment_1_2_0)
{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getExpAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClauseOperandFollowing__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandFollowing__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandFollowing__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getAlternatives_1_2_1()); }
(rule__WindowingClauseOperandFollowing__Alternatives_1_2_1)
{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getAlternatives_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WindowingClauseOperandPreceding__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandPreceding__Group__0__Impl
	rule__WindowingClauseOperandPreceding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandPreceding__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getWindowingClauseOperandPrecedingAction_0()); }
(

)
{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getWindowingClauseOperandPrecedingAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClauseOperandPreceding__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandPreceding__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandPreceding__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getAlternatives_1()); }
(rule__WindowingClauseOperandPreceding__Alternatives_1)
{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WindowingClauseOperandPreceding__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandPreceding__Group_1_2__0__Impl
	rule__WindowingClauseOperandPreceding__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandPreceding__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getExprAssignment_1_2_0()); }
(rule__WindowingClauseOperandPreceding__ExprAssignment_1_2_0)
{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getExprAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WindowingClauseOperandPreceding__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WindowingClauseOperandPreceding__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandPreceding__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getAlternatives_1_2_1()); }
(rule__WindowingClauseOperandPreceding__Alternatives_1_2_1)
{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getAlternatives_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group__0__Impl
	rule__OrderByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getAlternatives_0()); }
(rule__OrderByClause__Alternatives_0)
{ after(grammarAccess.getOrderByClauseAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getArgsAssignment_1()); }
(rule__OrderByClause__ArgsAssignment_1)
{ after(grammarAccess.getOrderByClauseAccess().getArgsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByClauseArgs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArgs__Group__0__Impl
	rule__OrderByClauseArgs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArgs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getOrderByClauseArgParserRuleCall_0()); }
	ruleOrderByClauseArg
{ after(grammarAccess.getOrderByClauseArgsAccess().getOrderByClauseArgParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClauseArgs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArgs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArgs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getGroup_1()); }
(rule__OrderByClauseArgs__Group_1__0)?
{ after(grammarAccess.getOrderByClauseArgsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByClauseArgs__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArgs__Group_1__0__Impl
	rule__OrderByClauseArgs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArgs__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getOBCArgsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOrderByClauseArgsAccess().getOBCArgsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClauseArgs__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArgs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArgs__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getGroup_1_1()); }
(rule__OrderByClauseArgs__Group_1_1__0)
{ after(grammarAccess.getOrderByClauseArgsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getGroup_1_1()); }
(rule__OrderByClauseArgs__Group_1_1__0)*
{ after(grammarAccess.getOrderByClauseArgsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByClauseArgs__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArgs__Group_1_1__0__Impl
	rule__OrderByClauseArgs__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArgs__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getOrderByClauseArgsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClauseArgs__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArgs__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArgs__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getEntriesAssignment_1_1_1()); }
(rule__OrderByClauseArgs__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOrderByClauseArgsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByClauseArg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArg__Group__0__Impl
	rule__OrderByClauseArg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getColAssignment_0()); }
(rule__OrderByClauseArg__ColAssignment_0)
{ after(grammarAccess.getOrderByClauseArgAccess().getColAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClauseArg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArg__Group__1__Impl
	rule__OrderByClauseArg__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getAlternatives_1()); }
(rule__OrderByClauseArg__Alternatives_1)?
{ after(grammarAccess.getOrderByClauseArgAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClauseArg__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArg__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getGroup_2()); }
(rule__OrderByClauseArg__Group_2__0)?
{ after(grammarAccess.getOrderByClauseArgAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrderByClauseArg__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArg__Group_2__0__Impl
	rule__OrderByClauseArg__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getNULLSKeyword_2_0()); }

	NULLS 

{ after(grammarAccess.getOrderByClauseArgAccess().getNULLSKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClauseArg__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByClauseArg__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getAlternatives_2_1()); }
(rule__OrderByClauseArg__Alternatives_2_1)
{ after(grammarAccess.getOrderByClauseArgAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QueryPartitionClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryPartitionClause__Group__0__Impl
	rule__QueryPartitionClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryPartitionClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getPARTITIONBYKeyword_0()); }

	PARTITIONBY 

{ after(grammarAccess.getQueryPartitionClauseAccess().getPARTITIONBYKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QueryPartitionClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryPartitionClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryPartitionClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getAlternatives_1()); }
(rule__QueryPartitionClause__Alternatives_1)
{ after(grammarAccess.getQueryPartitionClauseAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QueryPartitionClause__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryPartitionClause__Group_1_1__0__Impl
	rule__QueryPartitionClause__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryPartitionClause__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getLeftParenthesisKeyword_1_1_0()); }

	LeftParenthesis 

{ after(grammarAccess.getQueryPartitionClauseAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QueryPartitionClause__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryPartitionClause__Group_1_1__1__Impl
	rule__QueryPartitionClause__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryPartitionClause__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getAnalyticExprArgsParserRuleCall_1_1_1()); }
	ruleAnalyticExprArgs
{ after(grammarAccess.getQueryPartitionClauseAccess().getAnalyticExprArgsParserRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QueryPartitionClause__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QueryPartitionClause__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QueryPartitionClause__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getRightParenthesisKeyword_1_1_2()); }

	RightParenthesis 

{ after(grammarAccess.getQueryPartitionClauseAccess().getRightParenthesisKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AnalyticExprArgs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArgs__Group__0__Impl
	rule__AnalyticExprArgs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArgs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getAnalyticExprArgParserRuleCall_0()); }
	ruleAnalyticExprArg
{ after(grammarAccess.getAnalyticExprArgsAccess().getAnalyticExprArgParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnalyticExprArgs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArgs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArgs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getGroup_1()); }
(rule__AnalyticExprArgs__Group_1__0)?
{ after(grammarAccess.getAnalyticExprArgsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnalyticExprArgs__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArgs__Group_1__0__Impl
	rule__AnalyticExprArgs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArgs__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getAExpArgsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getAnalyticExprArgsAccess().getAExpArgsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnalyticExprArgs__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArgs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArgs__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getGroup_1_1()); }
(rule__AnalyticExprArgs__Group_1_1__0)
{ after(grammarAccess.getAnalyticExprArgsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getGroup_1_1()); }
(rule__AnalyticExprArgs__Group_1_1__0)*
{ after(grammarAccess.getAnalyticExprArgsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnalyticExprArgs__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArgs__Group_1_1__0__Impl
	rule__AnalyticExprArgs__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArgs__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getAnalyticExprArgsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnalyticExprArgs__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArgs__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArgs__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getEntriesAssignment_1_1_1()); }
(rule__AnalyticExprArgs__EntriesAssignment_1_1_1)
{ after(grammarAccess.getAnalyticExprArgsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnalyticExprArg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArg__Group__0__Impl
	rule__AnalyticExprArg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgAccess().getCeAssignment_0()); }
(rule__AnalyticExprArg__CeAssignment_0)
{ after(grammarAccess.getAnalyticExprArgAccess().getCeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnalyticExprArg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnalyticExprArg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgAccess().getColAliasAssignment_1()); }
(rule__AnalyticExprArg__ColAliasAssignment_1)?
{ after(grammarAccess.getAnalyticExprArgAccess().getColAliasAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionArg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group__0__Impl
	rule__OpFunctionArg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0()); }
	ruleOpFunctionArgOperand
{ after(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup_1()); }
(rule__OpFunctionArg__Group_1__0)?
{ after(grammarAccess.getOpFunctionArgAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionArg__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1__0__Impl
	rule__OpFunctionArg__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArg__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
(rule__OpFunctionArg__Group_1_1__0)
{ after(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
(rule__OpFunctionArg__Group_1_1__0)*
{ after(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionArg__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1_1__0__Impl
	rule__OpFunctionArg__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArg__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getEntriesAssignment_1_1_1()); }
(rule__OpFunctionArg__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOpFunctionArgAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionCast__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__0__Impl
	rule__OpFunctionCast__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0()); }

	CAST 

{ after(grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__1__Impl
	rule__OpFunctionCast__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getOpAssignment_1()); }
(rule__OpFunctionCast__OpAssignment_1)
{ after(grammarAccess.getOpFunctionCastAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__2__Impl
	rule__OpFunctionCast__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getASKeyword_2()); }

	AS 

{ after(grammarAccess.getOpFunctionCastAccess().getASKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__3__Impl
	rule__OpFunctionCast__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getTypeAssignment_3()); }
(rule__OpFunctionCast__TypeAssignment_3)
{ after(grammarAccess.getOpFunctionCastAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__4__Impl
	rule__OpFunctionCast__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getGroup_4()); }
(rule__OpFunctionCast__Group_4__0)?
{ after(grammarAccess.getOpFunctionCastAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5()); }

	RightParenthesis 

{ after(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__OpFunctionCast__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__0__Impl
	rule__OpFunctionCast__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0()); }

	LeftParenthesis 

{ after(grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__1__Impl
	rule__OpFunctionCast__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getPAssignment_4_1()); }
(rule__OpFunctionCast__PAssignment_4_1)
{ after(grammarAccess.getOpFunctionCastAccess().getPAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__2__Impl
	rule__OpFunctionCast__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getGroup_4_2()); }
(rule__OpFunctionCast__Group_4_2__0)?
{ after(grammarAccess.getOpFunctionCastAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3()); }

	RightParenthesis 

{ after(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OpFunctionCast__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4_2__0__Impl
	rule__OpFunctionCast__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0()); }

	Comma 

{ after(grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getP2Assignment_4_2_1()); }
(rule__OpFunctionCast__P2Assignment_4_2_1)
{ after(grammarAccess.getOpFunctionCastAccess().getP2Assignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionArgAgregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArgAgregate__Group__0__Impl
	rule__OpFunctionArgAgregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgAgregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getAlternatives_0()); }
(rule__OpFunctionArgAgregate__Alternatives_0)
{ after(grammarAccess.getOpFunctionArgAgregateAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArgAgregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArgAgregate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgAgregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1()); }
	ruleOperand
{ after(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnOperand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOperand__Group__0__Impl
	rule__ColumnOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOperand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOperandAccess().getCfullAssignment_0()); }
(rule__ColumnOperand__CfullAssignment_0)
{ after(grammarAccess.getColumnOperandAccess().getCfullAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOperand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOperand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOperand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOperandAccess().getOraAssignment_1()); }
(rule__ColumnOperand__OraAssignment_1)?
{ after(grammarAccess.getColumnOperandAccess().getOraAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubQueryOperand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__0__Impl
	rule__SubQueryOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0()); }
(

)
{ after(grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubQueryOperand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__1__Impl
	rule__SubQueryOperand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubQueryOperand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__2__Impl
	rule__SubQueryOperand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getSelAssignment_2()); }
(rule__SubQueryOperand__SelAssignment_2)
{ after(grammarAccess.getSubQueryOperandAccess().getSelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubQueryOperand__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SQLCASE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__0__Impl
	rule__SQLCASE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getCASEKeyword_0()); }

	CASE 

{ after(grammarAccess.getSQLCASEAccess().getCASEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCASE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__1__Impl
	rule__SQLCASE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getExprAssignment_1()); }
(rule__SQLCASE__ExprAssignment_1)?
{ after(grammarAccess.getSQLCASEAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCASE__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__2__Impl
	rule__SQLCASE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getWhenAssignment_2()); }
(rule__SQLCASE__WhenAssignment_2)
{ after(grammarAccess.getSQLCASEAccess().getWhenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCASE__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getENDKeyword_3()); }

	END 

{ after(grammarAccess.getSQLCASEAccess().getENDKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SQLCaseWhens__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group__0__Impl
	rule__SQLCaseWhens__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0()); }
	ruleSqlCaseWhen
{ after(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCaseWhens__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getGroup_1()); }
(rule__SQLCaseWhens__Group_1__0)?
{ after(grammarAccess.getSQLCaseWhensAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SQLCaseWhens__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group_1__0__Impl
	rule__SQLCaseWhens__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCaseWhens__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
(rule__SQLCaseWhens__EntriesAssignment_1_1)
{ after(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
)
(
{ before(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
(rule__SQLCaseWhens__EntriesAssignment_1_1)*
{ after(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SqlCaseWhen__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__0__Impl
	rule__SqlCaseWhen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0()); }

	WHEN 

{ after(grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__1__Impl
	rule__SqlCaseWhen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getExprAssignment_1()); }
(rule__SqlCaseWhen__ExprAssignment_1)
{ after(grammarAccess.getSqlCaseWhenAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__2__Impl
	rule__SqlCaseWhen__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2()); }

	THEN 

{ after(grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__3__Impl
	rule__SqlCaseWhen__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getTexpAssignment_3()); }
(rule__SqlCaseWhen__TexpAssignment_3)
{ after(grammarAccess.getSqlCaseWhenAccess().getTexpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getGroup_4()); }
(rule__SqlCaseWhen__Group_4__0)?
{ after(grammarAccess.getSqlCaseWhenAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SqlCaseWhen__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group_4__0__Impl
	rule__SqlCaseWhen__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0()); }

	ELSE 

{ after(grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getEexpAssignment_4_1()); }
(rule__SqlCaseWhen__EexpAssignment_4_1)
{ after(grammarAccess.getSqlCaseWhenAccess().getEexpAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JoinType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group__0__Impl
	rule__JoinType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getNATURALKeyword_0()); }
(
	NATURAL 
)?
{ after(grammarAccess.getJoinTypeAccess().getNATURALKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group__1__Impl
	rule__JoinType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getAlternatives_1()); }
(rule__JoinType__Alternatives_1)?
{ after(grammarAccess.getJoinTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getJOINKeyword_2()); }

	JOIN 

{ after(grammarAccess.getJoinTypeAccess().getJOINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JoinType__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group_1_1__0__Impl
	rule__JoinType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getAlternatives_1_1_0()); }
(rule__JoinType__Alternatives_1_1_0)
{ after(grammarAccess.getJoinTypeAccess().getAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinType__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1()); }
(
	OUTER 
)?
{ after(grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FNAME__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FNAME__Group__0__Impl
	rule__FNAME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FNAME__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FNAME__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FNAME__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FNAME__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__QueryAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getQuerySelectQueryParserRuleCall_0()); }
	ruleSelectQuery{ after(grammarAccess.getModelAccess().getQuerySelectQueryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchFirst__FetchFirstAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchFirstAccess().getFetchFirstIntegerValueParserRuleCall_0_0()); }
	ruleIntegerValue{ after(grammarAccess.getFetchFirstAccess().getFetchFirstIntegerValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchFirst__RowAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchFirstAccess().getRowAlternatives_1_0()); }
(rule__FetchFirst__RowAlternatives_1_0)
{ after(grammarAccess.getFetchFirstAccess().getRowAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Offset__OffsetAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOffsetAccess().getOffsetINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getOffsetAccess().getOffsetINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__L1Assignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getL1UNSIGNEDTerminalRuleCall_1_0_0()); }
	RULE_UNSIGNED{ after(grammarAccess.getLimitAccess().getL1UNSIGNEDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__L2Assignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getL2UNSIGNEDTerminalRuleCall_1_1_1_0()); }
	RULE_UNSIGNED{ after(grammarAccess.getLimitAccess().getL2UNSIGNEDTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0()); }
	ruleSelectSubSet{ after(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getOpAlternatives_0_0()); }
(rule__SelectSubSet__OpAlternatives_0_0)
{ after(grammarAccess.getSelectSubSetAccess().getOpAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__AllAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }
(
{ before(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }

	ALL 

{ after(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }
)

{ after(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__QueryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0()); }
	ruleSelect{ after(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__SelectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }
(
{ before(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }

	SELECT 

{ after(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }
)

{ after(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__ColsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0()); }
	ruleColumns{ after(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__TblAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0()); }
	ruleTables{ after(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__WhereExpressionAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__GroupByEntryAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_1_0()); }
	ruleGroupByColumns{ after(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__HavingEntryAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__OrderByEntryAssignment_9_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getOrderByEntryOrderByColumnsParserRuleCall_9_1_0()); }
	ruleOrderByColumns{ after(grammarAccess.getSelectAccess().getOrderByEntryOrderByColumnsParserRuleCall_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__LimAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getLimLimitParserRuleCall_10_1_0()); }
	ruleLimit{ after(grammarAccess.getSelectAccess().getLimLimitParserRuleCall_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__OffsetAssignment_11_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getOffsetOffsetParserRuleCall_11_1_0()); }
	ruleOffset{ after(grammarAccess.getSelectAccess().getOffsetOffsetParserRuleCall_11_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FetchFirstAssignment_12_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFetchFirstFetchFirstParserRuleCall_12_1_0()); }
	ruleFetchFirst{ after(grammarAccess.getSelectAccess().getFetchFirstFetchFirstParserRuleCall_12_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0()); }
	ruleColumnOrAlias{ after(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__CeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getCeOperandGroupParserRuleCall_0_0_0()); }
	ruleOperandGroup{ after(grammarAccess.getColumnOrAliasAccess().getCeOperandGroupParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__AliasAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }
(
{ before(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }

	AS 

{ after(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }
)

{ after(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__ColAliasAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0()); }
	ruleDbObjectName{ after(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__AllColsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0()); }
	RULE_STAR{ after(grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__DbAllColsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0()); }
	ruleDbObjectNameAll{ after(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
	ruleDbObjectName{ after(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0()); }
	ruleFromTable{ after(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__TableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0()); }
	ruleTableOrAlias{ after(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__FjoinAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0()); }
	ruleFromTableJoin{ after(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__JoinAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0()); }
	ruleJoinType{ after(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__OnTableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0()); }
	ruleTableOrAlias{ after(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__JoinExprAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_2_0_1_0()); }
	ruleFullExpression{ after(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__JoinCondAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinCondJoinConditionParserRuleCall_2_1_0()); }
	ruleJoinCondition{ after(grammarAccess.getFromTableJoinAccess().getJoinCondJoinConditionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinCondition__UseColsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinConditionAccess().getUseColsUsingColsParserRuleCall_2_0()); }
	ruleUsingCols{ after(grammarAccess.getJoinConditionAccess().getUseColsUsingColsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UsingCols__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingColsAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
	ruleDbObjectName{ after(grammarAccess.getUsingColsAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__TfullAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0()); }
	ruleTableFull{ after(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__SqAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__PivotAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getPivotPivotTableParserRuleCall_1_0_0()); }
	rulePivotTable{ after(grammarAccess.getTableOrAliasAccess().getPivotPivotTableParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__UnpivotAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getUnpivotUnpivotTableParserRuleCall_1_1_0()); }
	ruleUnpivotTable{ after(grammarAccess.getTableOrAliasAccess().getUnpivotUnpivotTableParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__AliasAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_2_0()); }
(
{ before(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_2_0()); }

	AS 

{ after(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_2_0()); }
)

{ after(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__TblAliasAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_3_0()); }
	ruleDbObjectName{ after(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__PfunAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getPfunPivotFunctionsParserRuleCall_3_0()); }
	rulePivotFunctions{ after(grammarAccess.getPivotTableAccess().getPfunPivotFunctionsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__PforAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getPforPivotForClauseParserRuleCall_4_0()); }
	rulePivotForClause{ after(grammarAccess.getPivotTableAccess().getPforPivotForClauseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotTable__PinAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotTableAccess().getPinPivotInClauseParserRuleCall_5_0()); }
	rulePivotInClause{ after(grammarAccess.getPivotTableAccess().getPinPivotInClauseParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotFunctions__AbcAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotFunctionsAccess().getAbcIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getPivotFunctionsAccess().getAbcIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__SqAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getSqSubQueryOperandParserRuleCall_2_0_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getPivotInClauseAccess().getSqSubQueryOperandParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__ArgsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_2_1_0()); }
	ruleUnpivotInClauseArgs{ after(grammarAccess.getPivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotInClause__PinanyAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotInClauseAccess().getPinanyPivotInClauseAnyParserRuleCall_2_2_0()); }
	rulePivotInClauseAny{ after(grammarAccess.getPivotInClauseAccess().getPinanyPivotInClauseAnyParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__PcolsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getPcolsPivotColumnsParserRuleCall_3_0()); }
	rulePivotColumns{ after(grammarAccess.getUnpivotTableAccess().getPcolsPivotColumnsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__PforAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getPforPivotForClauseParserRuleCall_4_0()); }
	rulePivotForClause{ after(grammarAccess.getUnpivotTableAccess().getPforPivotForClauseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotTable__InopAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotTableAccess().getInopUnpivotInClauseParserRuleCall_5_0()); }
	ruleUnpivotInClause{ after(grammarAccess.getUnpivotTableAccess().getInopUnpivotInClauseParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClause__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseAccess().getOpINKeyword_1_0()); }
(
{ before(grammarAccess.getUnpivotInClauseAccess().getOpINKeyword_1_0()); }

	IN 

{ after(grammarAccess.getUnpivotInClauseAccess().getOpINKeyword_1_0()); }
)

{ after(grammarAccess.getUnpivotInClauseAccess().getOpINKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClause__ArgsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_3_0()); }
	ruleUnpivotInClauseArgs{ after(grammarAccess.getUnpivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArgs__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgsAccess().getEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0()); }
	ruleUnpivotInClauseArg{ after(grammarAccess.getUnpivotInClauseArgsAccess().getEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArg__PcolsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgAccess().getPcolsPivotColumnsParserRuleCall_0_0()); }
	rulePivotColumns{ after(grammarAccess.getUnpivotInClauseArgAccess().getPcolsPivotColumnsParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnpivotInClauseArg__CfulsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnpivotInClauseArgAccess().getCfulsPivotColumnsParserRuleCall_1_1_0()); }
	rulePivotColumns{ after(grammarAccess.getUnpivotInClauseArgAccess().getCfulsPivotColumnsParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCols__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColsAccess().getEntriesPivotColParserRuleCall_1_1_1_0()); }
	rulePivotCol{ after(grammarAccess.getPivotColsAccess().getEntriesPivotColParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PivotCol__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPivotColAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
	ruleDbObjectName{ after(grammarAccess.getPivotColAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
	ruleDbObjectName{ after(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__DbnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0()); }
	ruleDBID{ after(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectName__DbnameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0()); }
	ruleDBID{ after(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0()); }
	ruleOrderByColumnFull{ after(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__ColOrderAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0()); }
	ruleColumnFull{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__ColOrderIntAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderIntUNSIGNEDTerminalRuleCall_0_1_0()); }
	RULE_UNSIGNED{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderIntUNSIGNEDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__DirectionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionAlternatives_1_0()); }
(rule__OrderByColumnFull__DirectionAlternatives_1_0)
{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0()); }
	ruleGroupByColumnFull{ after(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__ColGrByAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0_0()); }
	ruleColumnFull{ after(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__GbFunctionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getGbFunctionOperandFunctionParserRuleCall_1_0()); }
	ruleOperandFunction{ after(grammarAccess.getGroupByColumnFullAccess().getGbFunctionOperandFunctionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__GrByIntAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getGrByIntUNSIGNEDTerminalRuleCall_2_0()); }
	RULE_UNSIGNED{ after(grammarAccess.getGroupByColumnFullAccess().getGrByIntUNSIGNEDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__EntriesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0()); }
	ruleExpressionFragmentSecond{ after(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__CAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCAlternatives_0_0_0()); }
(rule__ExpressionFragmentSecond__CAlternatives_0_0_0)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getCAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__EfragAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0()); }
	ruleExpressionFragment{ after(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__NotPrmAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0()); }
	RULE_JRNPARAM{ after(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__ExpgroupAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0()); }
	ruleExpressionGroup{ after(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__XexpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpAlternatives_2_0()); }
(rule__ExpressionFragment__XexpAlternatives_2_0)
{ after(grammarAccess.getExpressionFragmentAccess().getXexpAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__NotPrmAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0()); }
	RULE_JRNPARAM{ after(grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__InAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getInInOperatorParserRuleCall_4_0()); }
	ruleInOperator{ after(grammarAccess.getExpressionFragmentAccess().getInInOperatorParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__ExistsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getExistsExistsOperatorParserRuleCall_5_0()); }
	ruleExistsOperator{ after(grammarAccess.getExpressionFragmentAccess().getExistsExistsOperatorParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__IsnotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getIsnotAlternatives_1_0()); }
(rule__ExpressionGroup__IsnotAlternatives_1_0)
{ after(grammarAccess.getExpressionGroupAccess().getIsnotAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__ExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_3_0()); }
	ruleFullExpression{ after(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__XfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_3_0()); }
	ruleXFunction{ after(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__ColAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getColOperandGroupParserRuleCall_5_0()); }
	ruleOperandGroup{ after(grammarAccess.getXExpressionAccess().getColOperandGroupParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__PrmAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
	ruleXExpressionParams{ after(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___XfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_3_0()); }
	ruleXFunction{ after(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___ColAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getColOperandGroupParserRuleCall_5_0()); }
	ruleOperandGroup{ after(grammarAccess.getXExpression_Access().getColOperandGroupParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___PrmAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
	ruleXExpressionParams{ after(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0()); }
	ruleJRParameter{ after(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JRParameter__JrprmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Op1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0()); }
	ruleOperand{ after(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__IsnullAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getIsnullAlternatives_1_0_0()); }
(rule__Expression__IsnullAlternatives_1_0_0)
{ after(grammarAccess.getExpressionAccess().getIsnullAlternatives_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__InAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0()); }
	ruleInOperator{ after(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExistsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExistsExistsOperatorParserRuleCall_1_2_0()); }
	ruleExistsOperator{ after(grammarAccess.getExpressionAccess().getExistsExistsOperatorParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__BetweenAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_3_0()); }
	ruleBetween{ after(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LikeAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_4_0()); }
	ruleLike{ after(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__CompAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_5_0()); }
	ruleComparison{ after(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAlternatives_0_0()); }
(rule__Comparison__OperatorAlternatives_0_0)
{ after(grammarAccess.getComparisonAccess().getOperatorAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SubOperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getSubOperatorAlternatives_1_0()); }
(rule__Comparison__SubOperatorAlternatives_1_0)
{ after(grammarAccess.getComparisonAccess().getSubOperatorAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Op2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0()); }
	ruleOperand{ after(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Like__OpLikeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOpLikeAlternatives_0_0()); }
(rule__Like__OpLikeAlternatives_0_0)
{ after(grammarAccess.getLikeAccess().getOpLikeAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Like__Op2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0()); }
	ruleLikeOperand{ after(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__Op2Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0()); }
	ruleStringOperand{ after(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__Fop2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0()); }
	ruleOperandFunction{ after(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__FcastAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0()); }
	ruleOpFunctionCast{ after(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__FparamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getFparamParameterOperandParserRuleCall_3_0()); }
	ruleParameterOperand{ after(grammarAccess.getLikeOperandAccess().getFparamParameterOperandParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__OpBetweenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOpBetweenAlternatives_0_0()); }
(rule__Between__OpBetweenAlternatives_0_0)
{ after(grammarAccess.getBetweenAccess().getOpBetweenAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Op2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp2OperandGroupParserRuleCall_1_0()); }
	ruleOperandGroup{ after(grammarAccess.getBetweenAccess().getOp2OperandGroupParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Op3Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp3OperandGroupParserRuleCall_3_0()); }
	ruleOperandGroup{ after(grammarAccess.getBetweenAccess().getOp3OperandGroupParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpAlternatives_1_0()); }
(rule__InOperator__OpAlternatives_1_0)
{ after(grammarAccess.getInOperatorAccess().getOpAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__SubqueryAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__OpListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0()); }
	ruleOperandListGroup{ after(grammarAccess.getInOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getOpAlternatives_1_0()); }
(rule__ExistsOperator__OpAlternatives_1_0)
{ after(grammarAccess.getExistsOperatorAccess().getOpAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__SubqueryAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getExistsOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsOperator__OpListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0()); }
	ruleOperandListGroup{ after(grammarAccess.getExistsOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandListGroup__OpGroupAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListGroupAccess().getOpGroupOperandListParserRuleCall_1_0()); }
	ruleOperandList{ after(grammarAccess.getOperandListGroupAccess().getOpGroupOperandListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0()); }
	ruleScalarOperand{ after(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Op1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0()); }
	ruleOperandFragment{ after(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0()); }
	ruleOperandFragment{ after(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__ColumnAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0()); }
	ruleColumnOperand{ after(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__XopAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0()); }
	ruleXOperandFragment{ after(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__SubqAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__FcastAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0()); }
	ruleOpFunctionCast{ after(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__FextAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getFextFunctionExtractParserRuleCall_4_0()); }
	ruleFunctionExtract{ after(grammarAccess.getOperandFragmentAccess().getFextFunctionExtractParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__FuncAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_5_0()); }
	ruleOperandFunction{ after(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__SqlcaseAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_6_0()); }
	ruleSQLCASE{ after(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__FnameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0()); }
	ruleFNAME{ after(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__StarAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getStarSTARTerminalRuleCall_2_0_0()); }
	RULE_STAR{ after(grammarAccess.getOperandFunctionAccess().getStarSTARTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__ArgsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0()); }
	ruleOpFunctionArg{ after(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__FanAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getFanFunctionAnalyticalParserRuleCall_4_0()); }
	ruleFunctionAnalytical{ after(grammarAccess.getOperandFunctionAccess().getFanFunctionAnalyticalParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__VAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getVEXTRACT_VALUESEnumRuleCall_2_0()); }
	ruleEXTRACT_VALUES{ after(grammarAccess.getFunctionExtractAccess().getVEXTRACT_VALUESEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionExtract__OperandAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionExtractAccess().getOperandOperandGroupParserRuleCall_4_0()); }
	ruleOperandGroup{ after(grammarAccess.getFunctionExtractAccess().getOperandOperandGroupParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAnalytical__AnClauseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAnalyticalAccess().getAnClauseAnalyticClauseParserRuleCall_2_0()); }
	ruleAnalyticClause{ after(grammarAccess.getFunctionAnalyticalAccess().getAnClauseAnalyticClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__AbcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getAbcQueryPartitionClauseParserRuleCall_1_0()); }
	ruleQueryPartitionClause{ after(grammarAccess.getAnalyticClauseAccess().getAbcQueryPartitionClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__ObcAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getObcOrderByClauseParserRuleCall_2_0_0()); }
	ruleOrderByClause{ after(grammarAccess.getAnalyticClauseAccess().getObcOrderByClauseParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticClause__WincAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticClauseAccess().getWincWindowingClauseParserRuleCall_2_1_0()); }
	ruleWindowingClause{ after(grammarAccess.getAnalyticClauseAccess().getWincWindowingClauseParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseBetween__WcoPAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseBetweenAccess().getWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0()); }
	ruleWindowingClauseOperandPreceding{ after(grammarAccess.getWindowingClauseBetweenAccess().getWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseBetween__WcoFAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseBetweenAccess().getWcoFWindowingClauseOperandFollowingParserRuleCall_3_0()); }
	ruleWindowingClauseOperandFollowing{ after(grammarAccess.getWindowingClauseBetweenAccess().getWcoFWindowingClauseOperandFollowingParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandFollowing__ExpAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandFollowingAccess().getExpAnalyticExprArgParserRuleCall_1_2_0_0()); }
	ruleAnalyticExprArg{ after(grammarAccess.getWindowingClauseOperandFollowingAccess().getExpAnalyticExprArgParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WindowingClauseOperandPreceding__ExprAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWindowingClauseOperandPrecedingAccess().getExprAnalyticExprArgParserRuleCall_1_2_0_0()); }
	ruleAnalyticExprArg{ after(grammarAccess.getWindowingClauseOperandPrecedingAccess().getExprAnalyticExprArgParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__ArgsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getArgsOrderByClauseArgsParserRuleCall_1_0()); }
	ruleOrderByClauseArgs{ after(grammarAccess.getOrderByClauseAccess().getArgsOrderByClauseArgsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArgs__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgsAccess().getEntriesOrderByClauseArgParserRuleCall_1_1_1_0()); }
	ruleOrderByClauseArg{ after(grammarAccess.getOrderByClauseArgsAccess().getEntriesOrderByClauseArgParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClauseArg__ColAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseArgAccess().getColAnalyticExprArgParserRuleCall_0_0()); }
	ruleAnalyticExprArg{ after(grammarAccess.getOrderByClauseArgAccess().getColAnalyticExprArgParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QueryPartitionClause__ArgsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryPartitionClauseAccess().getArgsAnalyticExprArgsParserRuleCall_1_0_0()); }
	ruleAnalyticExprArgs{ after(grammarAccess.getQueryPartitionClauseAccess().getArgsAnalyticExprArgsParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArgs__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgsAccess().getEntriesAnalyticExprArgParserRuleCall_1_1_1_0()); }
	ruleAnalyticExprArg{ after(grammarAccess.getAnalyticExprArgsAccess().getEntriesAnalyticExprArgParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArg__CeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgAccess().getCeOperandParserRuleCall_0_0()); }
	ruleOperand{ after(grammarAccess.getAnalyticExprArgAccess().getCeOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnalyticExprArg__ColAliasAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalyticExprArgAccess().getColAliasDbObjectNameParserRuleCall_1_0()); }
	ruleDbObjectName{ after(grammarAccess.getAnalyticExprArgAccess().getColAliasDbObjectNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0()); }
	ruleOpFunctionArgOperand{ after(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgOperand__OpAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpAlternatives_0()); }
(rule__OpFunctionArgOperand__OpAlternatives_0)
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getOpOperandGroupParserRuleCall_1_0()); }
	ruleOperandGroup{ after(grammarAccess.getOpFunctionCastAccess().getOpOperandGroupParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__PAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getPINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getOpFunctionCastAccess().getPINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__P2Assignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getP2INTTerminalRuleCall_4_2_1_0()); }
	RULE_INT{ after(grammarAccess.getOpFunctionCastAccess().getP2INTTerminalRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0()); }
	ruleParameterOperand{ after(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__EparamAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0()); }
	ruleExclamationParameterOperand{ after(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__ScalarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getScalarScalarNumberOperandParserRuleCall_2_0()); }
	ruleScalarNumberOperand{ after(grammarAccess.getXOperandFragmentAccess().getScalarScalarNumberOperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterOperand__PrmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0()); }
	RULE_JRPARAM{ after(grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExclamationParameterOperand__PrmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0()); }
	RULE_JRNPARAM{ after(grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOperand__CfullAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0_0()); }
	ruleColumnFull{ after(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOperand__OraAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOperandAccess().getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0()); }
(
{ before(grammarAccess.getColumnOperandAccess().getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0()); }

	LeftParenthesisPlusSignRightParenthesis 

{ after(grammarAccess.getColumnOperandAccess().getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0()); }
)

{ after(grammarAccess.getColumnOperandAccess().getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__SelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0()); }
	ruleSelectQuery{ after(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SostrAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_0_0()); }
	ruleStringOperand{ after(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SodblAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_1_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SodateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_2_0()); }
	RULE_DATE{ after(grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SotimeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_3_0()); }
	RULE_TIME{ after(grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SodtAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_4_0()); }
	RULE_TIMESTAMP{ after(grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNumberOperand__SoUIntAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNumberOperandAccess().getSoUIntUNSIGNEDTerminalRuleCall_0_0()); }
	RULE_UNSIGNED{ after(grammarAccess.getScalarNumberOperandAccess().getSoUIntUNSIGNEDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNumberOperand__SointAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNumberOperandAccess().getSointINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getScalarNumberOperandAccess().getSointINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNumberOperand__SodblAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNumberOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getScalarNumberOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNumberOperand__SostrAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNumberOperandAccess().getSostrStringOperandParserRuleCall_3_0()); }
	ruleStringOperand{ after(grammarAccess.getScalarNumberOperandAccess().getSostrStringOperandParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__WhenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0()); }
	ruleSQLCaseWhens{ after(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__EntriesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0()); }
	ruleSqlCaseWhen{ after(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__TexpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getTexpOperandGroupParserRuleCall_3_0()); }
	ruleOperandGroup{ after(grammarAccess.getSqlCaseWhenAccess().getTexpOperandGroupParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__EexpAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getEexpOperandGroupParserRuleCall_4_1_0()); }
	ruleOperandGroup{ after(grammarAccess.getSqlCaseWhenAccess().getEexpOperandGroupParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__IntegerAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getIntegerINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerValueAccess().getIntegerINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


