/*
* generated by Xtext
*/
grammar InternalSql;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.jaspersoft.studio.data.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.jaspersoft.studio.data.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.jaspersoft.studio.data.services.SqlGrammarAccess;

}

@parser::members {
 
 	private SqlGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SqlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatabase
entryRuleDatabase 
:
{ before(grammarAccess.getDatabaseRule()); }
	 ruleDatabase
{ after(grammarAccess.getDatabaseRule()); } 
	 EOF 
;

// Rule Database
ruleDatabase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatabaseAccess().getDbNameAssignment()); }
(rule__Database__DbNameAssignment)
{ after(grammarAccess.getDatabaseAccess().getDbNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumn
entryRuleColumn 
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnAccess().getColAssignment()); }
(rule__Column__ColAssignment)
{ after(grammarAccess.getColumnAccess().getColAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnOrAlias
entryRuleColumnOrAlias 
:
{ before(grammarAccess.getColumnOrAliasRule()); }
	 ruleColumnOrAlias
{ after(grammarAccess.getColumnOrAliasRule()); } 
	 EOF 
;

// Rule ColumnOrAlias
ruleColumnOrAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
(rule__ColumnOrAlias__Alternatives)
{ after(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnFull
entryRuleColumnFull 
:
{ before(grammarAccess.getColumnFullRule()); }
	 ruleColumnFull
{ after(grammarAccess.getColumnFullRule()); } 
	 EOF 
;

// Rule ColumnFull
ruleColumnFull
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnFullAccess().getGroup()); }
(rule__ColumnFull__Group__0)
{ after(grammarAccess.getColumnFullAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereEntry
entryRuleWhereEntry 
:
{ before(grammarAccess.getWhereEntryRule()); }
	 ruleWhereEntry
{ after(grammarAccess.getWhereEntryRule()); } 
	 EOF 
;

// Rule WhereEntry
ruleWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereEntryAccess().getGroup()); }
(rule__WhereEntry__Group__0)
{ after(grammarAccess.getWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndWhereEntry
entryRuleAndWhereEntry 
:
{ before(grammarAccess.getAndWhereEntryRule()); }
	 ruleAndWhereEntry
{ after(grammarAccess.getAndWhereEntryRule()); } 
	 EOF 
;

// Rule AndWhereEntry
ruleAndWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup()); }
(rule__AndWhereEntry__Group__0)
{ after(grammarAccess.getAndWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcreteWhereEntry
entryRuleConcreteWhereEntry 
:
{ before(grammarAccess.getConcreteWhereEntryRule()); }
	 ruleConcreteWhereEntry
{ after(grammarAccess.getConcreteWhereEntryRule()); } 
	 EOF 
;

// Rule ConcreteWhereEntry
ruleConcreteWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcreteWhereEntryAccess().getAlternatives()); }
(rule__ConcreteWhereEntry__Alternatives)
{ after(grammarAccess.getConcreteWhereEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParWhereEntry
entryRuleParWhereEntry 
:
{ before(grammarAccess.getParWhereEntryRule()); }
	 ruleParWhereEntry
{ after(grammarAccess.getParWhereEntryRule()); } 
	 EOF 
;

// Rule ParWhereEntry
ruleParWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParWhereEntryAccess().getGroup()); }
(rule__ParWhereEntry__Group__0)
{ after(grammarAccess.getParWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionWhereEntry
entryRuleExpressionWhereEntry 
:
{ before(grammarAccess.getExpressionWhereEntryRule()); }
	 ruleExpressionWhereEntry
{ after(grammarAccess.getExpressionWhereEntryRule()); } 
	 EOF 
;

// Rule ExpressionWhereEntry
ruleExpressionWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getAlternatives()); }
(rule__ExpressionWhereEntry__Alternatives)
{ after(grammarAccess.getExpressionWhereEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleExpressionWhereEntry
entryRuleSingleExpressionWhereEntry 
:
{ before(grammarAccess.getSingleExpressionWhereEntryRule()); }
	 ruleSingleExpressionWhereEntry
{ after(grammarAccess.getSingleExpressionWhereEntryRule()); } 
	 EOF 
;

// Rule SingleExpressionWhereEntry
ruleSingleExpressionWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getGroup()); }
(rule__SingleExpressionWhereEntry__Group__0)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReplacableValue
entryRuleReplacableValue 
:
{ before(grammarAccess.getReplacableValueRule()); }
	 ruleReplacableValue
{ after(grammarAccess.getReplacableValueRule()); } 
	 EOF 
;

// Rule ReplacableValue
ruleReplacableValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReplacableValueAccess().getValueAssignment()); }
(rule__ReplacableValue__ValueAssignment)
{ after(grammarAccess.getReplacableValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleExpression
entryRuleDoubleExpression 
:
{ before(grammarAccess.getDoubleExpressionRule()); }
	 ruleDoubleExpression
{ after(grammarAccess.getDoubleExpressionRule()); } 
	 EOF 
;

// Rule DoubleExpression
ruleDoubleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleExpressionAccess().getValueAssignment()); }
(rule__DoubleExpression__ValueAssignment)
{ after(grammarAccess.getDoubleExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongExpression
entryRuleLongExpression 
:
{ before(grammarAccess.getLongExpressionRule()); }
	 ruleLongExpression
{ after(grammarAccess.getLongExpressionRule()); } 
	 EOF 
;

// Rule LongExpression
ruleLongExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongExpressionAccess().getValueAssignment()); }
(rule__LongExpression__ValueAssignment)
{ after(grammarAccess.getLongExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpression
entryRuleStringExpression 
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
(rule__StringExpression__ValueAssignment)
{ after(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullExpression
entryRuleNullExpression 
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
(rule__NullExpression__ValueAssignment)
{ after(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateExpression
entryRuleDateExpression 
:
{ before(grammarAccess.getDateExpressionRule()); }
	 ruleDateExpression
{ after(grammarAccess.getDateExpressionRule()); } 
	 EOF 
;

// Rule DateExpression
ruleDateExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateExpressionAccess().getValueAssignment()); }
(rule__DateExpression__ValueAssignment)
{ after(grammarAccess.getDateExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
(rule__BooleanExpression__Alternatives)
{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiExpressionWhereEntry
entryRuleMultiExpressionWhereEntry 
:
{ before(grammarAccess.getMultiExpressionWhereEntryRule()); }
	 ruleMultiExpressionWhereEntry
{ after(grammarAccess.getMultiExpressionWhereEntryRule()); } 
	 EOF 
;

// Rule MultiExpressionWhereEntry
ruleMultiExpressionWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getGroup()); }
(rule__MultiExpressionWhereEntry__Group__0)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayExpression
entryRuleArrayExpression 
:
{ before(grammarAccess.getArrayExpressionRule()); }
	 ruleArrayExpression
{ after(grammarAccess.getArrayExpressionRule()); } 
	 EOF 
;

// Rule ArrayExpression
ruleArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayExpressionAccess().getAlternatives()); }
(rule__ArrayExpression__Alternatives)
{ after(grammarAccess.getArrayExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleArrayExpression
entryRuleDoubleArrayExpression 
:
{ before(grammarAccess.getDoubleArrayExpressionRule()); }
	 ruleDoubleArrayExpression
{ after(grammarAccess.getDoubleArrayExpressionRule()); } 
	 EOF 
;

// Rule DoubleArrayExpression
ruleDoubleArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getGroup()); }
(rule__DoubleArrayExpression__Group__0)
{ after(grammarAccess.getDoubleArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongArrayExpression
entryRuleLongArrayExpression 
:
{ before(grammarAccess.getLongArrayExpressionRule()); }
	 ruleLongArrayExpression
{ after(grammarAccess.getLongArrayExpressionRule()); } 
	 EOF 
;

// Rule LongArrayExpression
ruleLongArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getGroup()); }
(rule__LongArrayExpression__Group__0)
{ after(grammarAccess.getLongArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringArrayExpression
entryRuleStringArrayExpression 
:
{ before(grammarAccess.getStringArrayExpressionRule()); }
	 ruleStringArrayExpression
{ after(grammarAccess.getStringArrayExpressionRule()); } 
	 EOF 
;

// Rule StringArrayExpression
ruleStringArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getGroup()); }
(rule__StringArrayExpression__Group__0)
{ after(grammarAccess.getStringArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullArrayExpression
entryRuleNullArrayExpression 
:
{ before(grammarAccess.getNullArrayExpressionRule()); }
	 ruleNullArrayExpression
{ after(grammarAccess.getNullArrayExpressionRule()); } 
	 EOF 
;

// Rule NullArrayExpression
ruleNullArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getGroup()); }
(rule__NullArrayExpression__Group__0)
{ after(grammarAccess.getNullArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateArrayExpression
entryRuleDateArrayExpression 
:
{ before(grammarAccess.getDateArrayExpressionRule()); }
	 ruleDateArrayExpression
{ after(grammarAccess.getDateArrayExpressionRule()); } 
	 EOF 
;

// Rule DateArrayExpression
ruleDateArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getGroup()); }
(rule__DateArrayExpression__Group__0)
{ after(grammarAccess.getDateArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanArrayExpression
entryRuleBooleanArrayExpression 
:
{ before(grammarAccess.getBooleanArrayExpressionRule()); }
	 ruleBooleanArrayExpression
{ after(grammarAccess.getBooleanArrayExpressionRule()); } 
	 EOF 
;

// Rule BooleanArrayExpression
ruleBooleanArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getGroup()); }
(rule__BooleanArrayExpression__Group__0)
{ after(grammarAccess.getBooleanArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ArrayOperator
ruleArrayOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayOperatorAccess().getAlternatives()); }
(rule__ArrayOperator__Alternatives)
{ after(grammarAccess.getArrayOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ColumnOrAlias__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_0()); }
	ruleColumnFull
{ after(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getGroup_1()); }
(rule__ColumnOrAlias__Group_1__0)
{ after(grammarAccess.getColumnOrAliasAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getGroup_2()); }
(rule__ColumnOrAlias__Group_2__0)
{ after(grammarAccess.getColumnOrAliasAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcreteWhereEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0()); }
	ruleParWhereEntry
{ after(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
	ruleExpressionWhereEntry
{ after(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getSingleExpressionWhereEntryParserRuleCall_0()); }
	ruleSingleExpressionWhereEntry
{ after(grammarAccess.getExpressionWhereEntryAccess().getSingleExpressionWhereEntryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionWhereEntryAccess().getMultiExpressionWhereEntryParserRuleCall_1()); }
	ruleMultiExpressionWhereEntry
{ after(grammarAccess.getExpressionWhereEntryAccess().getMultiExpressionWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0()); }
	ruleDoubleExpression
{ after(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1()); }
	ruleLongExpression
{ after(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2()); }
	ruleStringExpression
{ after(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3()); }
	ruleNullExpression
{ after(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4()); }
	ruleDateExpression
{ after(grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6()); }
	ruleReplacableValue
{ after(grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_0()); }
(rule__BooleanExpression__TrueAssignment_0)
{ after(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_1()); }
(rule__BooleanExpression__TrueAssignment_1)
{ after(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayExpressionAccess().getDoubleArrayExpressionParserRuleCall_0()); }
	ruleDoubleArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getDoubleArrayExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getLongArrayExpressionParserRuleCall_1()); }
	ruleLongArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getLongArrayExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getStringArrayExpressionParserRuleCall_2()); }
	ruleStringArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getStringArrayExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getNullArrayExpressionParserRuleCall_3()); }
	ruleNullArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getNullArrayExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getDateArrayExpressionParserRuleCall_4()); }
	ruleDateArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getDateArrayExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getBooleanArrayExpressionParserRuleCall_5()); }
	ruleBooleanArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getBooleanArrayExpressionParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayOperatorAccess().getSql_inEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getArrayOperatorAccess().getSql_inEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getArrayOperatorAccess().getSql_notInEnumLiteralDeclaration_1()); }
(	'not in' 
)
{ after(grammarAccess.getArrayOperatorAccess().getSql_notInEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
(	'>' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
(	'=' 
)
{ after(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6()); }
(	'like' 
)
{ after(grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7()); }
(	'not like' 
)
{ after(grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8()); }
(	'not in' 
)
{ after(grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9()); }
(	'in' 
)
{ after(grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSELECTKeyword_0()); }

	'SELECT' 

{ after(grammarAccess.getModelAccess().getSELECTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getColAssignment_1()); }
(rule__Model__ColAssignment_1)
{ after(grammarAccess.getModelAccess().getColAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFROMKeyword_2()); }

	'FROM' 

{ after(grammarAccess.getModelAccess().getFROMKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDbAssignment_3()); }
(rule__Model__DbAssignment_3)
{ after(grammarAccess.getModelAccess().getDbAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_4()); }
(rule__Model__Group_4__0)?
{ after(grammarAccess.getModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Model__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__0__Impl
	rule__Model__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWHEREKeyword_4_0()); }

	'WHERE' 

{ after(grammarAccess.getModelAccess().getWHEREKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWhereEntryAssignment_4_1()); }
(rule__Model__WhereEntryAssignment_4_1)
{ after(grammarAccess.getModelAccess().getWhereEntryAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnOrAlias__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_1__0__Impl
	rule__ColumnOrAlias__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_1_0()); }
	ruleColumnFull
{ after(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_1__1__Impl
	rule__ColumnOrAlias__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getASKeyword_1_1()); }

	'AS' 

{ after(grammarAccess.getColumnOrAliasAccess().getASKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getIDTerminalRuleCall_1_2()); }
	RULE_ID
{ after(grammarAccess.getColumnOrAliasAccess().getIDTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ColumnOrAlias__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_2__0__Impl
	rule__ColumnOrAlias__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_2_0()); }
	ruleColumnFull
{ after(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
{ after(grammarAccess.getColumnOrAliasAccess().getIDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnFull__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group__0__Impl
	rule__ColumnFull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getColumnFullAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getGroup_1()); }
(rule__ColumnFull__Group_1__0)*
{ after(grammarAccess.getColumnFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__0__Impl
	rule__ColumnFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getColumnFullAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group__0__Impl
	rule__WhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0()); }
	ruleAndWhereEntry
{ after(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1()); }
(rule__WhereEntry__Group_1__0)?
{ after(grammarAccess.getWhereEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1__0__Impl
	rule__WhereEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
(rule__WhereEntry__Group_1_1__0)
{ after(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
(rule__WhereEntry__Group_1_1__0)*
{ after(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1_1__0__Impl
	rule__WhereEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0()); }

	'OR' 

{ after(grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__WhereEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group__0__Impl
	rule__AndWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0()); }
	ruleConcreteWhereEntry
{ after(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1()); }
(rule__AndWhereEntry__Group_1__0)?
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1__0__Impl
	rule__AndWhereEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
(rule__AndWhereEntry__Group_1_1__0)
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
(rule__AndWhereEntry__Group_1_1__0)*
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1_1__0__Impl
	rule__AndWhereEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0()); }

	'AND' 

{ after(grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__AndWhereEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__0__Impl
	rule__ParWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__1__Impl
	rule__ParWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1()); }
	ruleWhereEntry
{ after(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SingleExpressionWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleExpressionWhereEntry__Group__0__Impl
	rule__SingleExpressionWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getNameAssignment_0()); }
(rule__SingleExpressionWhereEntry__NameAssignment_0)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleExpressionWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleExpressionWhereEntry__Group__1__Impl
	rule__SingleExpressionWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorAssignment_1()); }
(rule__SingleExpressionWhereEntry__OperatorAssignment_1)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleExpressionWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleExpressionWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsAssignment_2()); }
(rule__SingleExpressionWhereEntry__RhsAssignment_2)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiExpressionWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiExpressionWhereEntry__Group__0__Impl
	rule__MultiExpressionWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getNameAssignment_0()); }
(rule__MultiExpressionWhereEntry__NameAssignment_0)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiExpressionWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiExpressionWhereEntry__Group__1__Impl
	rule__MultiExpressionWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorAssignment_1()); }
(rule__MultiExpressionWhereEntry__OperatorAssignment_1)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiExpressionWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiExpressionWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsAssignment_2()); }
(rule__MultiExpressionWhereEntry__RhsAssignment_2)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DoubleArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__0__Impl
	rule__DoubleArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getDoubleArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__1__Impl
	rule__DoubleArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_1()); }
(rule__DoubleArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__2__Impl
	rule__DoubleArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getGroup_2()); }
(rule__DoubleArrayExpression__Group_2__0)*
{ after(grammarAccess.getDoubleArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getDoubleArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DoubleArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group_2__0__Impl
	rule__DoubleArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDoubleArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__DoubleArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LongArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__0__Impl
	rule__LongArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getLongArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__1__Impl
	rule__LongArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_1()); }
(rule__LongArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__2__Impl
	rule__LongArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getGroup_2()); }
(rule__LongArrayExpression__Group_2__0)*
{ after(grammarAccess.getLongArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getLongArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LongArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group_2__0__Impl
	rule__LongArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getLongArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__LongArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__0__Impl
	rule__StringArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getStringArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__1__Impl
	rule__StringArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_1()); }
(rule__StringArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__2__Impl
	rule__StringArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getGroup_2()); }
(rule__StringArrayExpression__Group_2__0)*
{ after(grammarAccess.getStringArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getStringArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group_2__0__Impl
	rule__StringArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getStringArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__StringArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NullArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__0__Impl
	rule__NullArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getNullArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__1__Impl
	rule__NullArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_1()); }
(rule__NullArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__2__Impl
	rule__NullArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getGroup_2()); }
(rule__NullArrayExpression__Group_2__0)*
{ after(grammarAccess.getNullArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getNullArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NullArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group_2__0__Impl
	rule__NullArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getNullArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__NullArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__0__Impl
	rule__DateArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getDateArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__1__Impl
	rule__DateArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_1()); }
(rule__DateArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__2__Impl
	rule__DateArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getGroup_2()); }
(rule__DateArrayExpression__Group_2__0)*
{ after(grammarAccess.getDateArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getDateArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DateArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group_2__0__Impl
	rule__DateArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDateArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__DateArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__0__Impl
	rule__BooleanArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getBooleanArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__1__Impl
	rule__BooleanArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_1()); }
(rule__BooleanArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__2__Impl
	rule__BooleanArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getGroup_2()); }
(rule__BooleanArrayExpression__Group_2__0)*
{ after(grammarAccess.getBooleanArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getBooleanArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BooleanArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group_2__0__Impl
	rule__BooleanArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getBooleanArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__BooleanArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ColAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getColColumnParserRuleCall_1_0()); }
	ruleColumn{ after(grammarAccess.getModelAccess().getColColumnParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DbAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDbDatabaseParserRuleCall_3_0()); }
	ruleDatabase{ after(grammarAccess.getModelAccess().getDbDatabaseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__WhereEntryAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0()); }
	ruleWhereEntry{ after(grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__DbNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__ColAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getColColumnOrAliasParserRuleCall_0()); }
	ruleColumnOrAlias{ after(grammarAccess.getColumnAccess().getColColumnOrAliasParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0()); }
	ruleAndWhereEntry{ after(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0()); }
	ruleConcreteWhereEntry{ after(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0()); }
	ruleOperator{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacableValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
(
{ before(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
)

{ after(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
(
{ before(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }

	'null' 

{ after(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
)

{ after(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0()); }
	RULE_DATE{ after(grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__TrueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
)

{ after(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__TrueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }

	'false' 

{ after(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
)

{ after(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorArrayOperatorEnumRuleCall_1_0()); }
	ruleArrayOperator{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorArrayOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsArrayExpressionParserRuleCall_2_0()); }
	ruleArrayExpression{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsArrayExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_1_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_1_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_2_1_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }

	'null' 

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }
)

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }

	'null' 

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }
)

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_1_0()); }
	RULE_DATE{ after(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_2_1_0()); }
	RULE_DATE{ after(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_1_0()); }
	RULE_BOOL{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_2_1_0()); }
	RULE_BOOL{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOL : ('true'|'false'|'TRUE'|'FALSE');

RULE_SINGED_LONG : '-'? ('0'..'9')+;

RULE_DATE : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'1' '0'..'9' '-' '0'..'3' '0'..'9';

RULE_SIGNED_DOUBLE : '-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


