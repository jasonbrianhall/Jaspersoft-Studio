/*
* generated by Xtext
*/
grammar InternalSql;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.jaspersoft.studio.data.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.jaspersoft.studio.data.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.jaspersoft.studio.data.services.SqlGrammarAccess;

}

@parser::members {
 
 	private SqlGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SqlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByColumns
entryRuleOrderByColumns 
:
{ before(grammarAccess.getOrderByColumnsRule()); }
	 ruleOrderByColumns
{ after(grammarAccess.getOrderByColumnsRule()); } 
	 EOF 
;

// Rule OrderByColumns
ruleOrderByColumns
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup()); }
(rule__OrderByColumns__Group__0)
{ after(grammarAccess.getOrderByColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByColumnFull
entryRuleOrderByColumnFull 
:
{ before(grammarAccess.getOrderByColumnFullRule()); }
	 ruleOrderByColumnFull
{ after(grammarAccess.getOrderByColumnFullRule()); } 
	 EOF 
;

// Rule OrderByColumnFull
ruleOrderByColumnFull
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getAlternatives()); }
(rule__OrderByColumnFull__Alternatives)
{ after(grammarAccess.getOrderByColumnFullAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupByColumns
entryRuleGroupByColumns 
:
{ before(grammarAccess.getGroupByColumnsRule()); }
	 ruleGroupByColumns
{ after(grammarAccess.getGroupByColumnsRule()); } 
	 EOF 
;

// Rule GroupByColumns
ruleGroupByColumns
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup()); }
(rule__GroupByColumns__Group__0)
{ after(grammarAccess.getGroupByColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupByColumnFull
entryRuleGroupByColumnFull 
:
{ before(grammarAccess.getGroupByColumnFullRule()); }
	 ruleGroupByColumnFull
{ after(grammarAccess.getGroupByColumnFullRule()); } 
	 EOF 
;

// Rule GroupByColumnFull
ruleGroupByColumnFull
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getAlternatives()); }
(rule__GroupByColumnFull__Alternatives)
{ after(grammarAccess.getGroupByColumnFullAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumns
entryRuleColumns 
:
{ before(grammarAccess.getColumnsRule()); }
	 ruleColumns
{ after(grammarAccess.getColumnsRule()); } 
	 EOF 
;

// Rule Columns
ruleColumns
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnsAccess().getGroup()); }
(rule__Columns__Group__0)
{ after(grammarAccess.getColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnOrAlias
entryRuleColumnOrAlias 
:
{ before(grammarAccess.getColumnOrAliasRule()); }
	 ruleColumnOrAlias
{ after(grammarAccess.getColumnOrAliasRule()); } 
	 EOF 
;

// Rule ColumnOrAlias
ruleColumnOrAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
(rule__ColumnOrAlias__Alternatives)
{ after(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnFull
entryRuleColumnFull 
:
{ before(grammarAccess.getColumnFullRule()); }
	 ruleColumnFull
{ after(grammarAccess.getColumnFullRule()); } 
	 EOF 
;

// Rule ColumnFull
ruleColumnFull
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnFullAccess().getAlternatives()); }
(rule__ColumnFull__Alternatives)
{ after(grammarAccess.getColumnFullAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnAlias
entryRuleColumnAlias 
:
{ before(grammarAccess.getColumnAliasRule()); }
	 ruleColumnAlias
{ after(grammarAccess.getColumnAliasRule()); } 
	 EOF 
;

// Rule ColumnAlias
ruleColumnAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnAliasAccess().getColAliasAssignment()); }
(rule__ColumnAlias__ColAliasAssignment)
{ after(grammarAccess.getColumnAliasAccess().getColAliasAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumn
entryRuleColumn 
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnAccess().getColNameAssignment()); }
(rule__Column__ColNameAssignment)
{ after(grammarAccess.getColumnAccess().getColNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTables
entryRuleTables 
:
{ before(grammarAccess.getTablesRule()); }
	 ruleTables
{ after(grammarAccess.getTablesRule()); } 
	 EOF 
;

// Rule Tables
ruleTables
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTablesAccess().getGroup()); }
(rule__Tables__Group__0)
{ after(grammarAccess.getTablesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableOrAlias
entryRuleTableOrAlias 
:
{ before(grammarAccess.getTableOrAliasRule()); }
	 ruleTableOrAlias
{ after(grammarAccess.getTableOrAliasRule()); } 
	 EOF 
;

// Rule TableOrAlias
ruleTableOrAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableOrAliasAccess().getAlternatives()); }
(rule__TableOrAlias__Alternatives)
{ after(grammarAccess.getTableOrAliasAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableFull
entryRuleTableFull 
:
{ before(grammarAccess.getTableFullRule()); }
	 ruleTableFull
{ after(grammarAccess.getTableFullRule()); } 
	 EOF 
;

// Rule TableFull
ruleTableFull
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableFullAccess().getAlternatives()); }
(rule__TableFull__Alternatives)
{ after(grammarAccess.getTableFullAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTable
entryRuleTable 
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableAccess().getTblAssignment()); }
(rule__Table__TblAssignment)
{ after(grammarAccess.getTableAccess().getTblAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableAlias
entryRuleTableAlias 
:
{ before(grammarAccess.getTableAliasRule()); }
	 ruleTableAlias
{ after(grammarAccess.getTableAliasRule()); } 
	 EOF 
;

// Rule TableAlias
ruleTableAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableAliasAccess().getTblAliasAssignment()); }
(rule__TableAlias__TblAliasAssignment)
{ after(grammarAccess.getTableAliasAccess().getTblAliasAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchema
entryRuleSchema 
:
{ before(grammarAccess.getSchemaRule()); }
	 ruleSchema
{ after(grammarAccess.getSchemaRule()); } 
	 EOF 
;

// Rule Schema
ruleSchema
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemaAccess().getAlternatives()); }
(rule__Schema__Alternatives)
{ after(grammarAccess.getSchemaAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatabase
entryRuleDatabase 
:
{ before(grammarAccess.getDatabaseRule()); }
	 ruleDatabase
{ after(grammarAccess.getDatabaseRule()); } 
	 EOF 
;

// Rule Database
ruleDatabase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatabaseAccess().getDbNameAssignment()); }
(rule__Database__DbNameAssignment)
{ after(grammarAccess.getDatabaseAccess().getDbNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereEntry
entryRuleWhereEntry 
:
{ before(grammarAccess.getWhereEntryRule()); }
	 ruleWhereEntry
{ after(grammarAccess.getWhereEntryRule()); } 
	 EOF 
;

// Rule WhereEntry
ruleWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereEntryAccess().getGroup()); }
(rule__WhereEntry__Group__0)
{ after(grammarAccess.getWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndWhereEntry
entryRuleAndWhereEntry 
:
{ before(grammarAccess.getAndWhereEntryRule()); }
	 ruleAndWhereEntry
{ after(grammarAccess.getAndWhereEntryRule()); } 
	 EOF 
;

// Rule AndWhereEntry
ruleAndWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup()); }
(rule__AndWhereEntry__Group__0)
{ after(grammarAccess.getAndWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcreteWhereEntry
entryRuleConcreteWhereEntry 
:
{ before(grammarAccess.getConcreteWhereEntryRule()); }
	 ruleConcreteWhereEntry
{ after(grammarAccess.getConcreteWhereEntryRule()); } 
	 EOF 
;

// Rule ConcreteWhereEntry
ruleConcreteWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcreteWhereEntryAccess().getAlternatives()); }
(rule__ConcreteWhereEntry__Alternatives)
{ after(grammarAccess.getConcreteWhereEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParWhereEntry
entryRuleParWhereEntry 
:
{ before(grammarAccess.getParWhereEntryRule()); }
	 ruleParWhereEntry
{ after(grammarAccess.getParWhereEntryRule()); } 
	 EOF 
;

// Rule ParWhereEntry
ruleParWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParWhereEntryAccess().getGroup()); }
(rule__ParWhereEntry__Group__0)
{ after(grammarAccess.getParWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHavingEntry
entryRuleHavingEntry 
:
{ before(grammarAccess.getHavingEntryRule()); }
	 ruleHavingEntry
{ after(grammarAccess.getHavingEntryRule()); } 
	 EOF 
;

// Rule HavingEntry
ruleHavingEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHavingEntryAccess().getGroup()); }
(rule__HavingEntry__Group__0)
{ after(grammarAccess.getHavingEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndHavingEntry
entryRuleAndHavingEntry 
:
{ before(grammarAccess.getAndHavingEntryRule()); }
	 ruleAndHavingEntry
{ after(grammarAccess.getAndHavingEntryRule()); } 
	 EOF 
;

// Rule AndHavingEntry
ruleAndHavingEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndHavingEntryAccess().getGroup()); }
(rule__AndHavingEntry__Group__0)
{ after(grammarAccess.getAndHavingEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcreteHavingEntry
entryRuleConcreteHavingEntry 
:
{ before(grammarAccess.getConcreteHavingEntryRule()); }
	 ruleConcreteHavingEntry
{ after(grammarAccess.getConcreteHavingEntryRule()); } 
	 EOF 
;

// Rule ConcreteHavingEntry
ruleConcreteHavingEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcreteHavingEntryAccess().getAlternatives()); }
(rule__ConcreteHavingEntry__Alternatives)
{ after(grammarAccess.getConcreteHavingEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParHavingEntry
entryRuleParHavingEntry 
:
{ before(grammarAccess.getParHavingEntryRule()); }
	 ruleParHavingEntry
{ after(grammarAccess.getParHavingEntryRule()); } 
	 EOF 
;

// Rule ParHavingEntry
ruleParHavingEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParHavingEntryAccess().getGroup()); }
(rule__ParHavingEntry__Group__0)
{ after(grammarAccess.getParHavingEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionWhereEntry
entryRuleExpressionWhereEntry 
:
{ before(grammarAccess.getExpressionWhereEntryRule()); }
	 ruleExpressionWhereEntry
{ after(grammarAccess.getExpressionWhereEntryRule()); } 
	 EOF 
;

// Rule ExpressionWhereEntry
ruleExpressionWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getAlternatives()); }
(rule__ExpressionWhereEntry__Alternatives)
{ after(grammarAccess.getExpressionWhereEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleExpressionWhereEntry
entryRuleSingleExpressionWhereEntry 
:
{ before(grammarAccess.getSingleExpressionWhereEntryRule()); }
	 ruleSingleExpressionWhereEntry
{ after(grammarAccess.getSingleExpressionWhereEntryRule()); } 
	 EOF 
;

// Rule SingleExpressionWhereEntry
ruleSingleExpressionWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getGroup()); }
(rule__SingleExpressionWhereEntry__Group__0)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReplacableValue
entryRuleReplacableValue 
:
{ before(grammarAccess.getReplacableValueRule()); }
	 ruleReplacableValue
{ after(grammarAccess.getReplacableValueRule()); } 
	 EOF 
;

// Rule ReplacableValue
ruleReplacableValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReplacableValueAccess().getValueAssignment()); }
(rule__ReplacableValue__ValueAssignment)
{ after(grammarAccess.getReplacableValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleExpression
entryRuleDoubleExpression 
:
{ before(grammarAccess.getDoubleExpressionRule()); }
	 ruleDoubleExpression
{ after(grammarAccess.getDoubleExpressionRule()); } 
	 EOF 
;

// Rule DoubleExpression
ruleDoubleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleExpressionAccess().getValueAssignment()); }
(rule__DoubleExpression__ValueAssignment)
{ after(grammarAccess.getDoubleExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongExpression
entryRuleLongExpression 
:
{ before(grammarAccess.getLongExpressionRule()); }
	 ruleLongExpression
{ after(grammarAccess.getLongExpressionRule()); } 
	 EOF 
;

// Rule LongExpression
ruleLongExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongExpressionAccess().getValueAssignment()); }
(rule__LongExpression__ValueAssignment)
{ after(grammarAccess.getLongExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpression
entryRuleStringExpression 
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
(rule__StringExpression__ValueAssignment)
{ after(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullExpression
entryRuleNullExpression 
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
(rule__NullExpression__ValueAssignment)
{ after(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateExpression
entryRuleDateExpression 
:
{ before(grammarAccess.getDateExpressionRule()); }
	 ruleDateExpression
{ after(grammarAccess.getDateExpressionRule()); } 
	 EOF 
;

// Rule DateExpression
ruleDateExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateExpressionAccess().getValueAssignment()); }
(rule__DateExpression__ValueAssignment)
{ after(grammarAccess.getDateExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
(rule__BooleanExpression__Alternatives)
{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiExpressionWhereEntry
entryRuleMultiExpressionWhereEntry 
:
{ before(grammarAccess.getMultiExpressionWhereEntryRule()); }
	 ruleMultiExpressionWhereEntry
{ after(grammarAccess.getMultiExpressionWhereEntryRule()); } 
	 EOF 
;

// Rule MultiExpressionWhereEntry
ruleMultiExpressionWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getGroup()); }
(rule__MultiExpressionWhereEntry__Group__0)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayExpression
entryRuleArrayExpression 
:
{ before(grammarAccess.getArrayExpressionRule()); }
	 ruleArrayExpression
{ after(grammarAccess.getArrayExpressionRule()); } 
	 EOF 
;

// Rule ArrayExpression
ruleArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayExpressionAccess().getAlternatives()); }
(rule__ArrayExpression__Alternatives)
{ after(grammarAccess.getArrayExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleArrayExpression
entryRuleDoubleArrayExpression 
:
{ before(grammarAccess.getDoubleArrayExpressionRule()); }
	 ruleDoubleArrayExpression
{ after(grammarAccess.getDoubleArrayExpressionRule()); } 
	 EOF 
;

// Rule DoubleArrayExpression
ruleDoubleArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getGroup()); }
(rule__DoubleArrayExpression__Group__0)
{ after(grammarAccess.getDoubleArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongArrayExpression
entryRuleLongArrayExpression 
:
{ before(grammarAccess.getLongArrayExpressionRule()); }
	 ruleLongArrayExpression
{ after(grammarAccess.getLongArrayExpressionRule()); } 
	 EOF 
;

// Rule LongArrayExpression
ruleLongArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getGroup()); }
(rule__LongArrayExpression__Group__0)
{ after(grammarAccess.getLongArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringArrayExpression
entryRuleStringArrayExpression 
:
{ before(grammarAccess.getStringArrayExpressionRule()); }
	 ruleStringArrayExpression
{ after(grammarAccess.getStringArrayExpressionRule()); } 
	 EOF 
;

// Rule StringArrayExpression
ruleStringArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getGroup()); }
(rule__StringArrayExpression__Group__0)
{ after(grammarAccess.getStringArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullArrayExpression
entryRuleNullArrayExpression 
:
{ before(grammarAccess.getNullArrayExpressionRule()); }
	 ruleNullArrayExpression
{ after(grammarAccess.getNullArrayExpressionRule()); } 
	 EOF 
;

// Rule NullArrayExpression
ruleNullArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getGroup()); }
(rule__NullArrayExpression__Group__0)
{ after(grammarAccess.getNullArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateArrayExpression
entryRuleDateArrayExpression 
:
{ before(grammarAccess.getDateArrayExpressionRule()); }
	 ruleDateArrayExpression
{ after(grammarAccess.getDateArrayExpressionRule()); } 
	 EOF 
;

// Rule DateArrayExpression
ruleDateArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getGroup()); }
(rule__DateArrayExpression__Group__0)
{ after(grammarAccess.getDateArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanArrayExpression
entryRuleBooleanArrayExpression 
:
{ before(grammarAccess.getBooleanArrayExpressionRule()); }
	 ruleBooleanArrayExpression
{ after(grammarAccess.getBooleanArrayExpressionRule()); } 
	 EOF 
;

// Rule BooleanArrayExpression
ruleBooleanArrayExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getGroup()); }
(rule__BooleanArrayExpression__Group__0)
{ after(grammarAccess.getBooleanArrayExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ArrayOperator
ruleArrayOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayOperatorAccess().getAlternatives()); }
(rule__ArrayOperator__Alternatives)
{ after(grammarAccess.getArrayOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__OrderByColumnFull__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_0()); }
(rule__OrderByColumnFull__ColOrderAssignment_0)
{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_0()); }
)

    |(
{ before(grammarAccess.getOrderByColumnFullAccess().getGroup_1()); }
(rule__OrderByColumnFull__Group_1__0)
{ after(grammarAccess.getOrderByColumnFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnAssignment_0()); }
(rule__GroupByColumnFull__GroupByColumnAssignment_0)
{ after(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnAssignment_0()); }
)

    |(
{ before(grammarAccess.getGroupByColumnFullAccess().getGroup_1()); }
(rule__GroupByColumnFull__Group_1__0)
{ after(grammarAccess.getGroupByColumnFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_0()); }
	ruleColumnFull
{ after(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getGroup_1()); }
(rule__ColumnOrAlias__Group_1__0)
{ after(grammarAccess.getColumnOrAliasAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getGroup_2()); }
(rule__ColumnOrAlias__Group_2__0)
{ after(grammarAccess.getColumnOrAliasAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getColNameAssignment_0()); }
(rule__ColumnFull__ColNameAssignment_0)
{ after(grammarAccess.getColumnFullAccess().getColNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getColumnFullAccess().getGroup_1()); }
(rule__ColumnFull__Group_1__0)
{ after(grammarAccess.getColumnFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_0()); }
	ruleTableFull
{ after(grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTableOrAliasAccess().getGroup_1()); }
(rule__TableOrAlias__Group_1__0)
{ after(grammarAccess.getTableOrAliasAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTableOrAliasAccess().getGroup_2()); }
(rule__TableOrAlias__Group_2__0)
{ after(grammarAccess.getTableOrAliasAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getGroup_0()); }
(rule__TableFull__Group_0__0)
{ after(grammarAccess.getTableFullAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTableFullAccess().getTblAssignment_1()); }
(rule__TableFull__TblAssignment_1)
{ after(grammarAccess.getTableFullAccess().getTblAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getGroup_0()); }
(rule__Schema__Group_0__0)
{ after(grammarAccess.getSchemaAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSchemaAccess().getSchemAssignment_1()); }
(rule__Schema__SchemAssignment_1)
{ after(grammarAccess.getSchemaAccess().getSchemAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcreteWhereEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0()); }
	ruleParWhereEntry
{ after(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
	ruleExpressionWhereEntry
{ after(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcreteHavingEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcreteHavingEntryAccess().getParHavingEntryParserRuleCall_0()); }
	ruleParHavingEntry
{ after(grammarAccess.getConcreteHavingEntryAccess().getParHavingEntryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConcreteHavingEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
	ruleExpressionWhereEntry
{ after(grammarAccess.getConcreteHavingEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getSingleExpressionWhereEntryParserRuleCall_0()); }
	ruleSingleExpressionWhereEntry
{ after(grammarAccess.getExpressionWhereEntryAccess().getSingleExpressionWhereEntryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionWhereEntryAccess().getMultiExpressionWhereEntryParserRuleCall_1()); }
	ruleMultiExpressionWhereEntry
{ after(grammarAccess.getExpressionWhereEntryAccess().getMultiExpressionWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0()); }
	ruleDoubleExpression
{ after(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1()); }
	ruleLongExpression
{ after(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2()); }
	ruleStringExpression
{ after(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3()); }
	ruleNullExpression
{ after(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4()); }
	ruleDateExpression
{ after(grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6()); }
	ruleReplacableValue
{ after(grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_0()); }
(rule__BooleanExpression__TrueAssignment_0)
{ after(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_1()); }
(rule__BooleanExpression__TrueAssignment_1)
{ after(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayExpressionAccess().getDoubleArrayExpressionParserRuleCall_0()); }
	ruleDoubleArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getDoubleArrayExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getLongArrayExpressionParserRuleCall_1()); }
	ruleLongArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getLongArrayExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getStringArrayExpressionParserRuleCall_2()); }
	ruleStringArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getStringArrayExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getNullArrayExpressionParserRuleCall_3()); }
	ruleNullArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getNullArrayExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getDateArrayExpressionParserRuleCall_4()); }
	ruleDateArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getDateArrayExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getArrayExpressionAccess().getBooleanArrayExpressionParserRuleCall_5()); }
	ruleBooleanArrayExpression
{ after(grammarAccess.getArrayExpressionAccess().getBooleanArrayExpressionParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayOperatorAccess().getSql_inEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getArrayOperatorAccess().getSql_inEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getArrayOperatorAccess().getSql_notInEnumLiteralDeclaration_1()); }
(	'not in' 
)
{ after(grammarAccess.getArrayOperatorAccess().getSql_notInEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
(	'>' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
(	'=' 
)
{ after(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6()); }
(	'like' 
)
{ after(grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7()); }
(	'not like' 
)
{ after(grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8()); }
(	'not in' 
)
{ after(grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9()); }
(	'in' 
)
{ after(grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSELECTKeyword_0()); }

	'SELECT' 

{ after(grammarAccess.getModelAccess().getSELECTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getColAssignment_1()); }
(rule__Model__ColAssignment_1)?
{ after(grammarAccess.getModelAccess().getColAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFROMKeyword_2()); }

	'FROM' 

{ after(grammarAccess.getModelAccess().getFROMKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTblAssignment_3()); }
(rule__Model__TblAssignment_3)
{ after(grammarAccess.getModelAccess().getTblAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_4()); }
(rule__Model__Group_4__0)?
{ after(grammarAccess.getModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__5__Impl
	rule__Model__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_5()); }
(rule__Model__Group_5__0)?
{ after(grammarAccess.getModelAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__6__Impl
	rule__Model__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_6()); }
(rule__Model__Group_6__0)?
{ after(grammarAccess.getModelAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_7()); }
(rule__Model__Group_7__0)?
{ after(grammarAccess.getModelAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Model__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__0__Impl
	rule__Model__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWHEREKeyword_4_0()); }

	'WHERE' 

{ after(grammarAccess.getModelAccess().getWHEREKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWhereEntryAssignment_4_1()); }
(rule__Model__WhereEntryAssignment_4_1)
{ after(grammarAccess.getModelAccess().getWhereEntryAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_5__0__Impl
	rule__Model__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGROUPBYKeyword_5_0()); }

	'GROUP BY' 

{ after(grammarAccess.getModelAccess().getGROUPBYKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroupByEntryAssignment_5_1()); }
(rule__Model__GroupByEntryAssignment_5_1)
{ after(grammarAccess.getModelAccess().getGroupByEntryAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_6__0__Impl
	rule__Model__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getHAVINGKeyword_6_0()); }

	'HAVING' 

{ after(grammarAccess.getModelAccess().getHAVINGKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getHavingEntryAssignment_6_1()); }
(rule__Model__HavingEntryAssignment_6_1)
{ after(grammarAccess.getModelAccess().getHavingEntryAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_7__0__Impl
	rule__Model__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getORDERBYKeyword_7_0()); }

	'ORDER BY' 

{ after(grammarAccess.getModelAccess().getORDERBYKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOrderByEntryAssignment_7_1()); }
(rule__Model__OrderByEntryAssignment_7_1)
{ after(grammarAccess.getModelAccess().getOrderByEntryAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group__0__Impl
	rule__OrderByColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0()); }
	ruleOrderByColumnFull
{ after(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1()); }
(rule__OrderByColumns__Group_1__0)?
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1__0__Impl
	rule__OrderByColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
(rule__OrderByColumns__Group_1_1__0)
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
(rule__OrderByColumns__Group_1_1__0)*
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1_1__0__Impl
	rule__OrderByColumns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__OrderByColumns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOrderByColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumnFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumnFull__Group_1__0__Impl
	rule__OrderByColumnFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getTableFullParserRuleCall_1_0()); }
	ruleTableFull
{ after(grammarAccess.getOrderByColumnFullAccess().getTableFullParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumnFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumnFull__Group_1__1__Impl
	rule__OrderByColumnFull__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getOrderByColumnFullAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumnFull__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumnFull__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_1_2()); }
(rule__OrderByColumnFull__ColOrderAssignment_1_2)
{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GroupByColumns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group__0__Impl
	rule__GroupByColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0()); }
	ruleGroupByColumnFull
{ after(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1()); }
(rule__GroupByColumns__Group_1__0)?
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1__0__Impl
	rule__GroupByColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
(rule__GroupByColumns__Group_1_1__0)
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
(rule__GroupByColumns__Group_1_1__0)*
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1_1__0__Impl
	rule__GroupByColumns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__GroupByColumns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getGroupByColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumnFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumnFull__Group_1__0__Impl
	rule__GroupByColumnFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getTableFullParserRuleCall_1_0()); }
	ruleTableFull
{ after(grammarAccess.getGroupByColumnFullAccess().getTableFullParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumnFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumnFull__Group_1__1__Impl
	rule__GroupByColumnFull__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getGroupByColumnFullAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumnFull__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumnFull__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnAssignment_1_2()); }
(rule__GroupByColumnFull__GroupByColumnAssignment_1_2)
{ after(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Columns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group__0__Impl
	rule__Columns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0()); }
	ruleColumnOrAlias
{ after(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getGroup_1()); }
(rule__Columns__Group_1__0)?
{ after(grammarAccess.getColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1__0__Impl
	rule__Columns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getColumnsAccess().getGroup_1_1()); }
(rule__Columns__Group_1_1__0)
{ after(grammarAccess.getColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getColumnsAccess().getGroup_1_1()); }
(rule__Columns__Group_1_1__0)*
{ after(grammarAccess.getColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1_1__0__Impl
	rule__Columns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__Columns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnOrAlias__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_1__0__Impl
	rule__ColumnOrAlias__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_1_0()); }
	ruleColumnFull
{ after(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_1__1__Impl
	rule__ColumnOrAlias__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getASKeyword_1_1()); }

	'AS' 

{ after(grammarAccess.getColumnOrAliasAccess().getASKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_1_2()); }
(rule__ColumnOrAlias__ColAliasAssignment_1_2)
{ after(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ColumnOrAlias__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_2__0__Impl
	rule__ColumnOrAlias__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_2_0()); }
	ruleColumnFull
{ after(grammarAccess.getColumnOrAliasAccess().getColumnFullParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_2_1()); }
(rule__ColumnOrAlias__ColAliasAssignment_2_1)
{ after(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__0__Impl
	rule__ColumnFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getTableFullParserRuleCall_1_0()); }
	ruleTableFull
{ after(grammarAccess.getColumnFullAccess().getTableFullParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__1__Impl
	rule__ColumnFull__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getColNameAssignment_1_2()); }
(rule__ColumnFull__ColNameAssignment_1_2)
{ after(grammarAccess.getColumnFullAccess().getColNameAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Tables__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group__0__Impl
	rule__Tables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getTableOrAliasParserRuleCall_0()); }
	ruleTableOrAlias
{ after(grammarAccess.getTablesAccess().getTableOrAliasParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getGroup_1()); }
(rule__Tables__Group_1__0)?
{ after(grammarAccess.getTablesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1__0__Impl
	rule__Tables__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTablesAccess().getGroup_1_1()); }
(rule__Tables__Group_1_1__0)
{ after(grammarAccess.getTablesAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getTablesAccess().getGroup_1_1()); }
(rule__Tables__Group_1_1__0)*
{ after(grammarAccess.getTablesAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1_1__0__Impl
	rule__Tables__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getTablesAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getEntriesAssignment_1_1_1()); }
(rule__Tables__EntriesAssignment_1_1_1)
{ after(grammarAccess.getTablesAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableOrAlias__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group_1__0__Impl
	rule__TableOrAlias__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_1_0()); }
	ruleTableFull
{ after(grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group_1__1__Impl
	rule__TableOrAlias__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getASKeyword_1_1()); }

	'AS' 

{ after(grammarAccess.getTableOrAliasAccess().getASKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_1_2()); }
(rule__TableOrAlias__TblAliasAssignment_1_2)
{ after(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TableOrAlias__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group_2__0__Impl
	rule__TableOrAlias__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_2_0()); }
	ruleTableFull
{ after(grammarAccess.getTableOrAliasAccess().getTableFullParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_2_1()); }
(rule__TableOrAlias__TblAliasAssignment_2_1)
{ after(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableFull__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_0__0__Impl
	rule__TableFull__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getSchemaParserRuleCall_0_0()); }
	ruleSchema
{ after(grammarAccess.getTableFullAccess().getSchemaParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_0__1__Impl
	rule__TableFull__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getTableFullAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getTblAssignment_0_2()); }
(rule__TableFull__TblAssignment_0_2)
{ after(grammarAccess.getTableFullAccess().getTblAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Schema__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group_0__0__Impl
	rule__Schema__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getDatabaseParserRuleCall_0_0()); }
	ruleDatabase
{ after(grammarAccess.getSchemaAccess().getDatabaseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group_0__1__Impl
	rule__Schema__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getSchemaAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getSchemAssignment_0_2()); }
(rule__Schema__SchemAssignment_0_2)
{ after(grammarAccess.getSchemaAccess().getSchemAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group__0__Impl
	rule__WhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0()); }
	ruleAndWhereEntry
{ after(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1()); }
(rule__WhereEntry__Group_1__0)?
{ after(grammarAccess.getWhereEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1__0__Impl
	rule__WhereEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
(rule__WhereEntry__Group_1_1__0)
{ after(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
(rule__WhereEntry__Group_1_1__0)*
{ after(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1_1__0__Impl
	rule__WhereEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0()); }

	'OR' 

{ after(grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__WhereEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group__0__Impl
	rule__AndWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0()); }
	ruleConcreteWhereEntry
{ after(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1()); }
(rule__AndWhereEntry__Group_1__0)?
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1__0__Impl
	rule__AndWhereEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
(rule__AndWhereEntry__Group_1_1__0)
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
(rule__AndWhereEntry__Group_1_1__0)*
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1_1__0__Impl
	rule__AndWhereEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0()); }

	'AND' 

{ after(grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__AndWhereEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__0__Impl
	rule__ParWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__1__Impl
	rule__ParWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1()); }
	ruleWhereEntry
{ after(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HavingEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingEntry__Group__0__Impl
	rule__HavingEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingEntryAccess().getAndHavingEntryParserRuleCall_0()); }
	ruleAndHavingEntry
{ after(grammarAccess.getHavingEntryAccess().getAndHavingEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HavingEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingEntryAccess().getGroup_1()); }
(rule__HavingEntry__Group_1__0)?
{ after(grammarAccess.getHavingEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HavingEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingEntry__Group_1__0__Impl
	rule__HavingEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getHavingEntryAccess().getOrHavingEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HavingEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getHavingEntryAccess().getGroup_1_1()); }
(rule__HavingEntry__Group_1_1__0)
{ after(grammarAccess.getHavingEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getHavingEntryAccess().getGroup_1_1()); }
(rule__HavingEntry__Group_1_1__0)*
{ after(grammarAccess.getHavingEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HavingEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingEntry__Group_1_1__0__Impl
	rule__HavingEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingEntryAccess().getORKeyword_1_1_0()); }

	'OR' 

{ after(grammarAccess.getHavingEntryAccess().getORKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HavingEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HavingEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HavingEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__HavingEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getHavingEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndHavingEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndHavingEntry__Group__0__Impl
	rule__AndHavingEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndHavingEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndHavingEntryAccess().getConcreteHavingEntryParserRuleCall_0()); }
	ruleConcreteHavingEntry
{ after(grammarAccess.getAndHavingEntryAccess().getConcreteHavingEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndHavingEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndHavingEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndHavingEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndHavingEntryAccess().getGroup_1()); }
(rule__AndHavingEntry__Group_1__0)?
{ after(grammarAccess.getAndHavingEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndHavingEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndHavingEntry__Group_1__0__Impl
	rule__AndHavingEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndHavingEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getAndHavingEntryAccess().getAndHavingEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndHavingEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndHavingEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndHavingEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAndHavingEntryAccess().getGroup_1_1()); }
(rule__AndHavingEntry__Group_1_1__0)
{ after(grammarAccess.getAndHavingEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAndHavingEntryAccess().getGroup_1_1()); }
(rule__AndHavingEntry__Group_1_1__0)*
{ after(grammarAccess.getAndHavingEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndHavingEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndHavingEntry__Group_1_1__0__Impl
	rule__AndHavingEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndHavingEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndHavingEntryAccess().getANDKeyword_1_1_0()); }

	'AND' 

{ after(grammarAccess.getAndHavingEntryAccess().getANDKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndHavingEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndHavingEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndHavingEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndHavingEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__AndHavingEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getAndHavingEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParHavingEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParHavingEntry__Group__0__Impl
	rule__ParHavingEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParHavingEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParHavingEntryAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParHavingEntryAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParHavingEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParHavingEntry__Group__1__Impl
	rule__ParHavingEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParHavingEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParHavingEntryAccess().getHavingEntryParserRuleCall_1()); }
	ruleHavingEntry
{ after(grammarAccess.getParHavingEntryAccess().getHavingEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParHavingEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParHavingEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParHavingEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParHavingEntryAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParHavingEntryAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SingleExpressionWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleExpressionWhereEntry__Group__0__Impl
	rule__SingleExpressionWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getNameAssignment_0()); }
(rule__SingleExpressionWhereEntry__NameAssignment_0)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleExpressionWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleExpressionWhereEntry__Group__1__Impl
	rule__SingleExpressionWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorAssignment_1()); }
(rule__SingleExpressionWhereEntry__OperatorAssignment_1)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleExpressionWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleExpressionWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsAssignment_2()); }
(rule__SingleExpressionWhereEntry__RhsAssignment_2)
{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiExpressionWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiExpressionWhereEntry__Group__0__Impl
	rule__MultiExpressionWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getNameAssignment_0()); }
(rule__MultiExpressionWhereEntry__NameAssignment_0)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiExpressionWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiExpressionWhereEntry__Group__1__Impl
	rule__MultiExpressionWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorAssignment_1()); }
(rule__MultiExpressionWhereEntry__OperatorAssignment_1)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiExpressionWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiExpressionWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsAssignment_2()); }
(rule__MultiExpressionWhereEntry__RhsAssignment_2)
{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DoubleArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__0__Impl
	rule__DoubleArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getDoubleArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__1__Impl
	rule__DoubleArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_1()); }
(rule__DoubleArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__2__Impl
	rule__DoubleArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getGroup_2()); }
(rule__DoubleArrayExpression__Group_2__0)*
{ after(grammarAccess.getDoubleArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getDoubleArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DoubleArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group_2__0__Impl
	rule__DoubleArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDoubleArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__DoubleArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LongArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__0__Impl
	rule__LongArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getLongArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__1__Impl
	rule__LongArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_1()); }
(rule__LongArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__2__Impl
	rule__LongArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getGroup_2()); }
(rule__LongArrayExpression__Group_2__0)*
{ after(grammarAccess.getLongArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getLongArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LongArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group_2__0__Impl
	rule__LongArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getLongArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__LongArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getLongArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__0__Impl
	rule__StringArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getStringArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__1__Impl
	rule__StringArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_1()); }
(rule__StringArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__2__Impl
	rule__StringArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getGroup_2()); }
(rule__StringArrayExpression__Group_2__0)*
{ after(grammarAccess.getStringArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getStringArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group_2__0__Impl
	rule__StringArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getStringArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__StringArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getStringArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NullArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__0__Impl
	rule__NullArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getNullArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__1__Impl
	rule__NullArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_1()); }
(rule__NullArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__2__Impl
	rule__NullArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getGroup_2()); }
(rule__NullArrayExpression__Group_2__0)*
{ after(grammarAccess.getNullArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getNullArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NullArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group_2__0__Impl
	rule__NullArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getNullArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__NullArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getNullArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__0__Impl
	rule__DateArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getDateArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__1__Impl
	rule__DateArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_1()); }
(rule__DateArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__2__Impl
	rule__DateArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getGroup_2()); }
(rule__DateArrayExpression__Group_2__0)*
{ after(grammarAccess.getDateArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getDateArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DateArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group_2__0__Impl
	rule__DateArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDateArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__DateArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getDateArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanArrayExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__0__Impl
	rule__BooleanArrayExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getBooleanArrayExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__1__Impl
	rule__BooleanArrayExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_1()); }
(rule__BooleanArrayExpression__ValuesAssignment_1)
{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__2__Impl
	rule__BooleanArrayExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getGroup_2()); }
(rule__BooleanArrayExpression__Group_2__0)*
{ after(grammarAccess.getBooleanArrayExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getBooleanArrayExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BooleanArrayExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group_2__0__Impl
	rule__BooleanArrayExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getBooleanArrayExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanArrayExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanArrayExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_2_1()); }
(rule__BooleanArrayExpression__ValuesAssignment_2_1)
{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ColAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getColColumnsParserRuleCall_1_0()); }
	ruleColumns{ after(grammarAccess.getModelAccess().getColColumnsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TblAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTblTablesParserRuleCall_3_0()); }
	ruleTables{ after(grammarAccess.getModelAccess().getTblTablesParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__WhereEntryAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0()); }
	ruleWhereEntry{ after(grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__GroupByEntryAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroupByEntryGroupByColumnsParserRuleCall_5_1_0()); }
	ruleGroupByColumns{ after(grammarAccess.getModelAccess().getGroupByEntryGroupByColumnsParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__HavingEntryAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getHavingEntryHavingEntryParserRuleCall_6_1_0()); }
	ruleHavingEntry{ after(grammarAccess.getModelAccess().getHavingEntryHavingEntryParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__OrderByEntryAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOrderByEntryOrderByColumnsParserRuleCall_7_1_0()); }
	ruleOrderByColumns{ after(grammarAccess.getModelAccess().getOrderByEntryOrderByColumnsParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0()); }
	ruleOrderByColumnFull{ after(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__ColOrderAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnParserRuleCall_0_0()); }
	ruleColumn{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__ColOrderAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnParserRuleCall_1_2_0()); }
	ruleColumn{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0()); }
	ruleGroupByColumnFull{ after(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__GroupByColumnAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnColumnParserRuleCall_0_0()); }
	ruleColumn{ after(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnColumnParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__GroupByColumnAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnColumnParserRuleCall_1_2_0()); }
	ruleColumn{ after(grammarAccess.getGroupByColumnFullAccess().getGroupByColumnColumnParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0()); }
	ruleColumnOrAlias{ after(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__ColAliasAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasColumnAliasParserRuleCall_1_2_0()); }
	ruleColumnAlias{ after(grammarAccess.getColumnOrAliasAccess().getColAliasColumnAliasParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__ColAliasAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasColumnAliasParserRuleCall_2_1_0()); }
	ruleColumnAlias{ after(grammarAccess.getColumnOrAliasAccess().getColAliasColumnAliasParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__ColNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getColNameColumnParserRuleCall_0_0()); }
	ruleColumn{ after(grammarAccess.getColumnFullAccess().getColNameColumnParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__ColNameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getColNameColumnParserRuleCall_1_2_0()); }
	ruleColumn{ after(grammarAccess.getColumnFullAccess().getColNameColumnParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnAlias__ColAliasAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAliasAccess().getColAliasIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getColumnAliasAccess().getColAliasIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__ColNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getColNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getColumnAccess().getColNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getEntriesTableOrAliasParserRuleCall_1_1_1_0()); }
	ruleTableOrAlias{ after(grammarAccess.getTablesAccess().getEntriesTableOrAliasParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__TblAliasAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasTableAliasParserRuleCall_1_2_0()); }
	ruleTableAlias{ after(grammarAccess.getTableOrAliasAccess().getTblAliasTableAliasParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__TblAliasAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasTableAliasParserRuleCall_2_1_0()); }
	ruleTableAlias{ after(grammarAccess.getTableOrAliasAccess().getTblAliasTableAliasParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__TblAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getTblTableParserRuleCall_0_2_0()); }
	ruleTable{ after(grammarAccess.getTableFullAccess().getTblTableParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__TblAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getTblTableParserRuleCall_1_0()); }
	ruleTable{ after(grammarAccess.getTableFullAccess().getTblTableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__TblAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getTblIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getTableAccess().getTblIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableAlias__TblAliasAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAliasAccess().getTblAliasIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getTableAliasAccess().getTblAliasIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__SchemAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_0_2_0()); }
	RULE_ID{ after(grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__SchemAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSchemaAccess().getSchemIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__DbNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0()); }
	ruleAndWhereEntry{ after(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0()); }
	ruleConcreteWhereEntry{ after(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HavingEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingEntryAccess().getEntriesAndHavingEntryParserRuleCall_1_1_1_0()); }
	ruleAndHavingEntry{ after(grammarAccess.getHavingEntryAccess().getEntriesAndHavingEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndHavingEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndHavingEntryAccess().getEntriesConcreteHavingEntryParserRuleCall_1_1_1_0()); }
	ruleConcreteHavingEntry{ after(grammarAccess.getAndHavingEntryAccess().getEntriesConcreteHavingEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0()); }
	ruleOperator{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleExpressionWhereEntry__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSingleExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacableValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
(
{ before(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
)

{ after(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
(
{ before(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }

	'null' 

{ after(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
)

{ after(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0()); }
	RULE_DATE{ after(grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__TrueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
)

{ after(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__TrueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }

	'false' 

{ after(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
)

{ after(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorArrayOperatorEnumRuleCall_1_0()); }
	ruleArrayOperator{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getOperatorArrayOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiExpressionWhereEntry__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsArrayExpressionParserRuleCall_2_0()); }
	ruleArrayExpression{ after(grammarAccess.getMultiExpressionWhereEntryAccess().getRhsArrayExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_1_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getDoubleArrayExpressionAccess().getValuesSIGNED_DOUBLETerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_1_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_2_1_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getLongArrayExpressionAccess().getValuesSINGED_LONGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringArrayExpressionAccess().getValuesSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }

	'null' 

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }
)

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }
(
{ before(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }

	'null' 

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }
)

{ after(grammarAccess.getNullArrayExpressionAccess().getValuesNullKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_1_0()); }
	RULE_DATE{ after(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_2_1_0()); }
	RULE_DATE{ after(grammarAccess.getDateArrayExpressionAccess().getValuesDATETerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_1_0()); }
	RULE_BOOL{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanArrayExpression__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_2_1_0()); }
	RULE_BOOL{ after(grammarAccess.getBooleanArrayExpressionAccess().getValuesBOOLTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOL : ('true'|'false'|'TRUE'|'FALSE');

RULE_SINGED_LONG : '-'? ('0'..'9')+;

RULE_DATE : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'1' '0'..'9' '-' '0'..'3' '0'..'9';

RULE_SIGNED_DOUBLE : '-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


