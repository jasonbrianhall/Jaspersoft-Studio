/*
 * generated by Xtext
 */
package com.jaspersoft.studio.data.ui.outline;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;

import com.jaspersoft.studio.data.sql.Column;
import com.jaspersoft.studio.data.sql.ColumnFull;
import com.jaspersoft.studio.data.sql.ColumnOrAlias;
import com.jaspersoft.studio.data.sql.Model;
import com.jaspersoft.studio.data.sql.OrColumn;
import com.jaspersoft.studio.data.sql.OrTable;
import com.jaspersoft.studio.data.sql.Table;
import com.jaspersoft.studio.data.sql.TableFull;
import com.jaspersoft.studio.data.sql.TableOrAlias;

/**
 * Customization of the default outline structure.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
public class SqlOutlineTreeProvider extends org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider {

	@Override
	protected void _createChildren(IOutlineNode parentNode, EObject modelElement) {
		if (modelElement instanceof OrTable) {
			OrTable t = (OrTable) modelElement;
			for (TableOrAlias toa : t.getEntries())
				if (toa instanceof TableFull)
					_createChildrenTableFull(parentNode, (TableFull) toa);
				else
					for (EObject eo : toa.eContents())
						if (eo instanceof Table)
							createNode(parentNode, eo);
		} else if (modelElement instanceof TableFull) {
			_createChildrenTableFull(parentNode, (TableFull) modelElement);
		} else if (modelElement instanceof OrColumn) {
			OrColumn c = (OrColumn) modelElement;
			for (ColumnOrAlias coa : c.getEntries())
				if (coa instanceof ColumnFull)
					_createChildrenColumnFull(parentNode, (ColumnFull) coa);
				else
					for (EObject eo : coa.eContents())
						if (eo instanceof Column)
							createNode(parentNode, eo);
		} else if (modelElement instanceof ColumnFull) {
			_createChildrenColumnFull(parentNode, (ColumnFull) modelElement);
		} else
			super._createChildren(parentNode, modelElement);
	}

	protected void _createChildrenTableFull(IOutlineNode parentNode, TableFull cf) {
		if (cf.getTblAlias() != null)
			createNode(parentNode, cf.getTblAlias());
		else if (cf.getTbl() != null)
			createNode(parentNode, cf.getTbl());
	}

	protected void _createChildrenColumnFull(IOutlineNode parentNode, ColumnFull cf) {
		if (cf.getColAlias() != null)
			createNode(parentNode, cf.getColAlias());
		else if (cf.getColName() != null)
			createNode(parentNode, cf.getColName());
	}

	@Override
	protected void _createChildren(Object parent, Object element) {
		super._createChildren(parent, element);
	}

	@Override
	protected void _createChildren(DocumentRootNode parentNode, EObject modelElement) {
		if (modelElement instanceof Model) {
			Model model = (Model) modelElement;
			if (model.getCol() != null)
				createNode(parentNode, model.getCol());
			if (model.getTbl() != null)
				createNode(parentNode, model.getTbl());
			if (model.getWhereEntry() != null)
				createNode(parentNode, model.getWhereEntry());
		} else
			super._createChildren(parentNode, modelElement);
	}
}
