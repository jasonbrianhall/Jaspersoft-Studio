/*
* generated by Xtext
*/
grammar InternalJavaJRExpression;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.jaspersoft.studio.editor.jrexpressions.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.jaspersoft.studio.editor.jrexpressions.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.jaspersoft.studio.editor.jrexpressions.services.JavaJRExpressionGrammarAccess;

}

@parser::members {

 	private JavaJRExpressionGrammarAccess grammarAccess;
 	
    public InternalJavaJRExpressionParser(TokenStream input, JavaJRExpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected JavaJRExpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getModelAccess().getExpressionParserRuleCall()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getCreatorParserRuleCall_0()); 
    }
    this_Creator_0=ruleCreator
    { 
        $current = $this_Creator_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getCastParserRuleCall_1_0()); 
    }
    this_Cast_1=ruleCast
    { 
        $current = $this_Cast_1.current; 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getCondExprConditionalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_condExpr_2_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"condExpr",
        		lv_condExpr_2_0, 
        		"ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodInvocationRule()); }
	 iv_ruleMethodInvocation=ruleMethodInvocation 
	 { $current=$iv_ruleMethodInvocation.current; } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationAccess().getMethodNameQualifiedNameParserRuleCall_0_0()); 
	    }
		lv_methodName_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationRule());
	        }
       		set(
       			$current, 
       			"methodName",
        		lv_methodName_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationAccess().getArgsArgumentsParserRuleCall_1_0()); 
	    }
		lv_args_1_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_1_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBaseJRExpr
entryRuleBaseJRExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseJRExprRule()); }
	 iv_ruleBaseJRExpr=ruleBaseJRExpr 
	 { $current=$iv_ruleBaseJRExpr.current; } 
	 EOF 
;

// Rule BaseJRExpr
ruleBaseJRExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fieldToken_0_0=RULE_FIELDTOKEN
		{
			newLeafNode(lv_fieldToken_0_0, grammarAccess.getBaseJRExprAccess().getFieldTokenFieldTokenTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseJRExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fieldToken",
        		lv_fieldToken_0_0, 
        		"FieldToken");
	    }

)
)
    |(
(
		lv_parameterToken_1_0=RULE_PARAMETERTOKEN
		{
			newLeafNode(lv_parameterToken_1_0, grammarAccess.getBaseJRExprAccess().getParameterTokenParameterTokenTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseJRExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parameterToken",
        		lv_parameterToken_1_0, 
        		"ParameterToken");
	    }

)
)
    |(
(
		lv_variableToken_2_0=RULE_VARIABLETOKEN
		{
			newLeafNode(lv_variableToken_2_0, grammarAccess.getBaseJRExprAccess().getVariableTokenVariableTokenTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBaseJRExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variableToken",
        		lv_variableToken_2_0, 
        		"VariableToken");
	    }

)
))
;





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_leftP_0_0=RULE_LPAREN
		{
			newLeafNode(lv_leftP_0_0, grammarAccess.getArgumentsAccess().getLeftPLPARENTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"leftP",
        		lv_leftP_0_0, 
        		"LPAREN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExprLstExpressionListParserRuleCall_1_0()); 
	    }
		lv_exprLst_1_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		set(
       			$current, 
       			"exprLst",
        		lv_exprLst_1_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_rightP_2_0=RULE_RPAREN
		{
			newLeafNode(lv_rightP_2_0, grammarAccess.getArgumentsAccess().getRightPRPARENTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rightP",
        		lv_rightP_2_0, 
        		"RPAREN");
	    }

)
))
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_commas_1_0=RULE_COMMA
		{
			newLeafNode(lv_commas_1_0, grammarAccess.getExpressionListAccess().getCommasCOMMATerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionListRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"commas",
        		lv_commas_1_0, 
        		"COMMA");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBaseCommonExpression
entryRuleBaseCommonExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseCommonExpressionRule()); }
	 iv_ruleBaseCommonExpression=ruleBaseCommonExpression 
	 { $current=$iv_ruleBaseCommonExpression.current; } 
	 EOF 
;

// Rule BaseCommonExpression
ruleBaseCommonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBaseCommonExpressionAccess().getBasejrexprBaseJRExprParserRuleCall_0_0()); 
	    }
		lv_basejrexpr_0_0=ruleBaseJRExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseCommonExpressionRule());
	        }
       		set(
       			$current, 
       			"basejrexpr",
        		lv_basejrexpr_0_0, 
        		"BaseJRExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBaseCommonExpressionAccess().getLiteralLiteralParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseCommonExpressionRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(this_LPAREN_2=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_2, grammarAccess.getBaseCommonExpressionAccess().getLPARENTerminalRuleCall_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBaseCommonExpressionAccess().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_3=ruleExpression
    { 
        $current = $this_Expression_3.current; 
        afterParserOrEnumRuleCall();
    }
this_RPAREN_4=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_4, grammarAccess.getBaseCommonExpressionAccess().getRPARENTerminalRuleCall_2_2()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getBaseCommonExpressionAccess().getMethodInvocationParserRuleCall_3()); 
    }
    this_MethodInvocation_5=ruleMethodInvocation
    { 
        $current = $this_MethodInvocation_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastRule()); }
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current; } 
	 EOF 
;

// Rule Cast
ruleCast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_lpar_0_0=RULE_LPAREN
		{
			newLeafNode(lv_lpar_0_0, grammarAccess.getCastAccess().getLparLPARENTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCastRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lpar",
        		lv_lpar_0_0, 
        		"LPAREN");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getPtypePrimitiveTypeParserRuleCall_1_0_0()); 
	    }
		lv_ptype_1_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"ptype",
        		lv_ptype_1_0, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getArrtypeArrayTypeParserRuleCall_1_1_0()); 
	    }
		lv_arrtype_2_0=ruleArrayType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"arrtype",
        		lv_arrtype_2_0, 
        		"ArrayType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getClazztypeClassOrInterfaceTypeParserRuleCall_1_2_0()); 
	    }
		lv_clazztype_3_0=ruleClassOrInterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"clazztype",
        		lv_clazztype_3_0, 
        		"ClassOrInterfaceType");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		lv_rpar_4_0=RULE_RPAREN
		{
			newLeafNode(lv_rpar_4_0, grammarAccess.getCastAccess().getRparRPARENTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCastRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rpar",
        		lv_rpar_4_0, 
        		"RPAREN");
	    }

)
))
;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTestExpressionParserRuleCall_0()); 
    }
    this_TestExpression_0=ruleTestExpression
    { 
        $current = $this_TestExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getOkReturnedExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_okReturnedExpr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"okReturnedExpr",
        		lv_okReturnedExpr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getKoReturnedExprExpressionParserRuleCall_1_3_0()); 
	    }
		lv_koReturnedExpr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"koReturnedExpr",
        		lv_koReturnedExpr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTestExpression
entryRuleTestExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestExpressionRule()); }
	 iv_ruleTestExpression=ruleTestExpression 
	 { $current=$iv_ruleTestExpression.current; } 
	 EOF 
;

// Rule TestExpression
ruleTestExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTestExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpAndExpressionParserRuleCall_0_0()); 
	    }
		lv_andExp_0_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"andExp",
        		lv_andExp_0_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_andExp_2_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"andExp",
        		lv_andExp_2_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getPrimaryCondPrimaryCondExpressionParserRuleCall_0_0()); 
	    }
		lv_primaryCond_0_0=rulePrimaryCondExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"primaryCond",
        		lv_primaryCond_0_0, 
        		"PrimaryCondExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getPrimaryCondPrimaryCondExpressionParserRuleCall_1_1_0()); 
	    }
		lv_primaryCond_2_0=rulePrimaryCondExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"primaryCond",
        		lv_primaryCond_2_0, 
        		"PrimaryCondExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryCondExpression
entryRulePrimaryCondExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryCondExpressionRule()); }
	 iv_rulePrimaryCondExpression=rulePrimaryCondExpression 
	 { $current=$iv_rulePrimaryCondExpression.current; } 
	 EOF 
;

// Rule PrimaryCondExpression
rulePrimaryCondExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryCondExpressionAccess().getExprBaseBooleanExprParserRuleCall_0()); 
	    }
		lv_expr_0_0=ruleBaseBooleanExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryCondExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"BaseBooleanExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBaseBooleanExpr
entryRuleBaseBooleanExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseBooleanExprRule()); }
	 iv_ruleBaseBooleanExpr=ruleBaseBooleanExpr 
	 { $current=$iv_ruleBaseBooleanExpr.current; } 
	 EOF 
;

// Rule BaseBooleanExpr
ruleBaseBooleanExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NOT_0=RULE_NOT
    { 
    newLeafNode(this_NOT_0, grammarAccess.getBaseBooleanExprAccess().getNOTTerminalRuleCall_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getBaseBooleanExprAccess().getEqualityExpressionParserRuleCall_1()); 
    }
    this_EqualityExpression_1=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getInstanceofInstanceOfExpressionParserRuleCall_0_0()); 
	    }
		lv_instanceof_0_0=ruleInstanceOfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"instanceof",
        		lv_instanceof_0_0, 
        		"InstanceOfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_EQUAL_1=RULE_EQUAL
    { 
    newLeafNode(this_EQUAL_1, grammarAccess.getEqualityExpressionAccess().getEQUALTerminalRuleCall_1_0_0()); 
    }

    |this_NOTEQUAL_2=RULE_NOTEQUAL
    { 
    newLeafNode(this_NOTEQUAL_2, grammarAccess.getEqualityExpressionAccess().getNOTEQUALTerminalRuleCall_1_0_1()); 
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getInstanceofInstanceOfExpressionParserRuleCall_1_1_0()); 
	    }
		lv_instanceof_3_0=ruleInstanceOfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"instanceof",
        		lv_instanceof_3_0, 
        		"InstanceOfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_rel_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"rel",
        		lv_rel_0_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalOpParserRuleCall_1_0()); 
    }
ruleRelationalOp
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rel_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"rel",
        		lv_rel_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceOfExpression
entryRuleInstanceOfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceOfExpressionRule()); }
	 iv_ruleInstanceOfExpression=ruleInstanceOfExpression 
	 { $current=$iv_ruleInstanceOfExpression.current; } 
	 EOF 
;

// Rule InstanceOfExpression
ruleInstanceOfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getElRelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_el_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExpressionRule());
	        }
       		set(
       			$current, 
       			"el",
        		lv_el_0_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_INSTANCEOF_1=RULE_INSTANCEOF
    { 
    newLeafNode(this_INSTANCEOF_1, grammarAccess.getInstanceOfExpressionAccess().getINSTANCEOFTerminalRuleCall_1_0()); 
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getTargetRelationalExpressionParserRuleCall_1_1_0_0()); 
	    }
		lv_target_2_1=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExpressionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_2_1, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getTargetClassOrInterfaceTypeParserRuleCall_1_1_0_1()); 
	    }
		lv_target_2_2=ruleClassOrInterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExpressionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_2_2, 
        		"ClassOrInterfaceType");
	        afterParserOrEnumRuleCall();
	    }

)

)
))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultExprMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_multExpr_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multExpr",
        		lv_multExpr_0_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultExprMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_multExpr_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multExpr",
        		lv_multExpr_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprBaseCommonExpressionParserRuleCall_0_0()); 
	    }
		lv_baseExpr_0_0=ruleBaseCommonExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"baseExpr",
        		lv_baseExpr_0_0, 
        		"BaseCommonExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_DOT_1=RULE_DOT
    { 
    newLeafNode(this_DOT_1, grammarAccess.getMultiplicativeExpressionAccess().getDOTTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMethodsMethodInvocationParserRuleCall_1_1_0()); 
	    }
		lv_methods_2_0=ruleMethodInvocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_2_0, 
        		"MethodInvocation");
	        afterParserOrEnumRuleCall();
	    }

)
))*((	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_2_0_0());
    }

    |	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_2_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprBaseCommonExpressionParserRuleCall_2_1_0()); 
	    }
		lv_baseExpr_5_0=ruleBaseCommonExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"baseExpr",
        		lv_baseExpr_5_0, 
        		"BaseCommonExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_DOT_6=RULE_DOT
    { 
    newLeafNode(this_DOT_6, grammarAccess.getMultiplicativeExpressionAccess().getDOTTerminalRuleCall_2_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMethodsMethodInvocationParserRuleCall_2_2_1_0()); 
	    }
		lv_methods_7_0=ruleMethodInvocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_7_0, 
        		"MethodInvocation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)*)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_GT_0=RULE_GT    {
		$current.merge(this_GT_0);
    }

    { 
    newLeafNode(this_GT_0, grammarAccess.getRelationalOpAccess().getGTTerminalRuleCall_0()); 
    }

    |    this_GTE_1=RULE_GTE    {
		$current.merge(this_GTE_1);
    }

    { 
    newLeafNode(this_GTE_1, grammarAccess.getRelationalOpAccess().getGTETerminalRuleCall_1()); 
    }

    |    this_LT_2=RULE_LT    {
		$current.merge(this_LT_2);
    }

    { 
    newLeafNode(this_LT_2, grammarAccess.getRelationalOpAccess().getLTTerminalRuleCall_2()); 
    }

    |    this_LTE_3=RULE_LTE    {
		$current.merge(this_LTE_3);
    }

    { 
    newLeafNode(this_LTE_3, grammarAccess.getRelationalOpAccess().getLTETerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleCreator
entryRuleCreator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreatorRule()); }
	 iv_ruleCreator=ruleCreator 
	 { $current=$iv_ruleCreator.current; } 
	 EOF 
;

// Rule Creator
ruleCreator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCreatorAccess().getClassCreatorParserRuleCall_0()); 
    }
    this_ClassCreator_0=ruleClassCreator
    { 
        $current = $this_ClassCreator_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCreatorAccess().getArrayCreatorParserRuleCall_1()); 
    }
    this_ArrayCreator_1=ruleArrayCreator
    { 
        $current = $this_ArrayCreator_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassCreator
entryRuleClassCreator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassCreatorRule()); }
	 iv_ruleClassCreator=ruleClassCreator 
	 { $current=$iv_ruleClassCreator.current; } 
	 EOF 
;

// Rule ClassCreator
ruleClassCreator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_NEW_0=RULE_NEW
    { 
    newLeafNode(this_NEW_0, grammarAccess.getClassCreatorAccess().getNEWTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassCreatorAccess().getClazzClassOrInterfaceTypeParserRuleCall_1_0()); 
	    }
		lv_clazz_1_0=ruleClassOrInterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassCreatorRule());
	        }
       		set(
       			$current, 
       			"clazz",
        		lv_clazz_1_0, 
        		"ClassOrInterfaceType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassCreatorAccess().getArgsArgumentsParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassCreatorRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArrayCreator
entryRuleArrayCreator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayCreatorRule()); }
	 iv_ruleArrayCreator=ruleArrayCreator 
	 { $current=$iv_ruleArrayCreator.current; } 
	 EOF 
;

// Rule ArrayCreator
ruleArrayCreator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_NEW_0=RULE_NEW
    { 
    newLeafNode(this_NEW_0, grammarAccess.getArrayCreatorAccess().getNEWTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayCreatorAccess().getTypeArrayTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleArrayType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayCreatorRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ArrayType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayCreatorAccess().getArrayInitializerArrayInitializerParserRuleCall_2_0()); 
	    }
		lv_arrayInitializer_2_0=ruleArrayInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayCreatorRule());
	        }
       		set(
       			$current, 
       			"arrayInitializer",
        		lv_arrayInitializer_2_0, 
        		"ArrayInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArrayInitializer
entryRuleArrayInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializerRule()); }
	 iv_ruleArrayInitializer=ruleArrayInitializer 
	 { $current=$iv_ruleArrayInitializer.current; } 
	 EOF 
;

// Rule ArrayInitializer
ruleArrayInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0(),
            $current);
    }
)this_LBRACE_1=RULE_LBRACE
    { 
    newLeafNode(this_LBRACE_1, grammarAccess.getArrayInitializerAccess().getLBRACETerminalRuleCall_1()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializerAccess().getFirstElExpressionParserRuleCall_2_0_0()); 
	    }
		lv_firstEl_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializerRule());
	        }
       		set(
       			$current, 
       			"firstEl",
        		lv_firstEl_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getArrayInitializerAccess().getCOMMATerminalRuleCall_2_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializerAccess().getOtherElsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_otherEls_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializerRule());
	        }
       		add(
       			$current, 
       			"otherEls",
        		lv_otherEls_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(this_COMMA_5=RULE_COMMA
    { 
    newLeafNode(this_COMMA_5, grammarAccess.getArrayInitializerAccess().getCOMMATerminalRuleCall_3()); 
    }
)?this_RBRACE_6=RULE_RBRACE
    { 
    newLeafNode(this_RBRACE_6, grammarAccess.getArrayInitializerAccess().getRBRACETerminalRuleCall_4()); 
    }
)
;







// Entry rule entryRuleArrayType
entryRuleArrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	 iv_ruleArrayType=ruleArrayType 
	 { $current=$iv_ruleArrayType.current; } 
	 EOF 
;

// Rule ArrayType
ruleArrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getClazzInterfClassOrInterfaceTypeParserRuleCall_0_0_0()); 
	    }
		lv_clazzInterf_0_0=ruleClassOrInterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"clazzInterf",
        		lv_clazzInterf_0_0, 
        		"ClassOrInterfaceType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getPrimtypePrimitiveTypeParserRuleCall_0_1_0()); 
	    }
		lv_primtype_1_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"primtype",
        		lv_primtype_1_0, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
))(this_LBRACKET_2=RULE_LBRACKET
    { 
    newLeafNode(this_LBRACKET_2, grammarAccess.getArrayTypeAccess().getLBRACKETTerminalRuleCall_1_0()); 
    }
this_RBRACKET_3=RULE_RBRACKET
    { 
    newLeafNode(this_RBRACKET_3, grammarAccess.getArrayTypeAccess().getRBRACKETTerminalRuleCall_1_1()); 
    }
)+)
;





// Entry rule entryRuleClassOrInterfaceType
entryRuleClassOrInterfaceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassOrInterfaceTypeRule()); }
	 iv_ruleClassOrInterfaceType=ruleClassOrInterfaceType 
	 { $current=$iv_ruleClassOrInterfaceType.current; } 
	 EOF 
;

// Rule ClassOrInterfaceType
ruleClassOrInterfaceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeAccess().getQualifiedNameQualifiedNameParserRuleCall_0()); 
	    }
		lv_qualifiedName_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeRule());
	        }
       		set(
       			$current, 
       			"qualifiedName",
        		lv_qualifiedName_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current; } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQualifiedNameAccess().getQualifiedNameAction_0(),
            $current);
    }
)(
(
		lv_identifier_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getQualifiedNameAccess().getIdentifierIDENTIFIERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"IDENTIFIER");
	    }

)
)((
(
		lv_dot_2_0=RULE_DOT
		{
			newLeafNode(lv_dot_2_0, grammarAccess.getQualifiedNameAccess().getDotDOTTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"dot",
        		lv_dot_2_0, 
        		"DOT");
	    }

)
)(
(
		lv_identifier_3_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getQualifiedNameAccess().getIdentifierIDENTIFIERTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"IDENTIFIER");
	    }

)
))*)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INTLITERAL_0=RULE_INTLITERAL    {
		$current.merge(this_INTLITERAL_0);
    }

    { 
    newLeafNode(this_INTLITERAL_0, grammarAccess.getLiteralAccess().getINTLITERALTerminalRuleCall_0()); 
    }

    |    this_LONGLITERAL_1=RULE_LONGLITERAL    {
		$current.merge(this_LONGLITERAL_1);
    }

    { 
    newLeafNode(this_LONGLITERAL_1, grammarAccess.getLiteralAccess().getLONGLITERALTerminalRuleCall_1()); 
    }

    |    this_FLOATLITERAL_2=RULE_FLOATLITERAL    {
		$current.merge(this_FLOATLITERAL_2);
    }

    { 
    newLeafNode(this_FLOATLITERAL_2, grammarAccess.getLiteralAccess().getFLOATLITERALTerminalRuleCall_2()); 
    }

    |    this_DOUBLELITERAL_3=RULE_DOUBLELITERAL    {
		$current.merge(this_DOUBLELITERAL_3);
    }

    { 
    newLeafNode(this_DOUBLELITERAL_3, grammarAccess.getLiteralAccess().getDOUBLELITERALTerminalRuleCall_3()); 
    }

    |    this_CHARLITERAL_4=RULE_CHARLITERAL    {
		$current.merge(this_CHARLITERAL_4);
    }

    { 
    newLeafNode(this_CHARLITERAL_4, grammarAccess.getLiteralAccess().getCHARLITERALTerminalRuleCall_4()); 
    }

    |    this_STRINGLITERAL_5=RULE_STRINGLITERAL    {
		$current.merge(this_STRINGLITERAL_5);
    }

    { 
    newLeafNode(this_STRINGLITERAL_5, grammarAccess.getLiteralAccess().getSTRINGLITERALTerminalRuleCall_5()); 
    }

    |    this_TRUE_6=RULE_TRUE    {
		$current.merge(this_TRUE_6);
    }

    { 
    newLeafNode(this_TRUE_6, grammarAccess.getLiteralAccess().getTRUETerminalRuleCall_6()); 
    }

    |    this_FALSE_7=RULE_FALSE    {
		$current.merge(this_FALSE_7);
    }

    { 
    newLeafNode(this_FALSE_7, grammarAccess.getLiteralAccess().getFALSETerminalRuleCall_7()); 
    }

    |    this_NULL_8=RULE_NULL    {
		$current.merge(this_NULL_8);
    }

    { 
    newLeafNode(this_NULL_8, grammarAccess.getLiteralAccess().getNULLTerminalRuleCall_8()); 
    }
)
    ;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); } 
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current.getText(); }  
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_0()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getCharKeyword_1()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getByteKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getShortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getIntKeyword_4()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getLongKeyword_5()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getFloatKeyword_6()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getDoubleKeyword_7()); 
    }
)
    ;





RULE_FIELDTOKEN : '$F' RULE_BRACED_JRIDENTIFIER;

RULE_VARIABLETOKEN : '$V' RULE_BRACED_JRIDENTIFIER;

RULE_PARAMETERTOKEN : '$P' RULE_BRACED_JRIDENTIFIER;

fragment RULE_BRACED_JRIDENTIFIER : RULE_LBRACE RULE_JRIDENTIFIER RULE_RBRACE;

RULE_LONGLITERAL : RULE_INTEGERNUMBER RULE_LONGSUFFIX;

RULE_INTLITERAL : RULE_INTEGERNUMBER;

fragment RULE_INTEGERNUMBER : ('0'|'1'..'9' ('0'..'9')*|'0' ('0'..'7')+|RULE_HEXPREFIX RULE_HEXDIGIT+);

fragment RULE_HEXPREFIX : ('0x'|'0X');

fragment RULE_HEXDIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_LONGSUFFIX : ('l'|'L');

fragment RULE_NONINTEGERNUMBER : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT|('0'..'9')+|RULE_HEXPREFIX RULE_HEXDIGIT* '.' RULE_HEXDIGIT* ('p'|'P') ('+'|'-')? ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOATSUFFIX : ('f'|'F');

fragment RULE_DOUBLESUFFIX : ('d'|'D');

RULE_FLOATLITERAL : RULE_NONINTEGERNUMBER RULE_FLOATSUFFIX;

RULE_DOUBLELITERAL : RULE_NONINTEGERNUMBER RULE_DOUBLESUFFIX?;

RULE_CHARLITERAL : '\'' (RULE_ESCAPESEQUENCE|~(('\''|'\\'|'\r'|'\n'))) '\'';

RULE_STRINGLITERAL : '"' (RULE_ESCAPESEQUENCE|~(('\\'|'"'|'\r'|'\n')))* '"';

fragment RULE_ESCAPESEQUENCE : '\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'0'..'3' '0'..'7' '0'..'7'|'0'..'7' '0'..'7'|'0'..'7');

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_NULL : 'null';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_SEMI : ';';

RULE_COMMA : ',';

RULE_DOT : '.';

RULE_NOTEQUAL : '!=';

RULE_EQUAL : '==';

RULE_GT : '>';

RULE_GTE : '>=';

RULE_LT : '<';

RULE_LTE : '<=';

RULE_NEW : 'new';

RULE_INSTANCEOF : 'instanceof';

RULE_NOT : '!';

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_JAVAIDDIGIT)*;

fragment RULE_LETTER : ('$'|'A'..'Z'|'_'|'a'..'z'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u00FF'|'\u0100'..'\u1FFF'|'\u3040'..'\u318F'|'\u3300'..'\u337F'|'\u3400'..'\u3D2D'|'\u4E00'..'\u9FFF'|'\uF900'..'\uFAFF');

fragment RULE_JAVAIDDIGIT : ('0'..'9'|'\u0660'..'\u0669'|'\u06F0'..'\u06F9'|'\u0966'..'\u096F'|'\u09E6'..'\u09EF'|'\u0A66'..'\u0A6F'|'\u0AE6'..'\u0AEF'|'\u0B66'..'\u0B6F'|'\u0BE7'..'\u0BEF'|'\u0C66'..'\u0C6F'|'\u0CE6'..'\u0CEF'|'\u0D66'..'\u0D6F'|'\u0E50'..'\u0E59'|'\u0ED0'..'\u0ED9'|'\u1040'..'\u1049');

fragment RULE_JRIDENTIFIER : ~(('\r'|'\n'|'}'))+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


