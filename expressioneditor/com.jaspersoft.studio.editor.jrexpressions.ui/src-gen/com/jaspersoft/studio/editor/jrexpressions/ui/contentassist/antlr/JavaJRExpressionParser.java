/*
* generated by Xtext
*/
package com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.jaspersoft.studio.editor.jrexpressions.services.JavaJRExpressionGrammarAccess;

public class JavaJRExpressionParser extends AbstractContentAssistParser {
	
	@Inject
	private JavaJRExpressionGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal.InternalJavaJRExpressionParser createParser() {
		com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal.InternalJavaJRExpressionParser result = new com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal.InternalJavaJRExpressionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getBaseJRExprAccess().getAlternatives(), "rule__BaseJRExpr__Alternatives");
					put(grammarAccess.getBaseCommonExpressionAccess().getAlternatives(), "rule__BaseCommonExpression__Alternatives");
					put(grammarAccess.getCastAccess().getAlternatives_1(), "rule__Cast__Alternatives_1");
					put(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_0(), "rule__EqualityExpression__Alternatives_1_0");
					put(grammarAccess.getInstanceOfExpressionAccess().getTargetAlternatives_1_1_0(), "rule__InstanceOfExpression__TargetAlternatives_1_1_0");
					put(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1_0(), "rule__AdditiveExpression__Alternatives_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2_0(), "rule__MultiplicativeExpression__Alternatives_2_0");
					put(grammarAccess.getRelationalOpAccess().getAlternatives(), "rule__RelationalOp__Alternatives");
					put(grammarAccess.getCreatorAccess().getAlternatives(), "rule__Creator__Alternatives");
					put(grammarAccess.getArrayTypeAccess().getAlternatives_0(), "rule__ArrayType__Alternatives_0");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getMethodInvocationAccess().getGroup(), "rule__MethodInvocation__Group__0");
					put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
					put(grammarAccess.getBaseCommonExpressionAccess().getGroup_2(), "rule__BaseCommonExpression__Group_2__0");
					put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup(), "rule__ConditionalExpression__Group__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup_1(), "rule__ConditionalExpression__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getBaseBooleanExprAccess().getGroup(), "rule__BaseBooleanExpr__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getInstanceOfExpressionAccess().getGroup(), "rule__InstanceOfExpression__Group__0");
					put(grammarAccess.getInstanceOfExpressionAccess().getGroup_1(), "rule__InstanceOfExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2(), "rule__MultiplicativeExpression__Group_2__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_2(), "rule__MultiplicativeExpression__Group_2_2__0");
					put(grammarAccess.getClassCreatorAccess().getGroup(), "rule__ClassCreator__Group__0");
					put(grammarAccess.getArrayCreatorAccess().getGroup(), "rule__ArrayCreator__Group__0");
					put(grammarAccess.getArrayInitializerAccess().getGroup(), "rule__ArrayInitializer__Group__0");
					put(grammarAccess.getArrayInitializerAccess().getGroup_2(), "rule__ArrayInitializer__Group_2__0");
					put(grammarAccess.getArrayInitializerAccess().getGroup_2_1(), "rule__ArrayInitializer__Group_2_1__0");
					put(grammarAccess.getInnerCreatorAccess().getGroup(), "rule__InnerCreator__Group__0");
					put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
					put(grammarAccess.getArrayTypeAccess().getGroup_1(), "rule__ArrayType__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_2(), "rule__QualifiedName__Group_2__0");
					put(grammarAccess.getExpressionAccess().getCondExprAssignment_1_1(), "rule__Expression__CondExprAssignment_1_1");
					put(grammarAccess.getMethodInvocationAccess().getMethodNameAssignment_0(), "rule__MethodInvocation__MethodNameAssignment_0");
					put(grammarAccess.getMethodInvocationAccess().getArgsAssignment_1(), "rule__MethodInvocation__ArgsAssignment_1");
					put(grammarAccess.getBaseJRExprAccess().getFieldTokenAssignment_0(), "rule__BaseJRExpr__FieldTokenAssignment_0");
					put(grammarAccess.getBaseJRExprAccess().getParameterTokenAssignment_1(), "rule__BaseJRExpr__ParameterTokenAssignment_1");
					put(grammarAccess.getBaseJRExprAccess().getVariableTokenAssignment_2(), "rule__BaseJRExpr__VariableTokenAssignment_2");
					put(grammarAccess.getArgumentsAccess().getLeftPAssignment_0(), "rule__Arguments__LeftPAssignment_0");
					put(grammarAccess.getArgumentsAccess().getExprLstAssignment_1(), "rule__Arguments__ExprLstAssignment_1");
					put(grammarAccess.getArgumentsAccess().getRightPAssignment_2(), "rule__Arguments__RightPAssignment_2");
					put(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0(), "rule__ExpressionList__ExpressionsAssignment_0");
					put(grammarAccess.getExpressionListAccess().getCommasAssignment_1_0(), "rule__ExpressionList__CommasAssignment_1_0");
					put(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1(), "rule__ExpressionList__ExpressionsAssignment_1_1");
					put(grammarAccess.getBaseCommonExpressionAccess().getBasejrexprAssignment_0(), "rule__BaseCommonExpression__BasejrexprAssignment_0");
					put(grammarAccess.getBaseCommonExpressionAccess().getLiteralAssignment_1(), "rule__BaseCommonExpression__LiteralAssignment_1");
					put(grammarAccess.getCastAccess().getLparAssignment_0(), "rule__Cast__LparAssignment_0");
					put(grammarAccess.getCastAccess().getPtypeAssignment_1_0(), "rule__Cast__PtypeAssignment_1_0");
					put(grammarAccess.getCastAccess().getArrtypeAssignment_1_1(), "rule__Cast__ArrtypeAssignment_1_1");
					put(grammarAccess.getCastAccess().getClazztypeAssignment_1_2(), "rule__Cast__ClazztypeAssignment_1_2");
					put(grammarAccess.getCastAccess().getRparAssignment_2(), "rule__Cast__RparAssignment_2");
					put(grammarAccess.getConditionalExpressionAccess().getOkReturnedExprAssignment_1_1(), "rule__ConditionalExpression__OkReturnedExprAssignment_1_1");
					put(grammarAccess.getConditionalExpressionAccess().getKoReturnedExprAssignment_1_3(), "rule__ConditionalExpression__KoReturnedExprAssignment_1_3");
					put(grammarAccess.getOrExpressionAccess().getAndExpAssignment_0(), "rule__OrExpression__AndExpAssignment_0");
					put(grammarAccess.getOrExpressionAccess().getAndExpAssignment_1_1(), "rule__OrExpression__AndExpAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getPrimaryCondAssignment_0(), "rule__AndExpression__PrimaryCondAssignment_0");
					put(grammarAccess.getAndExpressionAccess().getPrimaryCondAssignment_1_1(), "rule__AndExpression__PrimaryCondAssignment_1_1");
					put(grammarAccess.getPrimaryCondExpressionAccess().getExprAssignment(), "rule__PrimaryCondExpression__ExprAssignment");
					put(grammarAccess.getEqualityExpressionAccess().getInstanceofAssignment_0(), "rule__EqualityExpression__InstanceofAssignment_0");
					put(grammarAccess.getEqualityExpressionAccess().getInstanceofAssignment_1_1(), "rule__EqualityExpression__InstanceofAssignment_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getRelAssignment_0(), "rule__RelationalExpression__RelAssignment_0");
					put(grammarAccess.getRelationalExpressionAccess().getRelAssignment_1_1(), "rule__RelationalExpression__RelAssignment_1_1");
					put(grammarAccess.getInstanceOfExpressionAccess().getElAssignment_0(), "rule__InstanceOfExpression__ElAssignment_0");
					put(grammarAccess.getInstanceOfExpressionAccess().getTargetAssignment_1_1(), "rule__InstanceOfExpression__TargetAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getMultExprAssignment_0(), "rule__AdditiveExpression__MultExprAssignment_0");
					put(grammarAccess.getAdditiveExpressionAccess().getMultExprAssignment_1_1(), "rule__AdditiveExpression__MultExprAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprAssignment_0(), "rule__MultiplicativeExpression__BaseExprAssignment_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getMethodsAssignment_1_1(), "rule__MultiplicativeExpression__MethodsAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprAssignment_2_1(), "rule__MultiplicativeExpression__BaseExprAssignment_2_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getMethodsAssignment_2_2_1(), "rule__MultiplicativeExpression__MethodsAssignment_2_2_1");
					put(grammarAccess.getClassCreatorAccess().getClazzAssignment_1(), "rule__ClassCreator__ClazzAssignment_1");
					put(grammarAccess.getClassCreatorAccess().getArgsAssignment_2(), "rule__ClassCreator__ArgsAssignment_2");
					put(grammarAccess.getArrayCreatorAccess().getTypeAssignment_1(), "rule__ArrayCreator__TypeAssignment_1");
					put(grammarAccess.getArrayCreatorAccess().getArrayInitializerAssignment_2(), "rule__ArrayCreator__ArrayInitializerAssignment_2");
					put(grammarAccess.getArrayInitializerAccess().getFirstElAssignment_2_0(), "rule__ArrayInitializer__FirstElAssignment_2_0");
					put(grammarAccess.getArrayInitializerAccess().getOtherElsAssignment_2_1_1(), "rule__ArrayInitializer__OtherElsAssignment_2_1_1");
					put(grammarAccess.getInnerCreatorAccess().getArgsAssignment_3(), "rule__InnerCreator__ArgsAssignment_3");
					put(grammarAccess.getArrayTypeAccess().getClazzInterfAssignment_0_0(), "rule__ArrayType__ClazzInterfAssignment_0_0");
					put(grammarAccess.getArrayTypeAccess().getPrimtypeAssignment_0_1(), "rule__ArrayType__PrimtypeAssignment_0_1");
					put(grammarAccess.getClassOrInterfaceTypeAccess().getQualifiedNameAssignment(), "rule__ClassOrInterfaceType__QualifiedNameAssignment");
					put(grammarAccess.getQualifiedNameAccess().getIdentifierAssignment_1(), "rule__QualifiedName__IdentifierAssignment_1");
					put(grammarAccess.getQualifiedNameAccess().getDotAssignment_2_0(), "rule__QualifiedName__DotAssignment_2_0");
					put(grammarAccess.getQualifiedNameAccess().getIdentifierAssignment_2_1(), "rule__QualifiedName__IdentifierAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal.InternalJavaJRExpressionParser typedParser = (com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal.InternalJavaJRExpressionParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JavaJRExpressionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JavaJRExpressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
