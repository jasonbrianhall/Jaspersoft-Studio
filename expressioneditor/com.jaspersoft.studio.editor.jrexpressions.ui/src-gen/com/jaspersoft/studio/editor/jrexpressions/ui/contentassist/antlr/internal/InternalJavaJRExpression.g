/*
* generated by Xtext
*/
grammar InternalJavaJRExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.jaspersoft.studio.editor.jrexpressions.services.JavaJRExpressionGrammarAccess;

}

@parser::members {
 
 	private JavaJRExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JavaJRExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getExpressionParserRuleCall()); }
	ruleExpression
{ after(grammarAccess.getModelAccess().getExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation 
:
{ before(grammarAccess.getMethodInvocationRule()); }
	 ruleMethodInvocation
{ after(grammarAccess.getMethodInvocationRule()); } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodInvocationAccess().getGroup()); }
(rule__MethodInvocation__Group__0)
{ after(grammarAccess.getMethodInvocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodName
entryRuleMethodName 
:
{ before(grammarAccess.getMethodNameRule()); }
	 ruleMethodName
{ after(grammarAccess.getMethodNameRule()); } 
	 EOF 
;

// Rule MethodName
ruleMethodName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodNameAccess().getGroup()); }
(rule__MethodName__Group__0)
{ after(grammarAccess.getMethodNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseJRExpr
entryRuleBaseJRExpr 
:
{ before(grammarAccess.getBaseJRExprRule()); }
	 ruleBaseJRExpr
{ after(grammarAccess.getBaseJRExprRule()); } 
	 EOF 
;

// Rule BaseJRExpr
ruleBaseJRExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseJRExprAccess().getAlternatives()); }
(rule__BaseJRExpr__Alternatives)
{ after(grammarAccess.getBaseJRExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArguments
entryRuleArguments 
:
{ before(grammarAccess.getArgumentsRule()); }
	 ruleArguments
{ after(grammarAccess.getArgumentsRule()); } 
	 EOF 
;

// Rule Arguments
ruleArguments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentsAccess().getGroup()); }
(rule__Arguments__Group__0)
{ after(grammarAccess.getArgumentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionList
entryRuleExpressionList 
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseCommonExpression
entryRuleBaseCommonExpression 
:
{ before(grammarAccess.getBaseCommonExpressionRule()); }
	 ruleBaseCommonExpression
{ after(grammarAccess.getBaseCommonExpressionRule()); } 
	 EOF 
;

// Rule BaseCommonExpression
ruleBaseCommonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseCommonExpressionAccess().getAlternatives()); }
(rule__BaseCommonExpression__Alternatives)
{ after(grammarAccess.getBaseCommonExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCast
entryRuleCast 
:
{ before(grammarAccess.getCastRule()); }
	 ruleCast
{ after(grammarAccess.getCastRule()); } 
	 EOF 
;

// Rule Cast
ruleCast
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastAccess().getGroup()); }
(rule__Cast__Group__0)
{ after(grammarAccess.getCastAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestExpression
entryRuleTestExpression 
:
{ before(grammarAccess.getTestExpressionRule()); }
	 ruleTestExpression
{ after(grammarAccess.getTestExpressionRule()); } 
	 EOF 
;

// Rule TestExpression
ruleTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestExpressionAccess().getOrExpressionParserRuleCall()); }
	ruleOrExpression
{ after(grammarAccess.getTestExpressionAccess().getOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryCondExpression
entryRulePrimaryCondExpression 
:
{ before(grammarAccess.getPrimaryCondExpressionRule()); }
	 rulePrimaryCondExpression
{ after(grammarAccess.getPrimaryCondExpressionRule()); } 
	 EOF 
;

// Rule PrimaryCondExpression
rulePrimaryCondExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryCondExpressionAccess().getExprAssignment()); }
(rule__PrimaryCondExpression__ExprAssignment)
{ after(grammarAccess.getPrimaryCondExpressionAccess().getExprAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseBooleanExpr
entryRuleBaseBooleanExpr 
:
{ before(grammarAccess.getBaseBooleanExprRule()); }
	 ruleBaseBooleanExpr
{ after(grammarAccess.getBaseBooleanExprRule()); } 
	 EOF 
;

// Rule BaseBooleanExpr
ruleBaseBooleanExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseBooleanExprAccess().getGroup()); }
(rule__BaseBooleanExpr__Group__0)
{ after(grammarAccess.getBaseBooleanExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstanceOfExpression
entryRuleInstanceOfExpression 
:
{ before(grammarAccess.getInstanceOfExpressionRule()); }
	 ruleInstanceOfExpression
{ after(grammarAccess.getInstanceOfExpressionRule()); } 
	 EOF 
;

// Rule InstanceOfExpression
ruleInstanceOfExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getGroup()); }
(rule__InstanceOfExpression__Group__0)
{ after(grammarAccess.getInstanceOfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOp
entryRuleRelationalOp 
:
{ before(grammarAccess.getRelationalOpRule()); }
	 ruleRelationalOp
{ after(grammarAccess.getRelationalOpRule()); } 
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalOpAccess().getAlternatives()); }
(rule__RelationalOp__Alternatives)
{ after(grammarAccess.getRelationalOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCreator
entryRuleCreator 
:
{ before(grammarAccess.getCreatorRule()); }
	 ruleCreator
{ after(grammarAccess.getCreatorRule()); } 
	 EOF 
;

// Rule Creator
ruleCreator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCreatorAccess().getAlternatives()); }
(rule__Creator__Alternatives)
{ after(grammarAccess.getCreatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassCreator
entryRuleClassCreator 
:
{ before(grammarAccess.getClassCreatorRule()); }
	 ruleClassCreator
{ after(grammarAccess.getClassCreatorRule()); } 
	 EOF 
;

// Rule ClassCreator
ruleClassCreator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassCreatorAccess().getGroup()); }
(rule__ClassCreator__Group__0)
{ after(grammarAccess.getClassCreatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayCreator
entryRuleArrayCreator 
:
{ before(grammarAccess.getArrayCreatorRule()); }
	 ruleArrayCreator
{ after(grammarAccess.getArrayCreatorRule()); } 
	 EOF 
;

// Rule ArrayCreator
ruleArrayCreator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayCreatorAccess().getGroup()); }
(rule__ArrayCreator__Group__0)
{ after(grammarAccess.getArrayCreatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayInitializer
entryRuleArrayInitializer 
:
{ before(grammarAccess.getArrayInitializerRule()); }
	 ruleArrayInitializer
{ after(grammarAccess.getArrayInitializerRule()); } 
	 EOF 
;

// Rule ArrayInitializer
ruleArrayInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayInitializerAccess().getGroup()); }
(rule__ArrayInitializer__Group__0)
{ after(grammarAccess.getArrayInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleArrayType
entryRuleArrayType 
:
{ before(grammarAccess.getArrayTypeRule()); }
	 ruleArrayType
{ after(grammarAccess.getArrayTypeRule()); } 
	 EOF 
;

// Rule ArrayType
ruleArrayType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeAccess().getGroup()); }
(rule__ArrayType__Group__0)
{ after(grammarAccess.getArrayTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassOrInterfaceType
entryRuleClassOrInterfaceType 
:
{ before(grammarAccess.getClassOrInterfaceTypeRule()); }
	 ruleClassOrInterfaceType
{ after(grammarAccess.getClassOrInterfaceTypeRule()); } 
	 EOF 
;

// Rule ClassOrInterfaceType
ruleClassOrInterfaceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getQualifiedNameAssignment()); }
(rule__ClassOrInterfaceType__QualifiedNameAssignment)
{ after(grammarAccess.getClassOrInterfaceTypeAccess().getQualifiedNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getCreatorParserRuleCall_0()); }
	ruleCreator
{ after(grammarAccess.getExpressionAccess().getCreatorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseJRExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseJRExprAccess().getFieldTokenAssignment_0()); }
(rule__BaseJRExpr__FieldTokenAssignment_0)
{ after(grammarAccess.getBaseJRExprAccess().getFieldTokenAssignment_0()); }
)

    |(
{ before(grammarAccess.getBaseJRExprAccess().getParameterTokenAssignment_1()); }
(rule__BaseJRExpr__ParameterTokenAssignment_1)
{ after(grammarAccess.getBaseJRExprAccess().getParameterTokenAssignment_1()); }
)

    |(
{ before(grammarAccess.getBaseJRExprAccess().getVariableTokenAssignment_2()); }
(rule__BaseJRExpr__VariableTokenAssignment_2)
{ after(grammarAccess.getBaseJRExprAccess().getVariableTokenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseCommonExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseCommonExpressionAccess().getBasejrexprAssignment_0()); }
(rule__BaseCommonExpression__BasejrexprAssignment_0)
{ after(grammarAccess.getBaseCommonExpressionAccess().getBasejrexprAssignment_0()); }
)

    |(
{ before(grammarAccess.getBaseCommonExpressionAccess().getLiteralAssignment_1()); }
(rule__BaseCommonExpression__LiteralAssignment_1)
{ after(grammarAccess.getBaseCommonExpressionAccess().getLiteralAssignment_1()); }
)

    |(
{ before(grammarAccess.getBaseCommonExpressionAccess().getGroup_2()); }
(rule__BaseCommonExpression__Group_2__0)
{ after(grammarAccess.getBaseCommonExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getBaseCommonExpressionAccess().getMethodInvocationParserRuleCall_3()); }
	ruleMethodInvocation
{ after(grammarAccess.getBaseCommonExpressionAccess().getMethodInvocationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getPtypeAssignment_1_0()); }
(rule__Cast__PtypeAssignment_1_0)
{ after(grammarAccess.getCastAccess().getPtypeAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getCastAccess().getArrtypeAssignment_1_1()); }
(rule__Cast__ArrtypeAssignment_1_1)
{ after(grammarAccess.getCastAccess().getArrtypeAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getCastAccess().getClazztypeAssignment_1_2()); }
(rule__Cast__ClazztypeAssignment_1_2)
{ after(grammarAccess.getCastAccess().getClazztypeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getEQUALTerminalRuleCall_1_0_0()); }
	RULE_EQUAL
{ after(grammarAccess.getEqualityExpressionAccess().getEQUALTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getNOTEQUALTerminalRuleCall_1_0_1()); }
	RULE_NOTEQUAL
{ after(grammarAccess.getEqualityExpressionAccess().getNOTEQUALTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOfExpression__TargetAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getTargetRelationalExpressionParserRuleCall_1_1_0_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getInstanceOfExpressionAccess().getTargetRelationalExpressionParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getInstanceOfExpressionAccess().getTargetClassOrInterfaceTypeParserRuleCall_1_1_0_1()); }
	ruleClassOrInterfaceType
{ after(grammarAccess.getInstanceOfExpressionAccess().getTargetClassOrInterfaceTypeParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_2_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_2_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOpAccess().getGTTerminalRuleCall_0()); }
	RULE_GT
{ after(grammarAccess.getRelationalOpAccess().getGTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getGTETerminalRuleCall_1()); }
	RULE_GTE
{ after(grammarAccess.getRelationalOpAccess().getGTETerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getLTTerminalRuleCall_2()); }
	RULE_LT
{ after(grammarAccess.getRelationalOpAccess().getLTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getLTETerminalRuleCall_3()); }
	RULE_LTE
{ after(grammarAccess.getRelationalOpAccess().getLTETerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Creator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreatorAccess().getClassCreatorParserRuleCall_0()); }
	ruleClassCreator
{ after(grammarAccess.getCreatorAccess().getClassCreatorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCreatorAccess().getArrayCreatorParserRuleCall_1()); }
	ruleArrayCreator
{ after(grammarAccess.getCreatorAccess().getArrayCreatorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getClazzInterfAssignment_0_0()); }
(rule__ArrayType__ClazzInterfAssignment_0_0)
{ after(grammarAccess.getArrayTypeAccess().getClazzInterfAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getArrayTypeAccess().getPrimtypeAssignment_0_1()); }
(rule__ArrayType__PrimtypeAssignment_0_1)
{ after(grammarAccess.getArrayTypeAccess().getPrimtypeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getINTLITERALTerminalRuleCall_0()); }
	RULE_INTLITERAL
{ after(grammarAccess.getLiteralAccess().getINTLITERALTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getLONGLITERALTerminalRuleCall_1()); }
	RULE_LONGLITERAL
{ after(grammarAccess.getLiteralAccess().getLONGLITERALTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATLITERALTerminalRuleCall_2()); }
	RULE_FLOATLITERAL
{ after(grammarAccess.getLiteralAccess().getFLOATLITERALTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getDOUBLELITERALTerminalRuleCall_3()); }
	RULE_DOUBLELITERAL
{ after(grammarAccess.getLiteralAccess().getDOUBLELITERALTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getCHARLITERALTerminalRuleCall_4()); }
	RULE_CHARLITERAL
{ after(grammarAccess.getLiteralAccess().getCHARLITERALTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGLITERALTerminalRuleCall_5()); }
	RULE_STRINGLITERAL
{ after(grammarAccess.getLiteralAccess().getSTRINGLITERALTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getTRUETerminalRuleCall_6()); }
	RULE_TRUE
{ after(grammarAccess.getLiteralAccess().getTRUETerminalRuleCall_6()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFALSETerminalRuleCall_7()); }
	RULE_FALSE
{ after(grammarAccess.getLiteralAccess().getFALSETerminalRuleCall_7()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNULLTerminalRuleCall_8()); }
	RULE_NULL
{ after(grammarAccess.getLiteralAccess().getNULLTerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_0()); }

	'boolean' 

{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getCharKeyword_1()); }

	'char' 

{ after(grammarAccess.getPrimitiveTypeAccess().getCharKeyword_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getByteKeyword_2()); }

	'byte' 

{ after(grammarAccess.getPrimitiveTypeAccess().getByteKeyword_2()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getShortKeyword_3()); }

	'short' 

{ after(grammarAccess.getPrimitiveTypeAccess().getShortKeyword_3()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntKeyword_4()); }

	'int' 

{ after(grammarAccess.getPrimitiveTypeAccess().getIntKeyword_4()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getLongKeyword_5()); }

	'long' 

{ after(grammarAccess.getPrimitiveTypeAccess().getLongKeyword_5()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getFloatKeyword_6()); }

	'float' 

{ after(grammarAccess.getPrimitiveTypeAccess().getFloatKeyword_6()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getDoubleKeyword_7()); }

	'double' 

{ after(grammarAccess.getPrimitiveTypeAccess().getDoubleKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getCastParserRuleCall_1_0()); }
(	ruleCast)?
{ after(grammarAccess.getExpressionAccess().getCastParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getCondExprAssignment_1_1()); }
(rule__Expression__CondExprAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getCondExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodInvocation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__0__Impl
	rule__MethodInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameAssignment_0()); }
(rule__MethodInvocation__FullyQualifiedMethodNameAssignment_0)
{ after(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgsAssignment_1()); }
(rule__MethodInvocation__ArgsAssignment_1)
{ after(grammarAccess.getMethodInvocationAccess().getArgsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodName__Group__0__Impl
	rule__MethodName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getGroup_0()); }
(rule__MethodName__Group_0__0)*
{ after(grammarAccess.getMethodNameAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getMethodNameAssignment_1()); }
(rule__MethodName__MethodNameAssignment_1)
{ after(grammarAccess.getMethodNameAccess().getMethodNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodName__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodName__Group_0__0__Impl
	rule__MethodName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getPrefixQMNAssignment_0_0()); }
(rule__MethodName__PrefixQMNAssignment_0_0)
{ after(grammarAccess.getMethodNameAccess().getPrefixQMNAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodName__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getDotsAssignment_0_1()); }
(rule__MethodName__DotsAssignment_0_1)
{ after(grammarAccess.getMethodNameAccess().getDotsAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Arguments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__0__Impl
	rule__Arguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getLeftPAssignment_0()); }
(rule__Arguments__LeftPAssignment_0)
{ after(grammarAccess.getArgumentsAccess().getLeftPAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__1__Impl
	rule__Arguments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExprLstAssignment_1()); }
(rule__Arguments__ExprLstAssignment_1)?
{ after(grammarAccess.getArgumentsAccess().getExprLstAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getRightPAssignment_2()); }
(rule__Arguments__RightPAssignment_2)
{ after(grammarAccess.getArgumentsAccess().getRightPAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
(rule__ExpressionList__ExpressionsAssignment_0)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommasAssignment_1_0()); }
(rule__ExpressionList__CommasAssignment_1_0)
{ after(grammarAccess.getExpressionListAccess().getCommasAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
(rule__ExpressionList__ExpressionsAssignment_1_1)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BaseCommonExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseCommonExpression__Group_2__0__Impl
	rule__BaseCommonExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseCommonExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseCommonExpressionAccess().getLPARENTerminalRuleCall_2_0()); }
	RULE_LPAREN
{ after(grammarAccess.getBaseCommonExpressionAccess().getLPARENTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseCommonExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseCommonExpression__Group_2__1__Impl
	rule__BaseCommonExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseCommonExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseCommonExpressionAccess().getExpressionParserRuleCall_2_1()); }
	ruleExpression
{ after(grammarAccess.getBaseCommonExpressionAccess().getExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseCommonExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseCommonExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseCommonExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseCommonExpressionAccess().getRPARENTerminalRuleCall_2_2()); }
	RULE_RPAREN
{ after(grammarAccess.getBaseCommonExpressionAccess().getRPARENTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Cast__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cast__Group__0__Impl
	rule__Cast__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getLparAssignment_0()); }
(rule__Cast__LparAssignment_0)
{ after(grammarAccess.getCastAccess().getLparAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cast__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cast__Group__1__Impl
	rule__Cast__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getAlternatives_1()); }
(rule__Cast__Alternatives_1)
{ after(grammarAccess.getCastAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cast__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cast__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getRparAssignment_2()); }
(rule__Cast__RparAssignment_2)
{ after(grammarAccess.getCastAccess().getRparAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getTestExpressionParserRuleCall_0()); }
	ruleTestExpression
{ after(grammarAccess.getConditionalExpressionAccess().getTestExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
(rule__ConditionalExpression__Group_1__0)?
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__0__Impl
	rule__ConditionalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0()); }

	'?' 

{ after(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__1__Impl
	rule__ConditionalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOkReturnedExprAssignment_1_1()); }
(rule__ConditionalExpression__OkReturnedExprAssignment_1_1)
{ after(grammarAccess.getConditionalExpressionAccess().getOkReturnedExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__2__Impl
	rule__ConditionalExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); }

	':' 

{ after(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getKoReturnedExprAssignment_1_3()); }
(rule__ConditionalExpression__KoReturnedExprAssignment_1_3)
{ after(grammarAccess.getConditionalExpressionAccess().getKoReturnedExprAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpAssignment_0()); }
(rule__OrExpression__AndExpAssignment_0)
{ after(grammarAccess.getOrExpressionAccess().getAndExpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }

	'||' 

{ after(grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpAssignment_1_1()); }
(rule__OrExpression__AndExpAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getAndExpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getPrimaryCondAssignment_0()); }
(rule__AndExpression__PrimaryCondAssignment_0)
{ after(grammarAccess.getAndExpressionAccess().getPrimaryCondAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_0()); }

	'&&' 

{ after(grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getPrimaryCondAssignment_1_1()); }
(rule__AndExpression__PrimaryCondAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getPrimaryCondAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BaseBooleanExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseBooleanExpr__Group__0__Impl
	rule__BaseBooleanExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBooleanExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseBooleanExprAccess().getNOTTerminalRuleCall_0()); }
(	RULE_NOT)?
{ after(grammarAccess.getBaseBooleanExprAccess().getNOTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseBooleanExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseBooleanExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBooleanExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseBooleanExprAccess().getEqualityExpressionParserRuleCall_1()); }
	ruleEqualityExpression
{ after(grammarAccess.getBaseBooleanExprAccess().getEqualityExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getInstanceofAssignment_0()); }
(rule__EqualityExpression__InstanceofAssignment_0)
{ after(grammarAccess.getEqualityExpressionAccess().getInstanceofAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_0()); }
(rule__EqualityExpression__Alternatives_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getInstanceofAssignment_1_1()); }
(rule__EqualityExpression__InstanceofAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getInstanceofAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelAssignment_0()); }
(rule__RelationalExpression__RelAssignment_0)
{ after(grammarAccess.getRelationalExpressionAccess().getRelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalOpParserRuleCall_1_0()); }
	ruleRelationalOp
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalOpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelAssignment_1_1()); }
(rule__RelationalExpression__RelAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getRelAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceOfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceOfExpression__Group__0__Impl
	rule__InstanceOfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOfExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getElAssignment_0()); }
(rule__InstanceOfExpression__ElAssignment_0)
{ after(grammarAccess.getInstanceOfExpressionAccess().getElAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceOfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceOfExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOfExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getGroup_1()); }
(rule__InstanceOfExpression__Group_1__0)?
{ after(grammarAccess.getInstanceOfExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceOfExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceOfExpression__Group_1__0__Impl
	rule__InstanceOfExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOfExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getINSTANCEOFTerminalRuleCall_1_0()); }
	RULE_INSTANCEOF
{ after(grammarAccess.getInstanceOfExpressionAccess().getINSTANCEOFTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceOfExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceOfExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOfExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getTargetAssignment_1_1()); }
(rule__InstanceOfExpression__TargetAssignment_1_1)
{ after(grammarAccess.getInstanceOfExpressionAccess().getTargetAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultExprAssignment_0()); }
(rule__AdditiveExpression__MultExprAssignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getMultExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1_0()); }
(rule__AdditiveExpression__Alternatives_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultExprAssignment_1_1()); }
(rule__AdditiveExpression__MultExprAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getMultExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprAssignment_0()); }
(rule__MultiplicativeExpression__BaseExprAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
	rule__MultiplicativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
(rule__MultiplicativeExpression__Group_2__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getDOTTerminalRuleCall_1_0()); }
	RULE_DOT
{ after(grammarAccess.getMultiplicativeExpressionAccess().getDOTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMethodsAssignment_1_1()); }
(rule__MultiplicativeExpression__MethodsAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMethodsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2__0__Impl
	rule__MultiplicativeExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2_0()); }
(rule__MultiplicativeExpression__Alternatives_2_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2__1__Impl
	rule__MultiplicativeExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprAssignment_2_1()); }
(rule__MultiplicativeExpression__BaseExprAssignment_2_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_2()); }
(rule__MultiplicativeExpression__Group_2_2__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2_2__0__Impl
	rule__MultiplicativeExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getDOTTerminalRuleCall_2_2_0()); }
	RULE_DOT
{ after(grammarAccess.getMultiplicativeExpressionAccess().getDOTTerminalRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMethodsAssignment_2_2_1()); }
(rule__MultiplicativeExpression__MethodsAssignment_2_2_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMethodsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassCreator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassCreator__Group__0__Impl
	rule__ClassCreator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassCreator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassCreatorAccess().getNEWTerminalRuleCall_0()); }
	RULE_NEW
{ after(grammarAccess.getClassCreatorAccess().getNEWTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassCreator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassCreator__Group__1__Impl
	rule__ClassCreator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassCreator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassCreatorAccess().getClazzAssignment_1()); }
(rule__ClassCreator__ClazzAssignment_1)
{ after(grammarAccess.getClassCreatorAccess().getClazzAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassCreator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassCreator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassCreator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassCreatorAccess().getArgsAssignment_2()); }
(rule__ClassCreator__ArgsAssignment_2)
{ after(grammarAccess.getClassCreatorAccess().getArgsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArrayCreator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group__0__Impl
	rule__ArrayCreator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getNEWTerminalRuleCall_0()); }
	RULE_NEW
{ after(grammarAccess.getArrayCreatorAccess().getNEWTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group__1__Impl
	rule__ArrayCreator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getTypeAssignment_1()); }
(rule__ArrayCreator__TypeAssignment_1)
{ after(grammarAccess.getArrayCreatorAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getArrayInitializerAssignment_2()); }
(rule__ArrayCreator__ArrayInitializerAssignment_2)
{ after(grammarAccess.getArrayCreatorAccess().getArrayInitializerAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArrayInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__0__Impl
	rule__ArrayInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0()); }
(

)
{ after(grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__1__Impl
	rule__ArrayInitializer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getLBRACETerminalRuleCall_1()); }
	RULE_LBRACE
{ after(grammarAccess.getArrayInitializerAccess().getLBRACETerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__2__Impl
	rule__ArrayInitializer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getGroup_2()); }
(rule__ArrayInitializer__Group_2__0)?
{ after(grammarAccess.getArrayInitializerAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__3__Impl
	rule__ArrayInitializer__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getCOMMATerminalRuleCall_3()); }
(	RULE_COMMA)?
{ after(grammarAccess.getArrayInitializerAccess().getCOMMATerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getRBRACETerminalRuleCall_4()); }
	RULE_RBRACE
{ after(grammarAccess.getArrayInitializerAccess().getRBRACETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayInitializer__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group_2__0__Impl
	rule__ArrayInitializer__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getFirstElAssignment_2_0()); }
(rule__ArrayInitializer__FirstElAssignment_2_0)
{ after(grammarAccess.getArrayInitializerAccess().getFirstElAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getGroup_2_1()); }
(rule__ArrayInitializer__Group_2_1__0)*
{ after(grammarAccess.getArrayInitializerAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayInitializer__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group_2_1__0__Impl
	rule__ArrayInitializer__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getCOMMATerminalRuleCall_2_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getArrayInitializerAccess().getCOMMATerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getOtherElsAssignment_2_1_1()); }
(rule__ArrayInitializer__OtherElsAssignment_2_1_1)
{ after(grammarAccess.getArrayInitializerAccess().getOtherElsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ArrayType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__0__Impl
	rule__ArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getAlternatives_0()); }
(rule__ArrayType__Alternatives_0)
{ after(grammarAccess.getArrayTypeAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getArrayTypeAccess().getGroup_1()); }
(rule__ArrayType__Group_1__0)
{ after(grammarAccess.getArrayTypeAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getArrayTypeAccess().getGroup_1()); }
(rule__ArrayType__Group_1__0)*
{ after(grammarAccess.getArrayTypeAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group_1__0__Impl
	rule__ArrayType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getLBRACKETTerminalRuleCall_1_0()); }
	RULE_LBRACKET
{ after(grammarAccess.getArrayTypeAccess().getLBRACKETTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getRBRACKETTerminalRuleCall_1_1()); }
	RULE_RBRACKET
{ after(grammarAccess.getArrayTypeAccess().getRBRACKETTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQualifiedNameAction_0()); }
(

)
{ after(grammarAccess.getQualifiedNameAccess().getQualifiedNameAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
	rule__QualifiedName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifierAssignment_1()); }
(rule__QualifiedName__IdentifierAssignment_1)
{ after(grammarAccess.getQualifiedNameAccess().getIdentifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_2()); }
(rule__QualifiedName__Group_2__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_2__0__Impl
	rule__QualifiedName__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getDotAssignment_2_0()); }
(rule__QualifiedName__DotAssignment_2_0)
{ after(grammarAccess.getQualifiedNameAccess().getDotAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifierAssignment_2_1()); }
(rule__QualifiedName__IdentifierAssignment_2_1)
{ after(grammarAccess.getQualifiedNameAccess().getIdentifierAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Expression__CondExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getCondExprConditionalExpressionParserRuleCall_1_1_0()); }
	ruleConditionalExpression{ after(grammarAccess.getExpressionAccess().getCondExprConditionalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__FullyQualifiedMethodNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameMethodNameParserRuleCall_0_0()); }
	ruleMethodName{ after(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameMethodNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__ArgsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgsArgumentsParserRuleCall_1_0()); }
	ruleArguments{ after(grammarAccess.getMethodInvocationAccess().getArgsArgumentsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__PrefixQMNAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getPrefixQMNIDENTIFIERTerminalRuleCall_0_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getMethodNameAccess().getPrefixQMNIDENTIFIERTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__DotsAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getDotsDOTTerminalRuleCall_0_1_0()); }
	RULE_DOT{ after(grammarAccess.getMethodNameAccess().getDotsDOTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__MethodNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getMethodNameIDENTIFIERTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getMethodNameAccess().getMethodNameIDENTIFIERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseJRExpr__FieldTokenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseJRExprAccess().getFieldTokenFieldTokenTerminalRuleCall_0_0()); }
	RULE_FIELDTOKEN{ after(grammarAccess.getBaseJRExprAccess().getFieldTokenFieldTokenTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseJRExpr__ParameterTokenAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseJRExprAccess().getParameterTokenParameterTokenTerminalRuleCall_1_0()); }
	RULE_PARAMETERTOKEN{ after(grammarAccess.getBaseJRExprAccess().getParameterTokenParameterTokenTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseJRExpr__VariableTokenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseJRExprAccess().getVariableTokenVariableTokenTerminalRuleCall_2_0()); }
	RULE_VARIABLETOKEN{ after(grammarAccess.getBaseJRExprAccess().getVariableTokenVariableTokenTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__LeftPAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getLeftPLPARENTerminalRuleCall_0_0()); }
	RULE_LPAREN{ after(grammarAccess.getArgumentsAccess().getLeftPLPARENTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__ExprLstAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExprLstExpressionListParserRuleCall_1_0()); }
	ruleExpressionList{ after(grammarAccess.getArgumentsAccess().getExprLstExpressionListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__RightPAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getRightPRPARENTerminalRuleCall_2_0()); }
	RULE_RPAREN{ after(grammarAccess.getArgumentsAccess().getRightPRPARENTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__CommasAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommasCOMMATerminalRuleCall_1_0_0()); }
	RULE_COMMA{ after(grammarAccess.getExpressionListAccess().getCommasCOMMATerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseCommonExpression__BasejrexprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseCommonExpressionAccess().getBasejrexprBaseJRExprParserRuleCall_0_0()); }
	ruleBaseJRExpr{ after(grammarAccess.getBaseCommonExpressionAccess().getBasejrexprBaseJRExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseCommonExpression__LiteralAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseCommonExpressionAccess().getLiteralLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getBaseCommonExpressionAccess().getLiteralLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__LparAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getLparLPARENTerminalRuleCall_0_0()); }
	RULE_LPAREN{ after(grammarAccess.getCastAccess().getLparLPARENTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__PtypeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getPtypePrimitiveTypeParserRuleCall_1_0_0()); }
	rulePrimitiveType{ after(grammarAccess.getCastAccess().getPtypePrimitiveTypeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__ArrtypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getArrtypeArrayTypeParserRuleCall_1_1_0()); }
	ruleArrayType{ after(grammarAccess.getCastAccess().getArrtypeArrayTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__ClazztypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getClazztypeClassOrInterfaceTypeParserRuleCall_1_2_0()); }
	ruleClassOrInterfaceType{ after(grammarAccess.getCastAccess().getClazztypeClassOrInterfaceTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cast__RparAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastAccess().getRparRPARENTerminalRuleCall_2_0()); }
	RULE_RPAREN{ after(grammarAccess.getCastAccess().getRparRPARENTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__OkReturnedExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOkReturnedExprExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getOkReturnedExprExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__KoReturnedExprAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getKoReturnedExprExpressionParserRuleCall_1_3_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getKoReturnedExprExpressionParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__AndExpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpAndExpressionParserRuleCall_0_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getAndExpAndExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__AndExpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpAndExpressionParserRuleCall_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getAndExpAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__PrimaryCondAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getPrimaryCondPrimaryCondExpressionParserRuleCall_0_0()); }
	rulePrimaryCondExpression{ after(grammarAccess.getAndExpressionAccess().getPrimaryCondPrimaryCondExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__PrimaryCondAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getPrimaryCondPrimaryCondExpressionParserRuleCall_1_1_0()); }
	rulePrimaryCondExpression{ after(grammarAccess.getAndExpressionAccess().getPrimaryCondPrimaryCondExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondExpression__ExprAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryCondExpressionAccess().getExprBaseBooleanExprParserRuleCall_0()); }
	ruleBaseBooleanExpr{ after(grammarAccess.getPrimaryCondExpressionAccess().getExprBaseBooleanExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__InstanceofAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getInstanceofInstanceOfExpressionParserRuleCall_0_0()); }
	ruleInstanceOfExpression{ after(grammarAccess.getEqualityExpressionAccess().getInstanceofInstanceOfExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__InstanceofAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getInstanceofInstanceOfExpressionParserRuleCall_1_1_0()); }
	ruleInstanceOfExpression{ after(grammarAccess.getEqualityExpressionAccess().getInstanceofInstanceOfExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelAdditiveExpressionParserRuleCall_0_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRelAdditiveExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RelAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelAdditiveExpressionParserRuleCall_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRelAdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOfExpression__ElAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getElRelationalExpressionParserRuleCall_0_0()); }
	ruleRelationalExpression{ after(grammarAccess.getInstanceOfExpressionAccess().getElRelationalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOfExpression__TargetAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfExpressionAccess().getTargetAlternatives_1_1_0()); }
(rule__InstanceOfExpression__TargetAlternatives_1_1_0)
{ after(grammarAccess.getInstanceOfExpressionAccess().getTargetAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__MultExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultExprMultiplicativeExpressionParserRuleCall_0_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getMultExprMultiplicativeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__MultExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultExprMultiplicativeExpressionParserRuleCall_1_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getMultExprMultiplicativeExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__BaseExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprBaseCommonExpressionParserRuleCall_0_0()); }
	ruleBaseCommonExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprBaseCommonExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__MethodsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMethodsMethodInvocationParserRuleCall_1_1_0()); }
	ruleMethodInvocation{ after(grammarAccess.getMultiplicativeExpressionAccess().getMethodsMethodInvocationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__BaseExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprBaseCommonExpressionParserRuleCall_2_1_0()); }
	ruleBaseCommonExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getBaseExprBaseCommonExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__MethodsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMethodsMethodInvocationParserRuleCall_2_2_1_0()); }
	ruleMethodInvocation{ after(grammarAccess.getMultiplicativeExpressionAccess().getMethodsMethodInvocationParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassCreator__ClazzAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassCreatorAccess().getClazzClassOrInterfaceTypeParserRuleCall_1_0()); }
	ruleClassOrInterfaceType{ after(grammarAccess.getClassCreatorAccess().getClazzClassOrInterfaceTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassCreator__ArgsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassCreatorAccess().getArgsArgumentsParserRuleCall_2_0()); }
	ruleArguments{ after(grammarAccess.getClassCreatorAccess().getArgsArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getTypeArrayTypeParserRuleCall_1_0()); }
	ruleArrayType{ after(grammarAccess.getArrayCreatorAccess().getTypeArrayTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__ArrayInitializerAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getArrayInitializerArrayInitializerParserRuleCall_2_0()); }
	ruleArrayInitializer{ after(grammarAccess.getArrayCreatorAccess().getArrayInitializerArrayInitializerParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__FirstElAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getFirstElExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getArrayInitializerAccess().getFirstElExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__OtherElsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getOtherElsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getArrayInitializerAccess().getOtherElsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__ClazzInterfAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getClazzInterfClassOrInterfaceTypeParserRuleCall_0_0_0()); }
	ruleClassOrInterfaceType{ after(grammarAccess.getArrayTypeAccess().getClazzInterfClassOrInterfaceTypeParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__PrimtypeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getPrimtypePrimitiveTypeParserRuleCall_0_1_0()); }
	rulePrimitiveType{ after(grammarAccess.getArrayTypeAccess().getPrimtypePrimitiveTypeParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceType__QualifiedNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getQualifiedNameQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName{ after(grammarAccess.getClassOrInterfaceTypeAccess().getQualifiedNameQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__IdentifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifierIDENTIFIERTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getQualifiedNameAccess().getIdentifierIDENTIFIERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__DotAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getDotDOTTerminalRuleCall_2_0_0()); }
	RULE_DOT{ after(grammarAccess.getQualifiedNameAccess().getDotDOTTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__IdentifierAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifierIDENTIFIERTerminalRuleCall_2_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getQualifiedNameAccess().getIdentifierIDENTIFIERTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_FIELDTOKEN : '$F' RULE_BRACED_JRIDENTIFIER;

RULE_VARIABLETOKEN : '$V' RULE_BRACED_JRIDENTIFIER;

RULE_PARAMETERTOKEN : '$P' RULE_BRACED_JRIDENTIFIER;

fragment RULE_BRACED_JRIDENTIFIER : RULE_LBRACE RULE_JRIDENTIFIER RULE_RBRACE;

RULE_LONGLITERAL : RULE_INTEGERNUMBER RULE_LONGSUFFIX;

RULE_INTLITERAL : RULE_INTEGERNUMBER;

fragment RULE_INTEGERNUMBER : ('0'|'1'..'9' ('0'..'9')*|'0' ('0'..'7')+|RULE_HEXPREFIX RULE_HEXDIGIT+);

fragment RULE_HEXPREFIX : ('0x'|'0X');

fragment RULE_HEXDIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_LONGSUFFIX : ('l'|'L');

fragment RULE_NONINTEGERNUMBER : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT|('0'..'9')+|RULE_HEXPREFIX RULE_HEXDIGIT* '.' RULE_HEXDIGIT* ('p'|'P') ('+'|'-')? ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOATSUFFIX : ('f'|'F');

fragment RULE_DOUBLESUFFIX : ('d'|'D');

RULE_FLOATLITERAL : RULE_NONINTEGERNUMBER RULE_FLOATSUFFIX;

RULE_DOUBLELITERAL : RULE_NONINTEGERNUMBER RULE_DOUBLESUFFIX?;

RULE_CHARLITERAL : '\'' (RULE_ESCAPESEQUENCE|~(('\''|'\\'|'\r'|'\n'))) '\'';

RULE_STRINGLITERAL : '"' (RULE_ESCAPESEQUENCE|~(('\\'|'"'|'\r'|'\n')))* '"';

fragment RULE_ESCAPESEQUENCE : '\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'0'..'3' '0'..'7' '0'..'7'|'0'..'7' '0'..'7'|'0'..'7');

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_NULL : 'null';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_SEMI : ';';

RULE_COMMA : ',';

RULE_DOT : '.';

RULE_NOTEQUAL : '!=';

RULE_EQUAL : '==';

RULE_GT : '>';

RULE_GTE : '>=';

RULE_LT : '<';

RULE_LTE : '<=';

RULE_NEW : 'new';

RULE_INSTANCEOF : 'instanceof';

RULE_NOT : '!';

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_JAVAIDDIGIT)*;

fragment RULE_LETTER : ('$'|'A'..'Z'|'_'|'a'..'z'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u00FF'|'\u0100'..'\u1FFF'|'\u3040'..'\u318F'|'\u3300'..'\u337F'|'\u3400'..'\u3D2D'|'\u4E00'..'\u9FFF'|'\uF900'..'\uFAFF');

fragment RULE_JAVAIDDIGIT : ('0'..'9'|'\u0660'..'\u0669'|'\u06F0'..'\u06F9'|'\u0966'..'\u096F'|'\u09E6'..'\u09EF'|'\u0A66'..'\u0A6F'|'\u0AE6'..'\u0AEF'|'\u0B66'..'\u0B6F'|'\u0BE7'..'\u0BEF'|'\u0C66'..'\u0C6F'|'\u0CE6'..'\u0CEF'|'\u0D66'..'\u0D6F'|'\u0E50'..'\u0E59'|'\u0ED0'..'\u0ED9'|'\u1040'..'\u1049');

fragment RULE_JRIDENTIFIER : ~(('\r'|'\n'|'}'))+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


